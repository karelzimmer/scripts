time, datetime, calendar

>>> help(time)
Help on built-in module time:

NAME
    time - This module provides various functions to manipulate time values.

DESCRIPTION
    There are two standard representations of time.  One is the number
    of seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer
    or a floating point number (to represent fractions of seconds).
    The Epoch is system-defined; on Unix, it is generally January 1st, 1970.
    The actual value can be retrieved by calling gmtime(0).
    Tijd gebaseerd op 32bit C-lib; loopt van 1970 tot 2038; daarbuiten niet.
    
    Clocks/timers vroeger gebaseerd op win GetTickCount() ->wrap na 49.7 dgn;
    monotonic() bewaart interne wrap-teller, zodat ie niet terugkeert naar 0.
    
    The other representation is a tuple of 9 integers giving local time.
    ->wordt time.struct_time:
	    tm_hour      [0, 23]
	    tm_isdst     daylight saving time    1, 0, -1 = onbekend
	    tm_mday      [1, 31], dag vd maand
	    tm_min       [0, 59]
	    tm_mon       [1, 12]
	    tm_sec       [0, 61], let op: kan dus 61 sec geven
	    tm_wday      [0, 6], dag vd week, 0 = Monday
	    tm_yday      [1, 366], dag vh jaar
	    tm_year      jaar in 4 cijfers
    If the DST flag is 0, the time is given in the regular time zone;
    if it is 1, the time is given in the DST time zone;
    if it is -1, mktime() should guess based on the date and time.
    
    Variables:
    
    timezone -- difference in seconds between UTC and local standard time
    altzone -- difference in  seconds between UTC and local DST time
    daylight -- whether local time should reflect DST
    tzname -- tuple of (standard time zone name, DST time zone name)
    
    Functions:
    
    time() -- return current time in seconds since the Epoch as a float
    clock() -- return CPU time since process start as a float; nee, sinds eerste call
    perf_counter() -- idem
    monotonic() -- onduidelijk startpunt
    sleep() -- delay for a number of seconds given as a float
    gmtime() -- convert seconds since Epoch to UTC tuple
    localtime() -- convert seconds since Epoch to local time tuple
    asctime() -- convert time tuple to string
    ctime() -- convert time in seconds to string
    mktime() -- convert local time tuple to seconds since Epoch
    strftime() -- convert time tuple to string according to format specification
    strptime() -- parse string to time tuple according to format specification
    [tzset() -- change the local timezone; NIET op win]
	get_clock_info('  ') -- info over timers

CLASSES
    builtins.tuple(builtins.object)
        struct_time


    class struct_time(builtins.tuple)
     |  The time value as returned by gmtime(), localtime(), and strptime(), and
     |  accepted by asctime(), mktime() and strftime().  May be considered as a
     |  sequence of 9 integers.
     |  
     |  Note that several fields' values are not the same as those defined by
     |  the C language standard for struct tm.  For example, the value of the
     |  field tm_year is the actual year, not year - 1900.  See individual
     |  fields' descriptions for details.
     |  
     |  Method resolution order:
     |      struct_time
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  tm_hour
     |      hours, range [0, 23]
     |  
     |  tm_isdst
     |      1 if summer time is in effect, 0 if not, and -1 if unknown
     |  
     |  tm_mday
     |      day of month, range [1, 31]
     |  
     |  tm_min
     |      minutes, range [0, 59]
     |  
     |  tm_mon
     |      month of year, range [1, 12]
     |  
     |  tm_sec
     |      seconds, range [0, 61])
     |  
     |  tm_wday
     |      day of week, range [0, 6], Monday is 0
     |  
     |  tm_yday
     |      day of year, range [1, 366]
     |  
     |  tm_year
     |      year, for example, 1993
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  n_fields = 9
     |  
     |  n_sequence_fields = 9
     |  
     |  n_unnamed_fields = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  enz


FUNCTIONS
    asctime(...)
        asctime([tuple]) -> string
        
        Convert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.
        When the time tuple is not present, current time as returned by localtime()
        is used.
    
    clock(...)
        clock() -> floating point number
        
        Return the CPU time or real time since the start of the process or since
        the first call to clock().  This has as much precision as the system
        records.
    
    ctime(...)
        ctime(seconds) -> string
        
        Convert a time in seconds since the Epoch to a string in local time.
        This is equivalent to asctime(localtime(seconds)). When the time tuple is
        not present, current time as returned by localtime() is used.
    
    get_clock_info(...)
        get_clock_info(name: str) -> dict
        
        Get information of the specified clock.
    
    gmtime(...)
        gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
                               tm_sec, tm_wday, tm_yday, tm_isdst)
        
        Convert seconds since the Epoch to a time tuple expressing UTC (a.k.a.
        GMT).  When 'seconds' is not passed in, convert the current time instead.
        
        If the platform supports the tm_gmtoff and tm_zone, they are available as
        attributes only.
    
    localtime(...)
        localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
                                  tm_sec,tm_wday,tm_yday,tm_isdst)
        
        Convert seconds since the Epoch to a time tuple expressing local time.
        When 'seconds' is not passed in, uses current time instead via time().
    
    mktime(...)
        mktime(tuple) -> floating point number
        
        Convert a time tuple in local time to seconds since the Epoch.
        Note that mktime(gmtime(0)) will not generally return zero for most
        time zones; instead the returned value will either be equal to that
        of the timezone or altzone attributes on the time module.
    
    monotonic(...)
        monotonic() -> float
        
        Monotonic clock, cannot go backward.
    
    perf_counter(...)
        perf_counter() -> float
        
        Performance counter for benchmarking.
    
    process_time(...)
        process_time() -> float
        
        Process time for profiling: sum of the kernel and user-space CPU time.
    
    sleep(...)
        sleep(seconds)
        
        Delay execution for a given number of seconds.  The argument may be
        a floating point number for subsecond precision.
    
    strftime(...)
        strftime(format[, tuple]) -> string
        
        Convert a time tuple to a string according to a format specification.
        See the library reference manual for formatting codes. When the time tuple
        is not present, current time as returned by localtime() is used.
        
        Commonly used format codes:
        
		%Y  Jaar 4 cijfers
		%y  Jaar 2 cijfers
		%m  Maand [01,12]
		%d  Dag vd maand [01,31]
		$w  Dag vd week [0,6], 0 = zo
		%j  Dag vh jaar [001,366]
		%U  Weeknr jaar [00,53], zo=0, alle dgn voor zo in nwe jr ->week 00, bv: 18
		%W  Weeknr jaar [00,53], ma=0, alle dgn voor ma ->week 00, bv: 19
		
		%H  Uur 24 uur [00,23]
		%I  Uur 12 uur [01,12]
		%p  Locale equivalent v AM/PM
		%M  Minuut [00,59]
		%S  Seconde [00,61]
		%Z  Tijdzone string: 'W. Europe Daylight Time'
		%z  Tijdzone string, is bug, vlg doc moet dit [-23:59, +23:59] geven
		
		vlg Locale betekent: tijd v je regio, NIET opmaak v je win region settings
		%a  Locale korte weekdag: 'Mon'
		%A  Locale lange weekdag
		%b  Locale korte maand
		%B  Locale lange maand
		%c  Locale datum + tijd:  '05/07/18 15:28:24', us-fmt mm/dd/yy
		%x  Locale datum: '05/07/18'
		%X  Locale tijd: '15:28:24'
        
        Other codes may be available on your platform.  See documentation for
        the C library strftime function.
    
    strptime(...)
        strptime(string, format) -> struct_time
        
        Parse a string to a time tuple according to a format specification.
        See the library reference manual for formatting codes (same as
        strftime()).
    
    time(...)
        time() -> floating point number
        
        Return the current time in seconds since the Epoch.
        Fractions of a second may be present if the system clock provides them.

DATA
    altzone = -7200
    daylight = 1
    timezone = -3600
    tzname = ('W. Europe Standard Time', 'W. Europe Daylight Time')

FILE
    (built-in)

===============================

>>> help(datetime)
Help on module datetime:

NAME
    datetime - Fast implementation of the datetime type.

CLASSES
    builtins.object
        date
            datetime
        time
        timedelta
        tzinfo
            timezone


    class date(builtins.object)
     |  date(year, month, day) --> date object
     |  
     |  Methods defined here:
     |  +, -, ==, >=, >, <=, <, !=
     |
     |  __format__(...)
     |      Formats self with strftime.
     |
     |  __reduce__(...)
     |      __reduce__() -> (cls, state)
     |
     |  ctime()
     |      -> str: 'Wed Dec 4 00:00:00 2002'
     |  
     |  fromordinal(secs_sinds_jaar1)
     |      -> date; let op: strftime fmt: crash bij %x / error bij %y (2 cijf jaar)
     |  
     |  fromtimestamp(secs)
     |      -> secs sinds Epoch, dwz 1 jan 1970; vlg time.time()
     |  
     |  isocalendar()
     |      -> (ISO year, ISO weeknr, ISO weekday)
     |      de 1e week die een donderdag bevat is week 1; week start op maandag
     |  
     |  isoformat()
     |      -> str, ISO 8601 format: YYYY-MM-DD.
     |  
     |  isoweekday()
     |      Return the day of the week represented by the date.
     |      Monday == 1 ... Sunday == 7
     |  
     |  replace(year,month,day)
     |      Return date with new specified fields.
     |  
     |  strftime(fmt)
     |      format -> strftime() style string.
     |  
     |  timetuple()
     |      ->time.struct_time t, compatible with time.localtime().
     |  
     |  today()
     |      Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).
     |  
     |  toordinal()
     |      ->dagnr vanaf 1-1-1.
     |  
     |  weekday()
     |      Return the day of the week represented by the date.
     |      Monday == 0 ... Sunday == 6
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  day
     |  
     |  month
     |  
     |  year
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  max = datetime.date(9999, 12, 31)
     |  
     |  min = datetime.date(1, 1, 1)
     |  
     |  resolution = datetime.timedelta(1)


    class datetime(date)
     |  datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
     |  
     |  The year, month and day arguments are required. tzinfo may be None, or an
     |  instance of a tzinfo subclass. The remaining arguments may be ints.
     |  
     |  Method resolution order:
     |      datetime
     |      date
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  enz  
     |  
     |  astimezone([tz])
     |      -> datetime, convert to local time in new timezone tz
     |      error als dt geen timezone bevat (maken met .now(tz))
     |      dt = datetime.now(timezone.utc).astimezone()
     |
     |  combine(date, time)
     |      -> datetime with same date and time fields
     |  
     |  ctime()
     |      Return ctime() style string.
     |  
     |  date()
     |      Return date object with same year, month and day.
     |  
     |  dst()
     |      Return self.tzinfo.dst(self), of None als geen tzinfo
     |  
     |  fromtimestamp(secs, [tzinfo])
     |      timestamp[, tz] -> tz's local time from POSIX timestamp.
     |  
     |  isoformat([sep])
     |      [sep] -> string in ISO 8601 format, YYYY-MM-DDTHH:MM:SS[.mmmmmm][+HH:MM].
     |      
     |      sep is used to separate the year from the time, and defaults to 'T'.
     |  
     |  now(tz=None)
     |      Returns new datetime object representing current time local to tz.
     |      
     |        tz
     |          Timezone object.
     |      
     |      If no tz is specified, uses local timezone.
     |  
     |  replace(year,month,day,hour,minute,second,microsecond,tzinfo)
     |      Return datetime with new specified fields; alle facultatief
     |  
     |  strptime(str, fmt)
     |      -> new datetime parsed from a string (like time.strptime()).
     |  
     |  time()
     |      Return time object with same time but with tzinfo=None.
     |  
     |  timestamp()
     |      -> secs (float)
     |  
     |  timetuple()
     |      -> struct_time t, compatible with time.localtime().
     |  
     |  timetz()
     |      Return time object with same time and tzinfo.
     |  
     |  tzname()
     |      Return self.tzinfo.tzname(self), of None als geen tzinfo
     |  
     |  utcfromtimestamp(secs)
     |      -> UTC datetime, like time.time(), geen tzinfo
     |  
     |  utcnow()
     |      Return a new datetime representing UTC day and time; geen tzinfo
     |  
     |  utcoffset()
     |      -> timedelta, of None als geen tzinfo
     |  
     |  utctimetuple()
     |      -> struct_time t, compatible with time.localtime().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hour
     |  
     |  microsecond
     |  
     |  minute
     |  
     |  second
     |  
     |  tzinfo, geeft tz naam
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  max = datetime.datetime(9999, 12, 31, 23, 59, 59, 999999)
     |  
     |  min = datetime.datetime(1, 1, 1, 0, 0)
     |  
     |  resolution = datetime.timedelta(0, 0, 1)
     |  
     |  ----------------------------------------------------------------------
     |  Methods / data descriptors inherited from date:
     |  


    class time(builtins.object)
     |  time(hour, minute, second, microsecond, tzinfo) --> a time object
     |  
     |  All arguments are optional. tzinfo may be None, or an instance of
     |  a tzinfo subclass. The remaining arguments may be ints.
     |  
     |  Methods defined here:
     |  
     |  dst()
     |      Return self.tzinfo.dst(self).
     |  
     |  isoformat()
     |      Return string in ISO 8601 format, HH:MM:SS[.mmmmmm][+HH:MM]
     |  
     |  replace(hour, minute, second, microsecond, tzinfo)
     |      Return time with new specified fields; alle apart instelbaar
     |  
     |  strftime(fmt)
     |      format -> strftime() style string.
     |  
     |  tzname()
     |      Return self.tzinfo.tzname(self).
     |  
     |  utcoffset(...)
     |      -> timedelta, of None als geen tzinfo
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  hour
     |  
     |  microsecond
     |  
     |  minute
     |  
     |  second
     |  
     |  tzinfo
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  max = datetime.time(23, 59, 59, 999999)
     |  
     |  min = datetime.time(0, 0)
     |  
     |  resolution = datetime.timedelta(0, 0, 1)


    class timedelta(builtins.object)
     |  Difference between two datetime values.
     |
     |  td = timedelta(days,seconds,microseconds,milliseconds,minutes,hours,weeks)
     |
     |  All arguments are optional and default to 0; ints or floats, pos or neg.
     |  Only days, seconds and microseconds are stored internally, others converted:
     |  A millisecond is converted to 1000 microseconds. 
     |  A minute is converted to 60 seconds. 
     |  An hour is converted to 3600 seconds. 
     |  A week is converted to 7 days. 
     |
     |  Methods defined here:
     |  
     |  __abs__(self, /)
     |      abs(self)
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __bool__(self, /)
     |      self != 0
     |  
     |  __divmod__(self, value, /)
     |      Return divmod(self, value).
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __floordiv__(self, value, /)
     |      Return self//value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mod__(self, value, /)
     |      Return self%value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __neg__(self, /)
     |      -self
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __pos__(self, /)
     |      +self
     |  
     |  __radd__(self, value, /)
     |      Return value+self.
     |  
     |  __rdivmod__(self, value, /)
     |      Return divmod(value, self).
     |  
     |  __reduce__(...)
     |      __reduce__() -> (cls, state)
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __rfloordiv__(self, value, /)
     |      Return value//self.
     |  
     |  __rmod__(self, value, /)
     |      Return value%self.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  __rsub__(self, value, /)
     |      Return value-self.
     |  
     |  __rtruediv__(self, value, /)
     |      Return value/self.
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  __sub__(self, value, /)
     |      Return self-value.
     |  
     |  __truediv__(self, value, /)
     |      Return self/value.
     |  
     |  total_seconds(...)
     |      Total seconds in the duration.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  days
     |      Number of days.
     |  
     |  microseconds
     |      Number of microseconds (>= 0 and less than 1 second).
     |  
     |  seconds
     |      Number of seconds (>= 0 and less than 1 day).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  max = datetime.timedelta(999999999, 86399, 999999)
     |  
     |  min = datetime.timedelta(-999999999)
     |  
     |  resolution = datetime.timedelta(0, 0, 1)


    class timezone(tzinfo)
     |  Fixed offset from UTC implementation of tzinfo ( = abstr base class)
     |
     |  timezone(timedelta, [name])
     |  bv: tz = timezone(timedelta(hours=2))
     |
     |  Method resolution order:
     |      timezone
     |      tzinfo
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getinitargs__(...)
     |      pickle support
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  dst(dt)
     |      Return None.
     |  
     |  fromutc(dt)
     |      datetime in UTC -> datetime in local time.
     |  
     |  tzname(dt)
     |      If name is specified when timezone is created, returns the name.
     |      Otherwise returns offset as 'UTC(+|-)HH:MM'.
     |  
     |  utcoffset(dt)
     |      Return fixed offset.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  max = datetime.timezone(datetime.timedelta(0, 86340))
     |  
     |  min = datetime.timezone(datetime.timedelta(-1, 60))
     |  
     |  utc = datetime.timezone.utc
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tzinfo:
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      -> (cls, state)


    class tzinfo(builtins.object)
     |  Abstract base class for time zone info objects.
     |  
     |  Methods defined here:
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  __reduce__(...)
     |      -> (cls, state)
     |  
     |  dst(...)
     |      datetime -> DST offset in minutes east of UTC.
     |  
     |  fromutc(...)
     |      datetime in UTC -> datetime in local time.
     |  
     |  tzname(...)
     |      datetime -> string name of time zone.
     |  
     |  utcoffset(...)
     |      datetime -> timedelta showing offset from UTC, negative values indicating West of UTC

DATA
    MAXYEAR = 9999
    MINYEAR = 1
    datetime_CAPI = <capsule object "datetime.datetime_CAPI">

FILE
    c:\python34\lib\datetime.py

===============



Deel 1. Basis oefeningen

Basisoefeningen met de shell en IDLE

Python is een programmeertaal die gebruikt wordt met een interpreter. Dat betekent dat iedere regel code die je intypt meteen wordt uitgevoerd. Ook code die in een tekstbestand staat wordt regel voor regel ingelezen en uitgevoerd. Je kunt de Python interpreter via het Windows startmenu starten. Je krijgt dan een speciale prompt met drie pijltjes >>>, waarin je rechtstreeks code kunt invoeren. Zodra je op <Enter> drukt, wordt de coderegel uitgevoerd. Deze manier van werken is uiteraard alleen geschikt voor kleine vingeroefeningen. Grotere programma's zet je in codebestanden met de extensie .py. Een groot programma kan uit honderden .py bestanden bestaan, verdeeld over vele directories.

Python heeft een uitstekende documentatie: Python 3.x Manuals. Die kun je via het windows startmenu openen. Hierin zit onder meer een goede inleidende tutorial.


[1] Werken met de Python interpreter

1. Zoek in het windows startmenu Python op. Start de help en bekijk deze even. Je ziet al snel dat je vanavond nog veel te lezen hebt! Start vervolgens de interpreter: Python 3.x (command line). Start niet IDLE, want dat is de programma-editor, die we later gaan gebruiken. Je krijgt een prompt >>>.

2. Type: 3 + 5 en geef <Enter>. Bekijk het resultaat. Je mag spaties weglaten.
Druk in het vervolg na iedere regel steeds op <Enter>.
Probeer: 2 + 3 * 4
Controleer de uitkomst met de Windows Calculator. Wat zie je?
Probeer: (2 + 3) * 4
Probeer: 8 / 5
Probeer: 8 // 5
Probeer: 8 % 5
Wat doet de % operator, de zogeheten modulus-operator?
Probeer: 13 / 0
Probeer: 13.1 / 0
Probeer: 4 ** 3
Probeer: pow(4,3)
pow() is een ingebouwde functie. Een functie is een stukje code met een naam. Sommige functies krijgen informatie mee (een of meer argumenten tussen komma's). Daarna doen ze iets met die info. Soms geven ze een resultaat terug. Deze functie pow() krijgt een getal en een macht mee, en geeft de uitkomst terug. Die wordt in het venster getoond. Andere functies zijn net batchfiles: ze krijgen geen argumenten mee, geven geen uitkomst terug, maar doen wel van alles.
Doe: import math
Hiermee importeer je de ingebouwde library math.
Doe: dir(math)
Probeer: math.pow(4,3)
Probeer: 4 ** .5
Probeer: sqrt(4)
Probeer: math.sqrt(4)
Probeer: 5 = 3
Probeer: 5 == 3
Probeer: 5 != 3
Probeer: 5 >= 3

3. Je kunt ook met variabelen werken. Een variabele is een geheugenvakje met een naam. In Python heeft een variabele geen vast type. Je kunt dus van alles in een variabele stoppen, en een variabele hergebruiken met een ander soort gegevens.
Type: a = 5
Type: b = 7
Type: c = a + b
Wat zie je?
Type: c
Ah.
Type: print(c)
print() is een ingebouwde functie die informatie in de console afdrukt. Binnen de console kun je rechtstreeks de variabele intypen, maar in een programmabestand en dus ook in IDLE moet je print() gebruiken. Je kunt achter print() meerdere argumenten meegeven, tussen komma's.
Type: print(a, b, c)
Type: print(a, "+", b, "=", c)
Type: print(a, '+', b, '=', c)
Je kunt het vorige commando terughalen met <pijltje-op> en dan wijzigen. Scheelt typen.
Type: a = 2
Toon nu a, daarna b, daarna c.
Is c veranderd?
Type: A = 200
Toon a en daarna A.
Het blijkt dat Python hoofdlettergevoelig is en dat a en A verschillende variabelen zijn.
Type: a = a + 1
Toon a.
Type: a += 1
Toon a.
Type: a++
Toon a.
Type: 1 < a and a < 6
Type: 1 < a && a < 6
Type: 1 < a < 6
Nergens staat dat alle opdrachten goed werken. Als het verkeerd gaat, krijg je een error. In andere talen heet dat een runtime exception. Gelukkig ontploft de computer niet na een error.

4. Strings zijn stukjes tekst. Je zet ze tussen '..' of "..".
Type: a = 'appel'
Type: b = 'taart'
Type: c = a + b
Toon c.
Type: c = a - b
Toon c.
Type: c + 'enbakker'
Type: c = a * 3
Toon c.
Type: "boeken"   "bal"
Type: a = "heracles"
Type: a.upper()
upper() is een functie van een string. Zo'n functie die bij een object hoort, heet een methode. Een string heeft allerlei voorgedefinieerde methoden.
Toon a. Is a veranderd?
Type (a + " heeft gewonnen").upper()
Type: b = a.upper()
Toon a en daarna b.
Type: a.startswith("hera")
Type: a.startswith("Hera")
Type: a.startswith("hoera")
Vergeet niet het handige <pijltje-op>.
Type: "the hound of the baskervilles".title()
Type: "the hound of the baskervilles".capitalize()
Type: 'O'Brien'
Volgende met 2 enkele aanhalingstekens na de O:
Type: 'O''Brien'
Type: "O'Brien"
Type: 'O\'Brien'
Je kunt met \t tabs invoegen en met \n nieuwe regels. Er zijn meer van zulke escape codes.
Type: "aap\tnoot\tmies"
Type: "aap\nnoot\nmies"
Type: print("aap\tnoot\tmies")
Type: print("aap\nnoot\nmies")
Type: print("boekenbal\rbui")
Type: print("boekenbal\b\bon")
Type: print("piep!\a")
De piep piept alleen als op de pc het geluid aanstaat.

5. Je kunt met blokhaken een deel van een string pakken. Dat heet een slice.
Type: a = 'appeltaart'
Type: a[0]
Type: a[1]
Type: a[40]
Type: a[-1]
Type: a[-2]
Type: a[2:5]
Deze slice toont de letters van positie 2 tot aan positie 5, dus niet lengte 5.
Type: a[5:2]
Type: a[5:-2]
Type: a[5:9]
Type: a[5:10]
Type: a[5:11]
Type: a[5:]
Type: a[-2:]
Type: a[0:2]
Type: a[:2]
Type: a[0:10]
Type: a[0:10:2]
Wat gebeurt hierboven?
Type: a[::3]
En hier?
Je kan een string niet achteraf wijzigen. Probeer maar:
a[0] = 'e'

6. Slices worden heel veel gebruikt, niet alleen bij strings, maar ook bij lijsten met items. Je maakt een lijst met blokhaken.
Type: b = [2, 7, 5, 4, 3, 8]
Toon b.
Type: b[0]
Type: b[-1]
Type: b[1:4]
Je kunt met lijsten rekenen.
Type: sum(b)
Is sum() een gewone functie, of een methode van een lijst?
Type: sum(b[1:4])
Je kunt een lijst wel achteraf wijzigen.
Type: b[0] = -1
Toon b.
Een lijst mag verschillende soorten gegevens bevatten.
Type: b[0] = "Am Anfang war das Wort"
Toon b.
Type: sum(b)
Maar rekenen gaat nu niet zo goed.
Verderop in de cursus komen we nog uitgebreid terug op lijsten!

7. Nu nog een paar algemene functies.
Type: len(a)
len() is niet een methode van string, maar een algemene functie, die van allerlei soorten objecten de lengte geeft. Maar niet van alle...
Type: b = 5
Type: len(b)
Type: ord("a")
Type: ord("b")
Type: ord("beer")
Type: ord("A")
Type: ord("B")
Type: ord("a") - ord("A")
Hoe converteert een computer van kleine letters naar hoofdletters en omgekeerd?
Type: chr(97)
Type: chr(ord("a")-32)
Type: chr(ord("A")-32)
Hm.
Type: 'b' > 'a'
Type: 'B' > 'a'
Type: 'A' > 'a'
Type: 'a' > 'A'
Ah.
Type: int(12)
Type: int(12.42)
Type: int(12.5)
Type: int(12.8)
Hoe rondt hij af?
Type: round(12.5)
Type: round(13.5)
Type: round(14.5)
Type: round(15.5)
De functie round() werkt ook eigenaardig. Waarom? (Antwoord staat op internet.)
Type: int("126")
Type: int("  126  ")
Type: int("beer")
Type: int()
Type: str(12)
Type: str(12.5)

8. Je kunt opvragen wat voor gegevenstype Python intern gebruikt:
Probeer: type(a)
Probeer: type('arbeidsplaatsenovereenkomsten')
Probeer: type(12)
Probeer: type(hex(12))
Probeer: type(str(12))
Type: c = True
Probeer: type(c)
Probeer: type(12.75)
Probeer: quit()


[2] Extra oefeningen (voor wie tijd over heeft)

1. Start zonodig opnieuw de Python interpreter
Probeer: -8 / 5
Probeer: -8 // 5
Probeer: -8 % 5
Probeer: 8 % 6
Probeer: -8 % -6
Probeer: -8 % 6
Probeer: 8 % -6
Denk na. Zoek daarna op wiki de betekenis van modulus voor negatieve getallen op.

2. Goochelen
Type: a, b = 4, 9
Toon a, daarna b. Wat zie je?
Type: a = a + b
Type: b = a - b
Type: a = a - b
Toon a, daarna b. Wat zie je?

3. Taarten aansnijden
Als ik van 'appeltaart' de 'taart' wil afsnijden, moet ik eerst bepalen waar 'taart' begint en daarna een slice gebruiken.
Type: a = 'appeltaart'
Type: idx = a.index('taart')
Toon idx.
Type: a[:idx]
Ook kan: a[0:idx]
Of in een keer:
Type: a[:a.index('taart')]
Type: b = a.replace('a', 'o')
Toon a en b.
Type: b = a.replace('a', 'o', 2)
Toon a en b.

4. Binair, octaal en hexadecimaal getalstelsel
Type: int(11, 8)
Type: int('11', 8)
Type: int('11', 2)
Type: int('11', 16)
Wat doet het tweede argument in de voorgaande gevallen?
Type: int('0x14')
Type: int('0x14', 0)
Type: int('0o14', 0)
Type: int('0b11', 0)
Wat doet het tweede argument in de voorgaande gevallen?
Type: hex(11)
Type: hex(11.2)
Type: oct(11)
Type: bin(11)
Type: 0x12
Type: 0o12
Type: 0b12
Type: 0b11
Probeer: quit()


[3] Werken met IDLE

1. Maak in de windows verkenner een directory \oefeningen, of gebruik een al bestaande oefendirectory. Start vervolgens de Python editor IDLE op. Je krijgt een Python shell, dat is een luxe versie van de interpreter. Maak hierin met menu File\New File een nieuw programmabestand. Dit verschijnt in een apart codevenster. Zet de twee vensters netjes naast elkaar.

2. Zet bovenaan in het codevenster commentaar. Commentaar begint altijd met # en loopt tot het einde van de regel.
Type: # Mijn eerste Python programma!
en daaronder: print("Ah! Het werkt!")

Sla de code op met Ctrl+S in je oefendirectory. Geef het bestand de naam ex1_basis.py.
Alle Python programma's krijgen de extensie .py. Zo'n programmabestand heet officieel een script of een module.
Bekijk in de menu's Edit en Format welke mooie opmaakfuncties deze editor heeft. Voer daarna het programma uit via toets F5 of menu Run\Run Module.

3. Ga onder de bestaande code door. Vul een variabele a met 5, b met 7. Zet de som in variabele c. Druk c af met print(). Zet hierbij ieder statement op een nieuwe regel. Sla op en run.
Je kunt achter print() meerdere argumenten meegeven.
Probeer dit: print(a,'+',b,'=',c)

4. Probeer hieronder dit: print(a + '+' + b + '=' + c)
Probeer deze versie werkend te krijgen met gebruik van de functie str().
Het blijkt dat de eerste versie met komma's automatisch spaties invoegt.

5. Met formaat-opties kun je print() makkelijker gebruiken. Een %d staat voor een int, een %s voor een string. Er zijn diverse andere formaat-opties.
Probeer: print("%d + %d = %d" % (a,b,c))
De string mag uiteraard ook met enkele aanhalingstekens.

6. Je kunt dit resultaat ook krijgen met de format() methode van een string. Die werkt met accolades {} ipv een % en met getallen voor de volgorde van argumenten.
Probeer: print("{0} + {1} = {2}".format(a,b,c))
Je mag de getallen binnen de accolades weglaten. Dan neemt hij standaard volgorde. Probeer dit uit.
Je mag ook de volgorde binnen de accolades wijzigen.
Probeer: print("{1} + {0} = {2}".format(a,b,c))
Je kunt zelfs met namen werken.
Probeer: print("{derde} is de som van {eerste} en {tweede}".format(eerste=a,tweede=b,derde=c))

Er is binnen de Python gemeenschap een ideologische strijd gaande over de kwestie of je met % dan wel met {} en .format() moet werken. Ieder heeft zijn eigen smaak. De strijd lijkt beslecht door een nieuw soort formaat-string, de zogenaamde f-string. Deze werkt direct met de al bekende variabelen.
Probeer: print(f"{a} + {b} = {c}")

7. Met input() kun je de gebruiker om invoer via het toetsenbord vragen.
Zet onderaan de code: a = input('Geef getal 1: ')
Doe hetzelfde voor variabele b. Tel ze op, zet de uitkomst in c en druk c af met print().
Hm. Wat gebeurt er?
Met welke functie kun je de juiste uitkomst krijgen? Probeer dit uit.

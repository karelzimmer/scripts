Deel 4. Collecties

Oefeningen met range(), list, dict, set
Extra oefeningen


[1] list

1. Maak een nieuwe module ex4_list_dict_set.py. Maak hierin een functie tafel10(). Druk daarin mbv de functie range() en een lus de tafel van 10 af, zodat je krijgt:
 1 maal 10 is  10
 2 maal 10 is  20
...
10 maal 10 is 100

Ga in de code een paar regels onder de functie staan en geef met commentaar aan dat hier het script volgt. Roep daaronder de functie tafel10() aan. Test de code.

2. Maak onder tafel10() en boven het script een nieuwe functie telop(). Deze krijgt een variabel aantal getallen mee. Dit wordt aangegeven met een * voor de argumentnaam. Declareer binnen de functie de variabele totaal met waarde 0. Tel in een for-lus de meegegeven getallen op bij totaal. Retourneer totaal. Test in het script telop() met de getallen 7,2,4,5 en druk de uitkomst af.
Wat gebeurt er als je telop() zonder argumenten aanroept?
Welke ingebouwde functie kun je gebruiken ipv deze telop()?

3. Maak net boven het script een nieuwe functie test_naam(). Zet in de variabele naam de string 'Pieter-Jan van den Hoogenbandt'. Druk eerst deze naam af. Toon daaronder met print() van naam de oneven letters, beginnend bij de eerste letter.
Druk daaronder een lijst af van iedere letter, gevolgd door de positie in de karaktertabel. Gebruik hiervoor de functie ord(). Commentarieer tafel10() uit en roep daaronder test_naam() aan. Test de code.

4. Maak een nieuwe functie test_getallen(). Maak daarin een list met de getallen 1 t/m 5 en zet die in variabele lst. Druk lst af. Bereken het kleinste getal en zet dat in variabele mini. Welke functie is hier handig voor? Bereken het grootste getal en zet dat in variabele maxi. Bereken de som en zet die in variabele som. Druk de drie variabelen af.
Commentarieer in het script de andere functies uit en roep deze functie aan. Test.

5. Maak een nieuwe functie test_comprehension(). Maak daarin een list met de getallen 3, 5, 8, -4, 2 en zet die in de variabele lst. Maak daaronder een nieuwe variabele lst2 van type list en zet daarin het kwadraat van de getallen uit lst. Gebruik hiervoor comprehension expression. Toon lst2.
Commentarieer in het script de andere functies uit en roep deze functie aan. Test.

Wijzig in de functie de comprehension expression voor lst2. Zorg dat alleen het kwadraat van de positieve getallen in lst2 terecht komt. Test.

Wijzig de functie. Maak onder lst2 een list variabele lst3 en zet daarin de derde macht van de getallen uit lst. Gebruik hiervoor de functie map() samen met een lambda expressie. Druk lst3 af. Test.

Wijzig de functie. Maak onder lst3 een list variabele lst4 en zet daarin de positieve getallen uit lst. Gebruik hiervoor de functie filter() samen met een lambda expressie. Toon lst4. Test.

Wijzig de functie. Maak onder lst4 een list variabele lst5 en zet daarin de wortel van alle positieve getallen uit lst. Gebruik hiervoor de functies map() en filter() samen met lambda expressies. Rond af op 2 cijfers achter de komma. Toon lst5. Test.

6. Maak een nieuwe functie statistiek(). De gebruiker mag in een list maximaal 6 gehele getallen invoeren, of eerder stoppen als hij 'stop' intypt. Als de gebruiker meteen 'stop' intypt, moet de code de tekst 'geen uitvoer' afdrukken.
Druk daarna de lijst met ingevoerde getallen af. Toon het kleinste en grootste getal, de som en het aantal getallen. Toon als float het gemiddelde.
Voor de liefhebbers: bereken de variantie. Commentarieer in het script de andere functies uit en roep deze functie aan. Test.


[2] dict en set

1. Maak een nieuwe functie autos(). Maak daarin een dictionary d met daarin vier automerken als key en bijbehorende prijzen als value. Druk d af met print(). In welke volgorde worden de autos getoond? Toon daaronder de autos met een for-lus en de volgende output:
Een aaa kost ppp
Een bbb kost qqq
enz. Waarbij aaa/bbb staan voor autonamen en ppp/qqq voor prijzen.
Bereken en toon de gemiddelde prijs van de autos. Commentarieer in het script de andere functies uit en roep deze functie aan. Test.

2. Maak een nieuwe functie fruit(). Maak daarin een set f1 met daarin als strings een 'peer', 'banaan', 'appel', 'citroen', 'kiwi'. Druk f1 af. Maak een nieuwe set f2 met daarin 'framboos', 'aardbei', 'peer'. Druk f2 af. Maak een set fx die bestaat uit de vereniging van f1 en f2. Toon fx. Zet daarna in fx de doorsnede van f1 en f2. Toon fx. Zet daarna in fx het verschil tussen f1 en f2 en toon fx. Zet daarna in fx het verschil tussen f2 en f1 en toon fx.
Voeg daarna aan f1 een 'meloen', 'banaan' en 'bonono' toe. Toon f1. Commentarieer in het script de andere functies uit en roep deze functie aan. Test.
Hoeveel items bevat f1? Hoeveel bananen?


[3] Extra oefeningen (deze kosten veel tijd; kies de leukste!)

1. Maak een nieuwe functie matrix(). Declareer daarin een 2*2 matrix m1 met op de eerste rij: 1 2 en op de tweede rij: 3 4. Dit doe je mbv van een list van lists.
Declareer daaronder de 2*2 matrix m2 met rijen: 5 3 en 2 7
Tel de matrices op en zet de uitkomst in m3. Druk m3 af. Commentarieer in het script de andere functies uit en roep deze functie aan. Test.

2. Maak een nieuwe functie matrixmul(). Declareer hierin dezelfde matrices. Vermenigvuldig ze en zet de uitkomst in m3. Druk m3 af. Test.

3. Maak een nieuwe functie test_mensen(). Marie, Joop, Frits, Elsie en Geesje zijn Amsterdammers. Zet ze in een set met naam ams. Koos, Rina, Ahmed, Cenk en Kimberly zijn Rotterdammers. Zet ze in een set met naam rot. Marie, Elsie, Geesje, Rina en Kimberly zijn de meiden. Zet ze in een set met naam meid. Frits, Elsie, Rina en Cenk zijn vrienden. Zet ze in een set met naam vriend.

Nu komen een aantal opgaven:
Toon alle mensen.
Toon alle meiden in Amsterdam.
Toon alle jongens in Rotterdam.
Toon alle jongens.
Toon alle vrienden die niet in Rotterdam wonen.
Toon iedereen die geen vriend is.

Nala is een vriendin van Frits die net in Amsterdam is komen wonen. Voeg haar toe aan de juiste verzamelingen. Herhaal de vorige opgaven.

4. NLP is de afkorting voor Natural Language Processing, een onderdeel van Artificiële Intelligentie. In deze oefening maken we een begin met de analyse van een korte tekst.

Kopieer het bestand NLP_tekst.txt van de share \Dump naar de werk directory waar ex4_list_dict_set.py staat. Importeer de module re voor reguliere expressies. Kopieer de variabele r met de eerste tekst uit het bestand NLP_tekst.txt en zet deze net boven het script. Maak daaronder de functie analyseer_tekst(). Verwijder met een reguliere expressie alle punten, komma's en aanhalingstekens uit de tekst en zet het resultaat in kleine letters in de variabele s. De handigste manier is om de niet-tekens en niet-spaties te vervangen door niets. Druk r en daaronder s af. Test.

Wijzig de functie. Maak een lijst lst die alle woorden uit s bevat. Druk lst af en de lengte van lst. Maak daaronder de variabele wdn die de verschillende woorden bevat (dus geen dubbelen). Druk wdn en de lengte van wdn af. Test.

Maak net boven het script een nieuwe functie tel_woorden(). Deze krijgt lst en wdn mee. Druk hierin onder elkaar alle verschillende woorden met hun frequentie in lst af. Geef ieder woord 20 posities ruimte. Roep deze functie onderin analyseer_tekst() aan. Test.
Het is niet moeilijk de woorden gesorteerd op alfabet af te drukken. Probeer dit uit.

Wijzig tel_woorden(). Je kunt makkelijk een histogram met horizontale staven toevegen aan de uitvoer. Gebruik hiervoor bijvoorbeeld het unicode teken '\u2588'. Je ziet dan aan de staven hoe vaak een woord voorkomt. Test.

Je kunt de woordfrequentie ook vastleggen in een dict d met ieder woord als key en de frequentie als value. Je loopt daartoe een keer lst langs en verhoogt telkens de frequentie van een woord dat al bestaat; nieuwe woorden beginnen uiteraard op 1. Maak een nieuwe functie tel_woorden2() en probeer daarin deze werkwijze uit. Druk onderaan weer de woorden en hun frequentie af. Roep nu tel_woorden2() ipv tel_woorden() aan in analyseer_tekst(). Test.

Omdat niet alleen de woorden, maar ook hun frequenties in de dict staan, kunnen we de woorden ook afdrukken op volgorde van frequentie, met het meest voorkomende woord bovenaan. Probeer dit uit.

Python heeft een ingebouwde module collections die onder andere handige varianten van dict bevat. Zoek in de help op defaultdict en Counter. Vooral Counter is voor ons doel handig.

Je kunt diverse grote libraries voor NLP downloaden, waarmee je teksten diepgaand kunt analyseren. Bekende libraries zijn nltk (zit ook in Anaconda), pattern, gensim en spacy.


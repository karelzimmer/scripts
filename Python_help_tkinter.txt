
Uit de help v python
in IDLE shell: help(tkinter)

BitmapImage ->alleen x-windows xbm formaat, geen bmp/dib
PhotoImage ->gif en vaag ppm/pgm formaat; vanaf tk 8.6 ook png; geen jpg
voor andere formaten (bv jpg) en voor bewerkingen heb je pillow (oorspr PIL) nodig:
NIET doen: pip install pillow ->wil binary sources compileren ->gaat fout

wheel met windows binaries ophalen:
(deze is denk ik voor Python34; werkt in ieder geval met 3.4)

http://www.lfd.uci.edu/~gohlke/pythonlibs/#pillow
en:
pip install Pillow-4.1.1-cp34-cp34m-win32.whl
[ecr: nodig voor jpg en andere extra's; vanaf tk 8.6 kent ie zelf png]

http://www.lfd.uci.edu/~gohlke/pythonlibs/#vlfd
Unofficial Windows Binaries for Python Extension Packages
by Christoph Gohlke, Laboratory for Fluorescence Dynamics, University of California, Irvine.

tkinter code zit in:
C:\Python34\Lib\tkinter\__init__.py

tkinter is interface naar het tk gui-framework. Tk geschreven in C,
maar wordt aangestuurd via de scripttaal tcl.
niet: Python ->C-calls in tk lib
maar: Python ->tcl-code (tekstcommando's) ->C-calls in tk lib
naast de Python interpreter draait dus de tcl interpreter.

IDLE en tkinter:
IDLE doet 20 keer/sec een root.update()
root.mainloop() std blocking ->je keert terug in Shell na einde gui prog.
Je mag root.mainloop() weglaten binnen IDLE ->meteen weer Shell actief
->kan interactief met gui prog werken.

Canvas:
Retained Vector Drawing System. Dwz alles wat je "tekent" op canvas wordt een obj
met een eigen id. Canvas bewaart alle objn in een drawing list. Als het scherm
hertekend moet worden, wordt de drawing list afgewerkt. Canvas houdt een "dirty
rectangle" bij, zodat niet het hele scherm hertekend wordt, maar alleen de objn
binnen deze rectangle. Die komen op een bitmap. Deze wordt naar scherm gekopieerd.

Als je een obj verplaatst, hoef je dus niet de "oude" pixels met xor te herstellen,
want er zijn geen oude pixels. Gebr: can.move(id, dx,dy).
Je kan obj attribs wijzigen, bv kleur, en event handling toevoegen.


Websites:

https://www.tcl.tk/man/tcl/TkCmd/event.htm#M7
Volledige doc voor tk in de tcl-variant. Beter dan tkinter docs.

infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html
Handige tkinter 8.5 reference. Univ of New Mexico.

https://www.python-form.de/viewforum.php?f=18
tkinter pagina's

https://python-forum.io/Forum-Python-Coding

effbot.org
https://effbot.org/tkinterbook/
[zeer oud, begin 2000, Fredrick Lundh]

effbot.org/zone/tkinter-complex-canvas.htm
gebr complexe getallen voor rotatie v lines & polygons

effbot.org/imagingbook/
The Python Imaging Library Handbook (PIL)

https://www.i-programmer.info/programming/python/5105-creating-the-python-ui-with-tkinter-the-canvas-widget.html
Creating The Python UI With Tkinter
Alex Armstrong, 21 nov 2012
goed.

=================

ecr: let op:
bij __init__(..) vind je vaak: 'Valid resource names:' (bv bd,bg,fg,height,width)
maar soms werken ze niet bij init, maar wel via .config(..)
bij bv OptionMenu ctor kun je geen width=12 (chars) opgeven, maar wel: opt.config(width=12)
alle resourcenamen bekijken met: mywidget.keys()

events: zie class Misc, fn's bind, event_info

Python 3.4.4 (v3.4.4:737efcadf5a6, Dec 20 2015, 19:28:18) [MSC v.1600 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.

>>> import tkinter

>>> help(tkinter)
Help on package tkinter:

NAME
    tkinter - Wrapper functions for Tcl/Tk.

DESCRIPTION
    Tkinter provides classes which allow the display, positioning and
    control of widgets.
    
    Toplevel widgets:
	Tk, Toplevel
	
	Other widgets:
	Frame, PanedWindow, LabelFrame,
	Menu, Menubutton, OptionMenu (soort cbo),
	Label, Message, Entry, Text,
	Button, Radiobutton, Checkbutton, Spinbox
	Scale, Scrollbar, Listbox, Canvas
	
	geen mdi, datagrid, toolbar, statusbar

    Properties of the widgets are specified with keyword arguments.
    Keyword arguments have the same name as the corresponding resource
    under Tk.
    
    Widgets are positioned with one of the geometry managers Place, Pack
    or Grid. These managers can be called with methods place, pack, grid
    available in every Widget.
    
    Actions are bound to events by resources (e.g. keyword argument
    command) or with the method bind.
    
    Example (Hello, World):
    import tkinter
    from tkinter.constants import *
    tk = tkinter.Tk()
    frame = tkinter.Frame(tk, relief=RIDGE, borderwidth=2)
    frame.pack(fill=BOTH,expand=1)
    label = tkinter.Label(frame, text="Hello, World")
    label.pack(fill=X, expand=1)
    button = tkinter.Button(frame,text="Exit",command=tk.destroy)
    button.pack(side=BOTTOM)
    tk.mainloop()

PACKAGE CONTENTS
ecr: vlg modules worden in Python 3.6 NIET autom geïmporteerd
als je doet: from tkinter import *
je moet ze dan alsnog expliciet importeren: from tkinter import messagebox, enz
    __main__
    _fix
    colorchooser
    commondialog
    constants
    dialog
    dnd
    filedialog
    font
    messagebox
    scrolledtext
    simpledialog
    test (package)
    tix
    ttk

CLASSES
    builtins.object
        CallWrapper
        Event
        Grid
        Image
            BitmapImage
            PhotoImage
        Misc
            BaseWidget
                Toplevel(BaseWidget, Wm)
                Widget(BaseWidget, Pack, Place, Grid)
                    Button
                        Studbutton		[ecr: deze en vlg werken niet]
                        Tributton
                    Canvas(Widget, XView, YView)
                    Checkbutton
                    Entry(Widget, XView)
                    Frame
                    Label
                    LabelFrame
                    Listbox(Widget, XView, YView)
                    Menu
                    Menubutton
                        OptionMenu
                    Message
                    PanedWindow
                    Radiobutton
                    Scale
                    Scrollbar
                    Spinbox(Widget, XView)
                    Text(Widget, XView, YView)
            Tk(Misc, Wm)
        Pack
        Place
        Variable
            BooleanVar
            DoubleVar
            IntVar
            StringVar
        Wm
        XView
        YView


    class BaseWidget(Misc)
     |  Internal class.
     |  
     |  Method resolution order:
     |      BaseWidget
     |      Misc
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master, widgetName, cnf={}, kw={}, extra=())
     |      Construct a widget with the parent widget MASTER, a name WIDGETNAME
     |      and appropriate options.
     |  
     |  destroy(self)
     |      Destroy this and all descendants widgets.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |


    class BitmapImage(Image)
     |  Widget which can display a bitmap.
     |  ecr: alleen x-windows .xbm (zwart/wit|transp/kleur) ondersteund
     |  
     |  Method resolution order:
     |      BitmapImage
     |      Image
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name=None, cnf={}, master=None, **kw)
     |      Create a bitmap with NAME.
     |      
     |      Valid resource names: background, data, file, foreground, maskdata, maskfile.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Image:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Image:
     |  


    class BooleanVar(Variable)
     |  Value holder for boolean variables.
     |  
     |  Method resolution order:
     |      BooleanVar
     |      Variable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a boolean variable.
     |      
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to False)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |      
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |  
     |  get(self)
     |      Return the value of the variable as a bool.
     |  
     |  initialize = set(self, value)
     |  
     |  set(self, value)
     |      Set the variable to VALUE.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |  


    class Button(Widget)
     |  Button widget.
     |  
     |  Method resolution order:
     |      Button
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a button widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          activebackground, activeforeground, anchor,
     |          background, bg, bitmap, borderwidth, cursor,
     |          disabledforeground, font, foreground, fg,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, image, justify,
     |          padx, pady, relief, repeatdelay,
     |          repeatinterval, takefocus, text,
     |          textvariable, underline, wraplength
     |
     |      ecr: colors MOETEN als str: "red"|"#rrggbb", nooit tuple (r,g,b)
     |
     |      ecr: relief = FLAT, SUNKEN, RAISED, GROOVE, SOLID, RIDGE
     |      underline=2 ->3e letter onderstrepen ->mnemonic/accelerator: Alt+lett
     |
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, compound, default, height,
     |          overrelief, state, width
     |  
     |  flash(self)
     |      Flash the button.
     |      
     |      This is accomplished by redisplaying
     |      the button several times, alternating between active and
     |      normal colors. At the end of the flash the button is left
     |      in the same normal/active state as when the command was
     |      invoked. This command is ignored if the button's state is
     |      disabled.
     |  
     |  invoke(self)
     |      Invoke the command associated with the button.
     |      
     |      The return value is the return value from the command,
     |      or an empty string if there is no command associated with
     |      the button. This command is ignored if the button's state
     |      is disabled.
     |  
     |  tkButtonDown(self, *dummy)
     |  
     |  tkButtonEnter(self, *dummy)
     |  
     |  tkButtonInvoke(self, *dummy)
     |  
     |  tkButtonLeave(self, *dummy)
     |  
     |  tkButtonUp(self, *dummy)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class CallWrapper(builtins.object)
     |  Internal class. Stores function to call when some user
     |  defined Tcl function is called e.g. after an event occurred.
     |  
     |  Methods defined here:
     |  
     |  __call__(self, *args)
     |      Apply first function SUBST to arguments, than FUNC.
     |  
     |  __init__(self, func, subst, widget)
     |      Store FUNC, SUBST and WIDGET as members.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class Canvas(Widget, XView, YView)
     |  Canvas widget to display graphical elements like lines or text.
     |  
     |  Method resolution order:
     |      Canvas
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a canvas widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, closeenough,
     |      confine, cursor, height, highlightbackground, highlightcolor,
     |      highlightthickness, insertbackground, insertborderwidth,
     |      insertofftime, insertontime, insertwidth, offset, relief,
     |      scrollregion, selectbackground, selectborderwidth, selectforeground,
     |      state, takefocus, width, xscrollcommand, xscrollincrement,
     |      yscrollcommand, yscrollincrement.
     |  
     |  addtag(self, *args)
     |      Internal function.
     |  
     |  addtag_above(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items above TAGORID.
     |  
     |  addtag_all(self, newtag)
     |      Add tag NEWTAG to all items.
     |  
     |  addtag_below(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items below TAGORID.
     |  
     |  addtag_closest(self, newtag, x, y, halo=None, start=None)
     |      Add tag NEWTAG to item which is closest to pixel at X, Y.
     |      If several match take the top-most.
     |      All items closer than HALO are considered overlapping (all are
     |      closests). If START is specified the next below this tag is taken.
     |  
     |  addtag_enclosed(self, newtag, x1, y1, x2, y2)
     |      Add tag NEWTAG to all items in the rectangle defined
     |      by X1,Y1,X2,Y2.
     |  
     |  addtag_overlapping(self, newtag, x1, y1, x2, y2)
     |      Add tag NEWTAG to all items which overlap the rectangle
     |      defined by X1,Y1,X2,Y2.
     |  
     |  addtag_withtag(self, newtag, tagOrId)
     |      Add tag NEWTAG to all items with TAGORID.
     |  
     |  bbox(self, tagOrId=None)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle
     |      which encloses all items with tags specified as arguments.
     |  
     |  canvasx(self, screenx, gridspacing=None)
     |      Return the canvas x coordinate of pixel position SCREENX rounded
     |      to nearest multiple of GRIDSPACING units.
     |  
     |  canvasy(self, screeny, gridspacing=None)
     |      Return the canvas y coordinate of pixel position SCREENY rounded
     |      to nearest multiple of GRIDSPACING units.
     |  
     |  coords(self, tagOrId, [x0,y0,[x1,y1,..]])
     |      Return or set a list of coordinates for the item given in ARGS.
     |      ecr: text of img geven x1,y1 terug; een line geeft x1,y1,x2,y2.
     |      obj verplaatsen met move(id,dx,dy) [rel] of coords(id,x,y) [abs].
     |      abs move + resize ->geef extra coords op.
     |  
     |  create_arc(self, x1,y1,x2,y2, **kw)
     |      Create arc shaped region with coordinates x1,y1,x2,y2. (libo-reon)
     |      ecr: veel opties. start=0 (=starthk), extent=90 (=hk in graden)
     |      style=PIESLICE|CHORD|ARC
     |      state=NORMAL|HIDDEN|DISABLED
     |      veel opties 3 varianten, bv: width, activewidth, disabledwidth. Ik: [..]width.
     |      [..]width=1 (=border), [..]fill='' (=transp, kan kleur)
     |      [..]outline='black' (=borderkleur)
     |      [..]dash=(tupel), voor border, bv (3,5)=3 aan, 5 uit, (3,5,1,2)=3 aan, 5 uit, 1 aan, 2 uit, herhalen
     |      dashoffset=i ->begin pattern bij px i, tag, tags='a'|('a','b',..)
     |      [..]stipple='' (solid), voor fillpattern,'gray25', enz. Stippeltjespatroon, alleen als fill gezet
     |      offset, voor fillpattern, ('x,y' stip tov canvas, '#x,y' tov toplevel wnd, NE,SE,SW,NW,N,E,S,W,CENTER)
     |  
     |  create_bitmap(self, x,y, bitmap, **kw)
     |      Create 2 color bitmap with coordinates x1,y1. Hij centreert ->doe anchor=NW
     |      ecr: bitmap=xbm, anchor=CENTER, [active|disabled]background='' (->transparent),
     |      [..]foreground='black', state
     |  
     |  create_image(self, x,y, image, **kw)
     |      Create image item with coordinates x1,y1. Hij centreert ->doe anchor=NW
     |      ecr: [active|disabled]image=img, anchor=CENTER, state, tag, tags
     |  
     |  create_line(self, x1,y1,x2,y2,.., **kw)
     |      Create line with coordinates x1,y1,...,xn,yn.
     |      arrow=FIRST,LAST,BOTH (default geen), [active|disabled]fill='black' enz, state, tags
     |      smooth=False (default),True (mkt bogen), splinesteps=12 (aant lijnstukken in boog)
     |      capstyle=BUTT (=recht),PROJECTING (=recht, loopt iets door),ROUND
     |      joinstyle=ROUND,BEVEL (=recht),MITER (=puntig)
     |  
     |  create_oval(self, x1,y1,x2,y2, **kw)
     |      Create oval with coordinates x1,y1,x2,y2, tot aan (x2,y2).
     |      ecr: opties zie vor
     |  
     |  create_polygon(self, x1,y1,x2,y2,.., **kw)
     |      Create polygon with coordinates x1,y1,...,xn,yn. Vult zelf aan van (xn,yn) naar (x1,y1)
     |      ecr: omsluit dus altijd een gebied; line doet dat niet
     |      joinstyle, smooth,enz
     |  
     |  create_rectangle(self, x1,y1,x2,y2, **kw)
     |      Create rectangle with coordinates x1,y1,x2,y2, tot aan (x2,y2).
     |      ecr: [..]fill='' (=transparent)
     |  
     |  create_text(self, x,y, text, **kw)
     |      Create text with coordinates x1,y1. Hij centreert tov anchor ->doe evt anchor=NW
     |      ecr: text, font, anchor=CENTER, [..]fill='black', justify=LEFT,CENTER,RIGHT (vervolgregels)
     |           vanaf tk 8.6 (zit bij Python 3.4) ook: angle=<graden>
     |
     |  create_window(self, x,y, window, **kw)
     |      Create window with coordinates x1,y1,x2,y2. ecr: Fout!!!
     |      window=widget, bv label, button, frame
     |      weinig opties: x,y, window, anchor, height, width, state, tags
     |  
     |  dchars(self, tagOrId, first=0, last=first)
     |      Delete characters of text items identified by tag or id in ARGS (possibly
     |      several times) from int first to last inclusive. Last kan 'end'/END zijn.
     |  
     |  delete(self, tagOrId)
     |      Delete items identified by tag or id. Gebr ALL om alles te wissen.
     |  
     |  dtag(self, tagOrId, tagToDelete)
     |      Delete tag or id given as last arguments in ARGS from items
     |      identified by first argument in ARGS.
     |  
     |  find(self, *args)
     |      Internal function.
     |  
     |  find_above(self, tagOrId)
     |      Return items above TAGORID.
     |  
     |  find_all(self)
     |      Return all items.
     |  
     |  find_below(self, tagOrId)
     |      Return all items below TAGORID.
     |  
     |  find_closest(self, x, y, halo=None, start=None)
     |      Return item which is closest to pixel at X, Y.
     |      If several match take the top-most.
     |      All items closer than HALO are considered overlapping (all are
     |      closests). If START (tagOrId) is specified the next below this tag is taken.
     |  
     |  find_enclosed(self, x1, y1, x2, y2)
     |      Return all items in rectangle defined
     |      by X1,Y1,X2,Y2.
     |  
     |  find_overlapping(self, x1, y1, x2, y2)
     |      Return all items which overlap the rectangle
     |      defined by X1,Y1,X2,Y2.
     |  
     |  find_withtag(self, tagOrId)
     |      Return all items with TAGORID.
     |  
     |  focus(self, tagOrId=None)
     |      Set focus to the first item specified in ARGS that allows insertion cursor.
     |      Without arg returns id of obj with current focus, or ''
     |  
     |  gettags(self, tagOrId)
     |      Return list of tags associated with the first item specified in ARGS.
     |  
     |  icursor(self, tagOrId, index)
     |      Set cursor at position POS in the item identified by TAGORID.
     |      Index may be 'end'/END.
     |  
     |  index(self, tagOrId, specifier)
     |      Return position of cursor as int (0 = before first) in item specified in ARGS.
     |      specifier: INSERT (curpos), END, SEL_FIRST, SEL_LAST (after last), "@x,y"
     |      de laatste geeft idx op pos canvas-coords (0 als x,y libo item, END als reon)
     |  
     |  insert(self, tagOrId, posOrSpecifier, text)
     |      Insert TEXT in item TAGORID at position POS. ARGS must
     |      be TAGORID POS TEXT.
     |  
     |  itemcget(self, tagOrId, option)
     |      Return the resource value for a config OPTION for item TAGORID.
     |  
     |  itemconfig = itemconfigure(self, tagOrId, cnf=None, **kw)
     |  
     |  itemconfigure(self, tagOrId, cnf=None, **kw)
     |      Configure resources of an item TAGORID.
     |      
     |      The values for resources are specified as keyword
     |      arguments. Without arguments returns dict with current config.
     |  
     |  lift = tag_raise(self, tagOrId, aboveThis)
     |  
     |  lower = tag_lower(self, tagOrId, belowThis)
     |  
     |  move(self, tagOrId, dx, dy)
     |      Move an item TAGORID given in ARGS.
     |  
     |  postscript(self, cnf={}, **kw)
     |      Generates EPS (Encapsulated PostScript) file.
     |      Valid options: colormap, colormode (='color'|'gray'|'mono'), file, fontmap,
     |      height, pageanchor, pageheight, pagewidth, pagex, pagey,
     |      rotate (False->portrait, True->Landscape), witdh, x, y.
     |  
     |  scale(self, tagOrId, x,y, xscale=1.0, yscale=1.0)
     |      Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE.
     |      ecr: afst v ieder pt tov (x,y) wordt vermvuld met (xscale,yscale)
     |  
     |  scan_dragto(self, x, y, gain=10)
     |      Adjust the view of the canvas to GAIN times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark. Bedoeld voor scrollen met mousedown; zie vlg:
     |  
     |  scan_mark(self, x, y)
     |      Remember the current X, Y coordinates.
     |      ecr: roep deze fn aan in handler mousedown event
     |      roep daarna vor fn aan in handler <Motion> event
     |      gain = hoe snel scrollen tov mousemove
     |  
     |  select_adjust(self, tagOrId, posOrSpecifier)
     |      Adjust the end of the selection near the cursor of an item TAGORID to index.
     |  
     |  select_clear(self)
     |      Clear the selection if it is in this widget.
     |  
     |  select_from(self, tagOrId, posOrSpecifier)
     |      Set the fixed end of a selection in item TAGORID to INDEX.
     |  
     |  select_item(self)
     |      Return the objid of the item which has the selection.
     |  
     |  select_to(self, tagOrId, posOrSpecifier)
     |      Set the variable end of a selection in item TAGORID to INDEX.
     |  
     |  tag_bind(self, tagOrId, sequence=None, func=None, add=None)
     |      Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or whether it will
     |      replace the previous function. See bind for the return value.
     |  
     |  tag_lower(self, tagOrId, belowThis)
     |      Lower an item TAGORID given in ARGS (optional below another item). Zie lower().
     |      ecr: werkt niet bij windows op canvas; gebr dan wnd.lower() of .lift().
     |  
     |  tag_raise(self, tagOrId, aboveThis)
     |      Raise an item TAGORID given in ARGS (optional above another item). Zie lift().
     |  
     |  tag_unbind(self, tagOrId, sequence, funcid=None)
     |      Unbind for all items with TAGORID for event SEQUENCE the
     |      function identified with FUNCID.
     |  
     |  tkraise = tag_raise(self, tagOrId, aboveThis)
     |  
     |  type(self, tagOrId)
     |      Return the type of the item TAGORID.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |  


    class Checkbutton(Widget)
     |  Checkbutton widget which is either in on- or off-state.
     |  
     |  Method resolution order:
     |      Checkbutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a checkbutton widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, activeforeground, anchor,
     |      background, bd, bg, bitmap, borderwidth, command, cursor,
     |      disabledforeground, fg, font, foreground, height,
     |      highlightbackground, highlightcolor, highlightthickness, image,
     |      indicatoron, justify, offvalue, onvalue, padx, pady, relief,
     |      selectcolor, selectimage, state, takefocus, text, textvariable,
     |      underline, variable, width, wraplength.
     |  
     |  deselect(self)
     |      Put the button in off-state.
     |  
     |  flash(self)
     |      Flash the button.
     |  
     |  invoke(self)
     |      Toggle the button and invoke a command if given as resource.
     |  
     |  select(self)
     |      Put the button in on-state.
     |  
     |  toggle(self)
     |      Toggle the button.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class DoubleVar(Variable)
     |  Value holder for float variables.
     |  
     |  Method resolution order:
     |      DoubleVar
     |      Variable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a float variable.
     |      
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to 0.0)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |      
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |  
     |  get(self)
     |      Return the value of the variable as a float.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |  


    class Entry(Widget, XView)
     |  Entry widget which allows to display simple text. Eenregelig.
     |  
     |  Method resolution order:
     |      Entry
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct an entry widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, cursor,
     |      exportselection, fg, font, foreground, highlightbackground,
     |      highlightcolor, highlightthickness, insertbackground,
     |      insertborderwidth, insertofftime, insertontime, insertwidth,
     |      invalidcommand, invcmd, justify, relief, selectbackground,
     |      selectborderwidth, selectforeground, show, state, takefocus,
     |      textvariable, validate, validatecommand, vcmd, width,
     |      xscrollcommand.
     |
     |      ecr: width in kars
     |      state='disabled'|'normal'|'readonly' (1e twee kunnen ook met constanten , 3e niet; 3e kan Ctrl+C)
     |      show='*' (voor pwd)
     |		const voor .insert()/.index()/.delete(): END, INSERT (=cursorpos), ANCHOR (=kar0 v selectie)
     |      takefocus=0 ->niet in tablijst
     |
     |      validate = 'focus'|'focusin'|'focusout'|'key'|'all'|'none' (default ->geen val)
     |		'key': fn per ingetoetste letter aanroepen (ook bij bspace, del)
     |      validatecommand = fn | (regfn, arg1,arg2,arg3,..)
     |      args:
     |      '%d' - action code: 0=del, 1=ins, -1=focusin|focusout|change in textvariable
     |      '%i' - idx bij 'key' (vanaf 0); -1 bij focusin|focusout|change textvariable
     |      '%P' - new text
     |      '%s' - text before change
     |      '%S' - text inserted or deleted
     |      '%v" - current value of validate prop
     |      '%V' - reason for callback: 'focusin'|'focusout'|'key'|'forced' (change textvariable)
     |      '%W' - name of widget
     |
     |		def isOkay0():
     |			if myEnt.get() == 'klaas':
     |				myEnt.focus()				#bij 'focus'|'focusin'|'focusout' focus terugzetten
     |			return True						#moet
     |
     |      def isOkay(act, reason, idx):
     |          ...
     |          return True | False					#False werkt alleen bij 'key'; anders focus terugzetten
     |
     |      bij valfn met args MOET je je fn registreren: regfn = ctl.register(isOkay) ->str
     |      validatecommand = (regfn, '%d','%V','%i')
     |
     |		ingebouwde ctrl-keys:
     |		Ctrl+X|C|V
     |		Ctrl+D = Del
     |		Ctrl+H = Backspace
     |		Ctrl+K = wis re kant regel vanaf cursor
     |		Ctrl+O = insert \n achter cursor; cursor verplaatst niet
     |		Ctrl+T = verwissel 2 letters li en re v cursor; bij einde rg 2 lett li v cursor
     |
     |		NIET: Ctrl+I = tab
     |  
     |  delete(self, first, last=None)
     |      Delete text from FIRST to LAST (not included).
     |  
     |  get(self)
     |      Return the text.
     |  
     |  icursor(self, index)
     |      Insert cursor at INDEX. ecr: let op: Text heeft geen icursor(..)
     |  
     |  index(self, index)
     |      Return position of cursor. ecr: alleen zinvol bij .index(END/INSERT/ANCHOR) ->int
     |  
     |  insert(self, index, string)
     |      Insert STRING at INDEX.
     |  
     |  scan_dragto(self, x)
     |      Adjust the view of the canvas to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  scan_mark(self, x)
     |      Remember the current X, Y coordinates.
     |  
     |  select_adjust = selection_adjust(self, index)
     |  
     |  select_clear = selection_clear(self)
     |  
     |  select_from = selection_from(self, index)
     |  
     |  select_present = selection_present(self)
     |  
     |  select_range = selection_range(self, start, end)
     |  
     |  select_to = selection_to(self, index)
     |  
     |  selection_adjust(self, index)
     |      Adjust the end of the selection near the cursor to INDEX.
     |  
     |  selection_clear(self)
     |      Clear the selection if it is in this widget.
     |  
     |  selection_from(self, index)
     |      Set the fixed end of a selection to INDEX.
     |  
     |  selection_present(self)
     |      Return True if there are characters selected in the entry, False
     |      otherwise.
     |  
     |  selection_range(self, start, end)
     |      Set the selection from START to END (not included).
     |  
     |  selection_to(self, index)
     |      Set the variable end of a selection to INDEX.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  


    class Event(builtins.object)
     |  Container for the properties of an event.
     |  
     |  Instances of this type are generated if one of the following events occurs:
     |  
     |  KeyPress, KeyRelease - for keyboard events
     |  ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events
     |  Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate,
     |  Colormap, Gravity, Reparent, Property, Destroy, Activate,
     |  Deactivate - for window events.
     |  
     |  If a callback function for one of these events is registered
     |  using bind, bind_all, bind_class, or tag_bind, the callback is
     |  called with an Event as first argument.
     |
     |  Attributes (with event types):
     |  
     |  serial - serial number of event
     |  num - mouse button pressed (ButtonPress, ButtonRelease)
     |  focus - whether the window has the focus (Enter, Leave)
     |  height - height of the exposed window (Configure, Expose)
     |  width - width of the exposed window (Configure, Expose)
     |  keycode - keycode of the pressed key (KeyPress, KeyRelease)
     |  state - state of the event as a number (ButtonPress, ButtonRelease,
     |              Enter, KeyPress, KeyRelease, Leave, Motion)
     |  state - state as a string (Visibility)
     |  time - when the event occurred
     |  x - x-position of the mouse
     |  y - y-position of the mouse
     |  x_root - x-position of the mouse on the screen
     |           (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
     |  y_root - y-position of the mouse on the screen
     |           (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)
     |  char - pressed character (KeyPress, KeyRelease)
     |  send_event - see X/Windows documentation
     |  keysym - keysym of the event as a string (KeyPress, KeyRelease)
     |  keysym_num - keysym of the event as a number (KeyPress, KeyRelease)
     |  type - type of the event as a number
     |  widget - widget in which the event occurred
     |  delta - delta of wheel movement (MouseWheel)
     |  
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class Frame(Widget)
     |  Frame widget which may contain other widgets and can have a 3D border.
     |  
     |  Method resolution order:
     |      Frame
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a frame widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, class,
     |      colormap, container, cursor, height, highlightbackground,
     |      highlightcolor, highlightthickness, relief, takefocus, visual, width.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Grid(builtins.object)
     |  Geometry manager Grid.
     |  
     |  Base class to use the methods grid_* in every widget.
     |  
     |  Methods defined here:
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = grid_configure(self, cnf={}, **kw)
     |  
     |  configure = grid_configure(self, cnf={}, **kw)
     |  
     |  forget = grid_forget(self)
     |  
     |  grid = grid_configure(self, cnf={}, **kw)
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at COLUMN,ROW, and ends at COL2,ROW2 inclusive.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_configure(self, cnf={}, **kw)
     |      Position a widget in the parent widget in a grid. Use as options:
     |      column=number - use cell identified with given column (starting with 0)
     |      columnspan=number - this widget will span several columns
     |      [in=master] -  ecr: hij wil in_, niet in
     |      in_=master - use master to contain this widget.
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      row=number - use cell identified with given row (starting with 0)
     |      rowspan=number - this widget will span several rows
     |      sticky=NSEW - if cell is larger on which sides will this
     |                    widget stick to the cell boundary
     |  
     |  grid_forget(self)
     |      Unmap this widget.
     |  
     |  grid_info(self)
     |      Return dict with options+values about the options
     |      for positioning this widget in a grid.
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_remove(self)
     |      Unmap this widget but remember the grid options.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  info = grid_info(self)
     |  
     |  location = grid_location(self, x, y)
     |  
     |  propagate = grid_propagate(self, flag=['_noarg_'])
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  size = grid_size(self)
     |  
     |  slaves = grid_slaves(self, row=None, column=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class Image(builtins.object)
     |  Base class for images.
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __getitem__(self, key)
     |  
     |  __init__(self, imgtype, name=None, cnf={}, master=None, **kw)
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |  
     |  config = configure(self, **kw)
     |  
     |  configure(self, **kw)
     |      Configure the image.
     |  
     |  height(self)
     |      Return the height of the image.
     |  
     |  type(self)
     |      Return the type of the imgage, e.g. "photo" or "bitmap".
     |  
     |  width(self)
     |      Return the width of the image.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)


    class IntVar(Variable)
     |  Value holder for integer variables.
     |  
     |  Method resolution order:
     |      IntVar
     |      Variable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, value=None, name=None)
     |      Construct an integer variable.
     |      
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to 0)
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |      
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |  
     |  get(self)
     |      Return the value of the variable as an integer.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |  


    class Label(Widget)
     |  Label widget which can display text and bitmaps.
     |  
     |  Method resolution order:
     |      Label
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a label widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          activebackground, activeforeground, anchor,
     |          background, bitmap, borderwidth, cursor,
     |          disabledforeground, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, image, justify,
     |          padx, pady, relief, takefocus, text,
     |          textvariable, underline, wraplength
     |
     |      ecr: anchor - default CENTER ->tekst in lbl positioneren
     |      justify=LEFT,CENTER,RIGHT - vervolgregels tov 1e regel
     |		width, height in kars; meerregelig met '\n'
     |
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          height, state, width
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class LabelFrame(Widget)
     |  labelframe widget.
     |  
     |  Method resolution order:
     |      LabelFrame
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a labelframe widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          borderwidth, cursor, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, padx, pady, relief,
     |          takefocus, text
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          background, class, colormap, container,
     |          height, labelanchor, labelwidget,
     |          visual, width
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Listbox(Widget, XView, YView)
     |  Listbox widget which can display a list of strings.
     |  
     |  Method resolution order:
     |      Listbox
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a listbox widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, cursor,
     |      exportselection, fg, font, foreground, height, highlightbackground,
     |      highlightcolor, highlightthickness, relief, selectbackground,
     |      selectborderwidth, selectforeground, selectmode, setgrid, takefocus,
     |      width, xscrollcommand, yscrollcommand, listvariable.
     | 
     |      ecr: selectmode=BROWSE (def), SINGLE, MULTIPLE, EXTENDED (Win manier)
     |      BROWSE=selectieblauw loopt mee met muis/pijltjes
     |      SINGLE=geselecteerde item blijft ->scrollt in/buiten beeld
     |      MULTIPLE=meer items, alleen met kliks
     |      EXTENDED=meer items, manier windows, dus met ctrl/shift+klik
     |
     |  activate(self, index)
     |      Activate item identified by INDEX.
     |  
     |  bbox(self, index)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle
     |      which encloses the item identified by the given index.
     |  
     |  curselection(self)
     |      Return the indices of currently selected item. ecr: tupel.
     |  
     |  delete(self, first, last=None)
     |      Delete items from FIRST to LAST (included).
     |  
     |  get(self, first, last=None)
     |      Get list of items from FIRST to LAST (included).
     |  
     |  index(self, index)
     |      Return index of item identified with INDEX.
     |  
     |  insert(self, index, *elements)
     |      Insert ELEMENTS at INDEX.
     |  
     |  itemcget(self, index, option)
     |      Return the resource value for an ITEM and an OPTION.
     |  
     |  itemconfig = itemconfigure(self, index, cnf=None, **kw)
     |  
     |  itemconfigure(self, index, cnf=None, **kw)
     |      Configure resources of an ITEM.
     |      
     |      The values for resources are specified as keyword arguments.
     |      To get an overview about the allowed keyword arguments
     |      call the method without arguments.
     |      Valid resource names: background, bg, foreground, fg,
     |      selectbackground, selectforeground.
     |  
     |  nearest(self, y)
     |      Get index of item which is nearest to y coordinate Y.
     |  
     |  scan_dragto(self, x, y)
     |      Adjust the view of the listbox to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  scan_mark(self, x, y)
     |      Remember the current X, Y coordinates.
     |  
     |  see(self, index)
     |      Scroll such that INDEX is visible.
     |  
     |  select_anchor = selection_anchor(self, index)
     |  
     |  select_clear = selection_clear(self, first, last=None)
     |  
     |  select_includes = selection_includes(self, index)
     |  
     |  select_set = selection_set(self, first, last=None)
     |  
     |  selection_anchor(self, index)
     |      Set the fixed end oft the selection to INDEX.
     |  
     |  selection_clear(self, first, last=None)
     |      Clear the selection from FIRST to LAST (included).
     |  
     |  selection_includes(self, index)
     |      Return 1 if INDEX is part of the selection.
     |  
     |  selection_set(self, first, last=None)
     |      Set the selection from FIRST to LAST (included) without
     |      changing the currently selected elements.
     |  
     |  size(self)
     |      Return the number of elements in the listbox.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |  


    class Menu(Widget)
     |  Menu widget which allows to display menu bars, pull-down menus and pop-up menus.
     |  
     |  Method resolution order:
     |      Menu
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct menu widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, activeborderwidth,
     |      activeforeground, background, bd, bg, borderwidth, cursor,
     |      disabledforeground, fg, font, foreground, postcommand, relief,
     |      selectcolor, takefocus, tearoff, tearoffcommand, title, type.
     |  
     |  activate(self, index)
     |      Activate entry at INDEX.
     |  
     |  add(self, itemType, cnf={}, **kw)
     |      Internal function.
     |  
     |  add_cascade(self, cnf={}, **kw)
     |      Add hierarchical menu item.
     |  
     |  add_checkbutton(self, cnf={}, **kw)
     |      Add checkbutton menu item.
     |  
     |  add_command(self, cnf={}, **kw)
     |      Add command menu item.
     |  
     |  add_radiobutton(self, cnf={}, **kw)
     |      Add radio menu item.
     |  
     |  add_separator(self, cnf={}, **kw)
     |      Add separator.
     |  
     |  delete(self, index1, index2=None)
     |      Delete menu items between INDEX1 and INDEX2 (included).
     |  
     |  entrycget(self, index, option)
     |      Return the resource value of an menu item for OPTION at INDEX.
     |  
     |  entryconfig = entryconfigure(self, index, cnf=None, **kw)
     |  
     |  entryconfigure(self, index, cnf=None, **kw)
     |      Configure a menu item at INDEX.
     |  
     |  index(self, index)
     |      Return the index of a menu item identified by INDEX.
     |  
     |  insert(self, index, itemType, cnf={}, **kw)
     |      Internal function.
     |  
     |  insert_cascade(self, index, cnf={}, **kw)
     |      Add hierarchical menu item at INDEX.
     |  
     |  insert_checkbutton(self, index, cnf={}, **kw)
     |      Add checkbutton menu item at INDEX.
     |  
     |  insert_command(self, index, cnf={}, **kw)
     |      Add command menu item at INDEX.
     |  
     |  insert_radiobutton(self, index, cnf={}, **kw)
     |      Addd radio menu item at INDEX.
     |  
     |  insert_separator(self, index, cnf={}, **kw)
     |      Add separator at INDEX.
     |  
     |  invoke(self, index)
     |      Invoke a menu item identified by INDEX and execute
     |      the associated command.
     |  
     |  post(self, x, y)
     |      Display a menu at position X,Y.
     |  
     |  tk_bindForTraversal(self)
     |  
     |  tk_firstMenu(self)
     |  
     |  tk_getMenuButtons(self)
     |  
     |  tk_invokeMenu(self)
     |  
     |  tk_mbButtonDown(self)
     |  
     |  tk_mbPost(self)
     |  
     |  tk_mbUnpost(self)
     |  
     |  tk_nextMenu(self, count)
     |  
     |  tk_nextMenuEntry(self, count)
     |  
     |  tk_popup(self, x, y, entry='')
     |      Post the menu at position X,Y with entry ENTRY.
     |  
     |  tk_traverseToMenu(self, char)
     |  
     |  tk_traverseWithinMenu(self, char)
     |  
     |  type(self, index)
     |      Return the type of the menu item at INDEX.
     |  
     |  unpost(self)
     |      Unmap a menu.
     |  
     |  xposition(self, index)
     |      Return the x-position of the leftmost pixel of the menu item
     |      at INDEX.
     |  
     |  yposition(self, index)
     |      Return the y-position of the topmost pixel of the menu item at INDEX.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Menubutton(Widget)
     |  Menubutton widget, obsolete since Tk8.0.
     |  
     |  Method resolution order:
     |      Menubutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Message(Widget)
     |  Message widget to display multiline text. Obsolete since Label does it too. Half waar.
     |
     |  ecr: meerregelig Label met autowrap; wel width (px, niet kars), geen height
	 |  aspect=150 (default) -> 1 1/2 breed als hoog;
	 |  je moet aspect OF width instellen, width overrule't aspect
     |
     |  Method resolution order:
     |      Message
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Misc(builtins.object)
     |  Internal class.
     |  
     |  Base class which defines methods common for interior widgets.
     |  
     |  Methods defined here:
     |  
     |  __getitem__ = cget(self, key)
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |      Return the window path name of this widget.
     |  
     |  after(self, ms, func=None, *args)
     |      Call function with args once after msecs time and returns id.
     |      after zonder func doet een soort time.sleep(..)
     |      
     |      ecr: func wordt in de msgloop geplaatst. Doe while-lus na door aan
     |      eind v fn opnieuw after(..) aan te roepen. Wordt NIET recursief.
     |  
     |  after_cancel(self, id)
     |      Cancel scheduling of function identified with ID.
     |      
     |      Identifier returned by after or after_idle must be
     |      given as first parameter.
     |  
     |  after_idle(self, func, *args)
     |      Call FUNC once if the Tcl main loop has no event to
     |      process and Return an id to cancel the scheduling.
     |  
     |  anchor = grid_anchor(self, anchor=None)
     |  
     |  bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |  
     |  bell(self, displayof=0)
     |      Ring a display's bell.
     |  
     |  bind(self, sequence=None, func=None, add=None)
     |      Bind to this widget at event SEQUENCE a call to function FUNC.
     |      ecr: zie ook class Event.
     |           zie https://effbot.org/tkinterbook/tkinter-events-and-bindings.htm
     |      
     |      SEQUENCE is a string of concatenated [optional] event patterns:
     |      <MODIFIER-MODIFIER-TYPE-DETAIL>
     |
     |      MODIFIER is one of:
     |      Control, Alt, Shift, Meta, Lock, M, Mod1, M1, Mod2, M2, Mod3, M3,
     |      Mod4, M4, Mod5, M5, Button1, B1, Button2, B2, Button3, B3,
     |      Button4, B4, Button5, B5, Double, Triple.
     |      ecr: B3, Button3 enz werken bij bv Motion: <B1-Motion> [=drag]
     |      mouse buttons: 1=left, 2=middle, 3=right 
     |
     |      TYPE is one of:
     |      Activate, Deactivate, Enter, Leave, Map, Unmap, FocusIn, FocusOut,
     |      ButtonPress, Button, ButtonRelease, KeyPress, Key, KeyRelease,
     |      MouseWheel, Circulate, Property, Gravity, Colormap, Reparent, Configure
     |      Expose, Motion, Visibility, Destroy.
     |
     |      DETAIL is:
     |      button_number for ButtonPress, ButtonRelease, bv: Button-3 (=RClick)
     |      Keysymbol for KeyPress/Release, bv A,KeyPress-Left
     |
     |      Examples are:
     |      <Button-1>, <ButtonPress-1>, <1> [alle LClick], <Control-Button-1>,
     |      <ButtonRelease-1>, <Double/Triple-Button-1>, <B1-Motion> [=drag],
     |      <KeyPress-A>, <A>, <Alt-A>, <Left>, <Shift-Up>, <Return>, <BackSpace>,
     |      <Tab>, <F1>..<F12>, <Num-Lock>, <Scroll-Lock>, <space>, <minus>
     |      <Destroy> [=win is being destroyed], <Configure> [=win resize/move]
     |      <Key> [=willek key]
     |
     |      A virtual event of the form <<AString>> where AString can be arbitrary.
     |      This event can be generated by event_generate.
     |      ecr: virtual events <<..>> zie verderop bij event_info
     |
     |      If events are concatenated they must appear shortly
     |      after each other.
     |
     |      ecr: Binding hierarchie:
     |      als je bij een ctrl zowel <Key> als <Return> of <A> hebt gebonden,
     |      kiest hij alleen de meest gespecialiseerde (dus bv <Return>).
     |      Bij bv een <Return> binding voor txt1 en root, draait hij beide.
     |      Volgorde dus van binnen naar buiten:
     |      Best binding on instance ctrl, best binding on toplevel ctrl,
     |      best binding on class level, best binding on app level.
     |      Met return "break" aan einde event handler ->no event bubbling.
     |
     |      Bv <Return> bij txt3 uitschakelen: return "break" in handler, want
     |      dflt handler (=nwe regel) werkt op class Text niveau:
     |
     |          def ignore(event):
     |              return "break"
     |          txt3.bind("<Return>", ignore)
     |      of:
     |          txt3.bind("<Return>", lambda e: "break")
     |      of met method:
     |          self.txt3.bind("<Return>", lambda slf=self,e: "break")
     |
     |      FUNC will be called if the event sequence occurs with an
     |      instance of Event as argument. If the return value of FUNC is
     |      "break" no further bound function is invoked.
     |      
     |      An additional boolean parameter ADD (or add='+') specifies whether
     |      FUNC will be called additionally to the other bound function or whether
     |      it will replace the previous function.
     |      
     |      Bind will return an identifier to allow deletion of the bound function with
     |      unbind without memory leak.
     |      
     |      If FUNC or SEQUENCE is omitted the bound function or list
     |      of bound events are returned.
     |  
     |  bind_all(self, sequence=None, func=None, add=None)
     |      Bind to all widgets at an event SEQUENCE a call to function FUNC,
     |      for the whole application.
     |      be called additionally to the other bound function or whether
     |      it will replace the previous function. See bind for the return value.
     |  
     |  bind_class(self, className, sequence=None, func=None, add=None)
     |      Bind to widgets with bindtag CLASSNAME at event
     |      SEQUENCE a call of function FUNC. An additional
     |      boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or
     |      whether it will replace the previous function. See bind for
     |      the return value.
     |  
     |  bindtags(self, tagList=None)
     |      Set or get the list of bindtags for this widget.
     |      
     |      With no argument return the list of all bindtags associated with
     |      this widget. With a list of strings as argument the bindtags are
     |      set to this list. The bindtags determine in which order events are
     |      processed (see bind).
     |  
     |  cget(self, key)
     |      Return the resource value for a KEY given as string.
     |  
     |  clipboard_append(self, string, **kw)
     |      Append STRING to the Tk clipboard.
     |      
     |      A widget specified at the optional displayof keyword
     |      argument specifies the target display. The clipboard
     |      can be retrieved with selection_get.
     |  
     |  clipboard_clear(self, **kw)
     |      Clear the data in the Tk clipboard.
     |      
     |      A widget specified for the optional displayof keyword
     |      argument specifies the target display.
     |  
     |  clipboard_get(self, **kw)
     |      Retrieve data from the clipboard on window's display.
     |      
     |      The window keyword defaults to the root window of the Tkinter
     |      application.
     |      
     |      The type keyword specifies the form in which the data is
     |      to be returned and should be an atom name such as STRING
     |      or FILE_NAME.  Type defaults to STRING, except on X11, where the default
     |      is to try UTF8_STRING and fall back to STRING.
     |      
     |      This command is equivalent to:
     |      
     |      selection_get(CLIPBOARD)
     |  
     |  colormodel(self, value=None)
     |      Useless. Not implemented in Tk.
     |  
     |  columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)
     |  
     |  config = configure(self, cnf=None, **kw)
     |  
     |  configure(self, cnf=None, **kw)
     |      Configure resources of a widget.
     |      
     |      The values for resources are specified as keyword
     |      arguments. To get an overview about
     |      the allowed keyword arguments call the method keys.
     |  
     |  deletecommand(self, name)
     |      Internal function.
     |      
     |      Delete the Tcl command provided in NAME.
     |  
     |  destroy(self)
     |      Internal function.
     |      
     |      Delete all Tcl commands created for
     |      this widget in the Tcl interpreter.
     |  
     |  event_add(self, virtual, *sequences)
     |      Bind a virtual event VIRTUAL (of the form <<Name>>)
     |      to an event SEQUENCE such that the virtual event is triggered
     |      whenever SEQUENCE occurs.
     |  
     |  event_delete(self, virtual, *sequences)
     |      Unbind a virtual event VIRTUAL from SEQUENCE.
     |  
     |  event_generate(self, sequence, **kw)
     |      Generate an event SEQUENCE. Additional
     |      keyword arguments specify parameter of the event
     |      (e.g. x, y, rootx, rooty, when)
     |      ecr: when='now' (dflt)|'tail'|'head'|'mark' [='head' na andere marks]
     |
     |      zie: https://www.tcl.tk/man/tcl/TkCmd/event.htm#M7
     |      event is officieel direct call (when='now'), of via msgloop (rest) 
     |		Python 3.4: altijd msgloop, ook bij 'now' ->marshal naar main/gui thread
     |
     |  event_info(self, virtual=None)
     |      Return a list of all virtual events or the information
     |      about the SEQUENCE bound to the virtual event VIRTUAL.
     |      ecr: zie eerder bij bind.
     |  
     |      ecr: in tcl zijn de vlg virtual events voorgedef:
     |      vlg zijn notificaties (vertellen wat er gebeurd is)
     |      <<AltUnderlined>>     Alt+letter v menu ingedrukt
     |      <<Invoke>>            doe click op button/listbox/menu (ipv spatie)
     |      <<ListboxSelect>>     msg voor listbox als selected list gewijz
     |      <<MenuSelect>>        voor hfdmenu als curr sel item gewijz (pijltjes)
     |      <<Modified>>          voor text widget als inhoud gewijz
     |      <<Selection>>         voor text widget als sel gewijz
     |      <<ThemeChanged>>      voor text widget als ttk Tile theme gewijz
     |      <<TraverseIn>>        focus enter na tab
     |      <<TraverseOut>>       focus leave na tab
     |      <<UndoStack>>         voor text widget als undo/redo stack leeg/nietleeg wordt
     |      <<WidgetViewSync>>    voor text widget als interne data outof sync met getoond
     |
     |      vlg zijn acties (bv als user Ctrl+V doet, krijg je <<Paste>>)
     |      <<Clear>>, <<Copy>>, <<Cut>>, <<LineEnd>>, <<LineStart>>,
     |      <<NextChar>>, <<NextLine>>, <<NextPara>>, <<NextWord>>,
     |      <<Paste>>, <<PasteSelection>>, <<PrevChar>>, <<PrevLine>>,
     |      <<PrevPara>>, <<PrevWindow>>, <<PrevWord>>, <<Redo>>,
     |      <<SelectAll>>, <<SelectLineEnd>>, <<SelectLineStart>>,
     |      <<SelectNextChar>>, <<SelectNextLine>>, <<SelectNextPara>>, 
     |      <<SelectNextWord>>, <<SelectNone>>, <<SelectPrevChar>>,
     |      <<SelectPrevLine>>, <<SelectPrevPara>>, <<SelectPrevWord>>
     |      <<ToggleSelection>>, <<Undo>>
     | 
     |  focus = focus_set(self)
     |  
     |  focus_displayof(self)
     |      Return the widget which has currently the focus on the
     |      display where this widget is located.
     |      
     |      Return None if the application does not have the focus.
     |  
     |  focus_force(self)
     |      Direct input focus to this widget even if the
     |      application does not have the focus. Use with
     |      caution!
     |  
     |  focus_get(self)
     |      Return the widget which has currently the focus in the
     |      application.
     |      
     |      Use focus_displayof to allow working with several
     |      displays. Return None if application does not have
     |      the focus.
     |  
     |  focus_lastfor(self)
     |      Return the widget which would have the focus if top level
     |      for this widget gets the focus from the window manager.
     |  
     |  focus_set(self)
     |      Direct input focus to this widget.
     |      ecr: ook voor bv can.focus() -> can luistert naar keyboard events.
     |      
     |      If the application currently does not have the focus
     |      this widget will get the focus if the application gets
     |      the focus through the window manager.
     |  
     |  getboolean(self, s)
     |      Return a boolean value for Tcl boolean values true and false given as parameter.
     |  
     |  getvar(self, name='PY_VAR')
     |      Return value of Tcl variable NAME.
     |  
     |  grab_current(self)
     |      Return widget which has currently the grab in this application
     |      or None.
     |  
     |  grab_release(self)
     |      Release grab for this widget if currently set.
     |  
     |  grab_set(self)
     |      Set grab for this widget.
     |      
     |      A grab directs all events to this and descendant
     |      widgets in the application.
     |  
     |  grab_set_global(self)
     |      Set global grab for this widget.
     |      
     |      A global grab directs all events to this and
     |      descendant widgets on the display. Use with caution -
     |      other applications do not get events anymore.
     |  
     |  grab_status(self)
     |      Return None, "local" or "global" if this widget has
     |      no, a local or a global grab.
     |  
     |  grid_anchor(self, anchor=None)
     |      The anchor value controls how to place the grid within the
     |      master when no row/column has any weight.
     |      
     |      The default anchor is nw.
     |  
     |  grid_bbox(self, column=None, row=None, col2=None, row2=None)
     |      Return a tuple of integer coordinates for the bounding
     |      box of this widget controlled by the geometry manager grid.
     |      
     |      If COLUMN, ROW is given the bounding box applies from
     |      the cell with row and column 0 to the specified
     |      cell. If COL2 and ROW2 are given the bounding box
     |      starts at that cell.
     |      
     |      The returned integers specify the offset of the upper left
     |      corner in the master widget and the width and height.
     |  
     |  grid_columnconfigure(self, index, cnf={}, **kw)
     |      Configure column INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the column),
     |      weight (how much does additional space propagate to this column)
     |      and pad (how much space to let additionally).
     |  
     |  grid_location(self, x, y)
     |      Return a tuple of column and row which identify the cell
     |      at which the pixel at position X and Y inside the master
     |      widget is located.
     |  
     |  grid_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given, the current setting will be returned.
     |  
     |  grid_rowconfigure(self, index, cnf={}, **kw)
     |      Configure row INDEX of a grid.
     |      
     |      Valid resources are minsize (minimum size of the row),
     |      weight (how much does additional space propagate to this row)
     |      and pad (how much space to let additionally).
     |  
     |  grid_size(self)
     |      Return a tuple of the number of column and rows in the grid.
     |  
     |  grid_slaves(self, row=None, column=None)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  image_names(self)
     |      Return a list of all existing image names.
     |  
     |  image_types(self)
     |      Return a list of all available image types (e.g. phote bitmap).
     |  
     |  keys(self)
     |      Return a list of all resource names of this widget.
     |  
     |  lift = tkraise(self, aboveThis=None)
     |  
     |  lower(self, belowThis=None)
     |      Lower this widget in the stacking order.
     |  
     |  mainloop(self, n=0)
     |      Call the mainloop of Tk.
     |  
     |  nametowidget(self, name)
     |      Return the Tkinter instance of a widget identified by
     |      its Tcl name NAME.
     |  
     |  option_add(self, pattern, value, priority=None)
     |      Set a VALUE (second parameter) for an option
     |      PATTERN (first parameter).
     |
     |      ecr: bv root.option_add('*Font','times 12'); ('*Label.Font', 'courier 10 bold')
     |      ->geldt dan voor alle fonts, labels, enz ->thema's maken in tk, zonder ttk
     |
     |      An optional third parameter gives the numeric priority
     |      (defaults to 80).
     |  
     |  option_clear(self)
     |      Clear the option database.
     |      
     |      It will be reloaded if option_add is called.
     |  
     |  option_get(self, name, className)
     |      Return the value for an option NAME for this widget
     |      with CLASSNAME.
     |      
     |      Values with higher priority override lower values.
     |  
     |  option_readfile(self, fileName, priority=None)
     |      Read file FILENAME into the option database.
     |      
     |      An optional second parameter gives the numeric
     |      priority.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  quit(self)
     |      Quit the Tcl interpreter. All widgets will be destroyed.
     |  
     |  register = _register(self, func, subst=None, needcleanup=1)
     |  
     |  rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)
     |  
     |  selection_clear(self, **kw)
     |      Clear the current X selection.
     |  
     |  selection_get(self, **kw)
     |      Return the contents of the current X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection and defaults to PRIMARY.  A keyword
     |      parameter displayof specifies a widget on the display
     |      to use. A keyword parameter type specifies the form of data to be
     |      fetched, defaulting to STRING except on X11, where UTF8_STRING is tried
     |      before STRING.
     |  
     |  selection_handle(self, command, **kw)
     |      Specify a function COMMAND to call if the X
     |      selection owned by this widget is queried by another
     |      application.
     |      
     |      This function must return the contents of the
     |      selection. The function will be called with the
     |      arguments OFFSET and LENGTH which allows the chunking
     |      of very long selections. The following keyword
     |      parameters can be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  selection_own(self, **kw)
     |      Become owner of X selection.
     |      
     |      A keyword parameter selection specifies the name of
     |      the selection (default PRIMARY).
     |  
     |  selection_own_get(self, **kw)
     |      Return owner of X selection.
     |      
     |      The following keyword parameter can
     |      be provided:
     |      selection - name of the selection (default PRIMARY),
     |      type - type of the selection (e.g. STRING, FILE_NAME).
     |  
     |  send(self, interp, cmd, *args)
     |      Send Tcl command CMD to different interpreter INTERP to be executed.
     |  
     |  setvar(self, name='PY_VAR', value='1')
     |      Set Tcl variable NAME to VALUE.
     |  
     |  size = grid_size(self)
     |  
     |  slaves = pack_slaves(self)
     |  
     |  tk_bisque(self)
     |      Change the color scheme to light brown as used in Tk 3.6 and before.
     |  
     |  tk_focusFollowsMouse(self)
     |      The widget under mouse will get automatically focus. Can not
     |      be disabled easily.
     |  
     |  tk_focusNext(self)
     |      Return the next widget in the focus order which follows
     |      widget which has currently the focus.
     |      
     |      The focus order first goes to the next child, then to
     |      the children of the child recursively and then to the
     |      next sibling which is higher in the stacking order.  A
     |      widget is omitted if it has the takefocus resource set
     |      to 0 (default 1). Vlg/vor ctrl met [Shift]+Tab, niet pijltjes.
     |  
     |  tk_focusPrev(self)
     |      Return previous widget in the focus order. See tk_focusNext for details.
     |  
     |  tk_menuBar(self, *args)
     |      Do not use. Needed in Tk 3.6 and earlier.
     |  
     |  tk_setPalette(self, *args, **kw)
     |      Set a new color scheme for all widget elements.
     |      
     |      A single color as argument will cause that all colors of Tk
     |      widget elements are derived from this.
     |      Alternatively several keyword parameters and its associated
     |      colors can be given. The following keywords are valid:
     |      activeBackground, foreground, selectColor,
     |      activeForeground, highlightBackground, selectBackground,
     |      background, highlightColor, selectForeground,
     |      disabledForeground, insertBackground, troughColor.
     |  
     |  tk_strictMotif(self, boolean=None)
     |      Set Tcl internal variable, whether the look and feel
     |      should adhere to Motif.
     |      
     |      A parameter of 1 means adhere to Motif (e.g. no color
     |      change if mouse passes over slider).
     |      Returns the set value.
     |  
     |  tkraise(self, aboveThis=None)
     |      Raise this widget in the stacking order.
     |  
     |  unbind(self, sequence, funcid=None)
     |      Unbind for this widget for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  unbind_all(self, sequence)
     |      Unbind for all widgets for event SEQUENCE all functions.
     |  
     |  unbind_class(self, className, sequence)
     |      Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE
     |      all functions.
     |  
     |  update(self)
     |      Enter event loop until all pending events have been processed by Tcl.
     |      ecr: alleen aanroepen op gui-thread, NIET via worker threads
     |  
     |  update_idletasks(self)
     |      Enter event loop until all idle callbacks have been called. This
     |      will update the display of windows but not process events caused by
     |      the user.
     |  
     |  wait_variable(self, name='PY_VAR')
     |      Wait until the variable is modified.
     |      
     |      A parameter of type IntVar, StringVar, DoubleVar or
     |      BooleanVar must be given.
     |  
     |  wait_visibility(self, window=None)
     |      Wait until the visibility of a WIDGET changes
     |      (e.g. it appears).
     |      
     |      If no parameter is given self is used.
     |  
     |  wait_window(self, window=None)
     |      Wait until a WIDGET is destroyed.
     |      
     |      If no parameter is given self is used.
     |  
     |  waitvar = wait_variable(self, name='PY_VAR')
     |  
     |  winfo_atom(self, name, displayof=0)
     |      Return integer which represents atom NAME.
     |  
     |  winfo_atomname(self, id, displayof=0)
     |      Return name of atom with identifier ID.
     |  
     |  winfo_cells(self)
     |      Return number of cells in the colormap for this widget.
     |  
     |  winfo_children(self)
     |      Return a list of all widgets which are children of this widget.
     |  
     |  winfo_class(self)
     |      Return window class name of this widget.
     |  
     |  winfo_colormapfull(self)
     |      Return true if at the last color request the colormap was full.
     |  
     |  winfo_containing(self, rootX, rootY, displayof=0)
     |      Return the widget which is at the root coordinates ROOTX, ROOTY.
     |  
     |  winfo_depth(self)
     |      Return the number of bits per pixel.
     |  
     |  winfo_exists(self)
     |      Return true if this widget exists.
     |  
     |  winfo_fpixels(self, number)
     |      Return the number of pixels for the given distance NUMBER
     |      (e.g. "3c") as float.
     |  
     |  winfo_geometry(self)
     |      Return geometry string for this widget in the form "widthxheight+X+Y".
     |  
     |  winfo_height(self)
     |      Return height of this widget.
     |  
     |  winfo_id(self)
     |      Return identifier ID for this widget. Windows: hwnd, window handle
     |  
     |  winfo_interps(self, displayof=0)
     |      Return the name of all Tcl interpreters for this display.
     |  
     |  winfo_ismapped(self)
     |      Return true if this widget is mapped.
     |  
     |  winfo_manager(self)
     |      Return the window mananger name for this widget.
     |  
     |  winfo_name(self)
     |      Return the name of this widget.
     |  
     |  winfo_parent(self)
     |      Return the name of the parent of this widget.
     |  
     |  winfo_pathname(self, id, displayof=0)
     |      Return the pathname of the widget given by ID.
     |  
     |  winfo_pixels(self, number)
     |      Rounded integer value of winfo_fpixels.
     |  
     |  winfo_pointerx(self)
     |      Return the x coordinate of the pointer on the root window.
     |  
     |  winfo_pointerxy(self)
     |      Return a tuple of x and y coordinates of the pointer on the root window.
     |  
     |  winfo_pointery(self)
     |      Return the y coordinate of the pointer on the root window.
     |  
     |  winfo_reqheight(self)
     |      Return requested height of this widget.
     |  
     |  winfo_reqwidth(self)
     |      Return requested width of this widget.
     |  
     |  winfo_rgb(self, color)
     |      Return tuple of decimal values for red, green, blue for
     |      COLOR in this widget.
     |  
     |  winfo_rootx(self)
     |      Return x coordinate of upper left corner of this widget on the
     |      root window. ecr: bij geom x,y = 66,66 worden deze: 70,89 ->pos client area!
     |  
     |  winfo_rooty(self)
     |      Return y coordinate of upper left corner of this widget on the
     |      root window. ecr: zie vor.
     |  
     |  winfo_screen(self)
     |      Return the screen name of this widget.
     |  
     |  winfo_screencells(self)
     |      Return the number of the cells in the colormap of the screen
     |      of this widget.
     |  
     |  winfo_screendepth(self)
     |      Return the number of bits per pixel of the root window of the
     |      screen of this widget.
     |  
     |  winfo_screenheight(self)
     |      Return the number of pixels of the height of the screen of this widget
     |      in pixel.
     |  
     |  winfo_screenmmheight(self)
     |      Return the number of pixels of the height of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenmmwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in mm.
     |  
     |  winfo_screenvisual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the default
     |      colormodel of this screen. ecr: op Netbook: truecolor
     |  
     |  winfo_screenwidth(self)
     |      Return the number of pixels of the width of the screen of
     |      this widget in pixel.
     |  
     |  winfo_server(self)
     |      Return information of the X-Server of the screen of this widget in
     |      the form "XmajorRminor vendor vendorVersion".
     |  
     |  winfo_toplevel(self)
     |      Return the toplevel widget of this widget.
     |  
     |  winfo_viewable(self)
     |      Return true if the widget and all its higher ancestors are mapped.
     |  
     |  winfo_visual(self)
     |      Return one of the strings directcolor, grayscale, pseudocolor,
     |      staticcolor, staticgray, or truecolor for the
     |      colormodel of this widget.
     |  
     |  winfo_visualid(self)
     |      Return the X identifier for the visual for this widget.
     |  
     |  winfo_visualsavailable(self, includeids=0)
     |      Return a list of all visuals available for the screen
     |      of this widget.
     |      
     |      Each item in the list consists of a visual name (see winfo_visual), a
     |      depth and if INCLUDEIDS=1 is given also the X identifier.
     |  
     |  winfo_vrootheight(self)
     |      Return the height of the virtual root window associated with this
     |      widget in pixels. If there is no virtual root window return the
     |      height of the screen.
     |  
     |  winfo_vrootwidth(self)
     |      Return the width of the virtual root window associated with this
     |      widget in pixel. If there is no virtual root window return the
     |      width of the screen.
     |  
     |  winfo_vrootx(self)
     |      Return the x offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_vrooty(self)
     |      Return the y offset of the virtual root relative to the root
     |      window of the screen of this widget.
     |  
     |  winfo_width(self)
     |      Return the width of this widget.
     |  
     |  winfo_x(self)
     |      Return the x coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  winfo_y(self)
     |      Return the y coordinate of the upper left corner of this widget
     |      in the parent.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  getdouble = <class 'float'>
     |      float(x) -> floating point number
     |      
     |      Convert a string or number to a floating point number, if possible.
     |  
     |  getint = <class 'int'>
     |      int(x=0) -> integer
     |      int(x, base=10) -> integer
     |      
     |      Convert a number or string to an integer, or return 0 if no arguments
     |      are given.  If x is a number, return x.__int__().  For floating point
     |      numbers, this truncates towards zero.
     |      
     |      If x is not a number or if base is given, then x must be a string,
     |      bytes, or bytearray instance representing an integer literal in the
     |      given base.  The literal can be preceded by '+' or '-' and be surrounded
     |      by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
     |      Base 0 means to interpret the base from the string as an integer literal.
     |      >>> int('0b100', base=0)
     |      4
     |


    class OptionMenu(Menubutton)
     |  OptionMenu which allows the user to select a value from a menu.
     |  
     |  Method resolution order:
     |      OptionMenu
     |      Menubutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(self, name)
     |  
     |  __init__(self, master, variable, *values, **kwargs)
     |      Construct an optionmenu widget with the parent MASTER, with
     |      the resource StringVar set to VARIABLE, the unpacked menu
     |      values VALUES and an additional keyword argument command.
     |
     |      ecr: doc zei dat voor values nog arg value kan ->werkt niet.
     |      kan hier niet width=15 opgeven (aant chars), wel via .config(..)
     |  
     |  destroy(self)
     |      Destroy this widget and the associated menu.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Pack(builtins.object)
     |  Geometry manager Pack.
     |  
     |  Base class to use the methods pack_* in every widget.
     |  
     |  Methods defined here:
     |  
     |  config = pack_configure(self, cnf={}, **kw)
     |  
     |  configure = pack_configure(self, cnf={}, **kw)
     |  
     |  forget = pack_forget(self)
     |  
     |  info = pack_info(self)
     |  
     |  pack = pack_configure(self, cnf={}, **kw)
     |  
     |  pack_configure(self, cnf={}, **kw)
     |      Pack a widget in the parent widget. Use as options:
     |      after=widget - pack it after you have packed widget
     |      anchor=NSEW, CENTER - position widget according to given direction; niet: EW/NS
     |      before=widget - pack it before you will pack widget
     |      expand=bool or YES,NO - expand widget if parent size grows
     |      fill=NONE or X or Y or BOTH - fill widget if widget grows
     |      in_=master - use master to contain this widget
     |      ipadx=amount - add internal padding in x direction
     |      ipady=amount - add internal padding in y direction
     |      padx=amount - add padding in x direction
     |      pady=amount - add padding in y direction
     |      side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.
     |  
     |  pack_forget(self)
     |      Unmap this widget and do not use it for the packing order.
     |  
     |  pack_info(self)
     |      Return information about the packing options
     |      for this widget.
     |  
     |  pack_propagate(self, flag=['_noarg_'])
     |      Set or get the status for propagation of geometry information.
     |      
     |      A boolean argument specifies whether the geometry information
     |      of the slaves will determine the size of this widget. If no argument
     |      is given the current setting will be returned.
     |  
     |  pack_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  propagate = pack_propagate(self, flag=['_noarg_'])
     |  
     |  slaves = pack_slaves(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class PanedWindow(Widget)
     |  panedwindow widget.
     |  
     |  Method resolution order:
     |      PanedWindow
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a panedwindow widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          background, borderwidth, cursor, height,
     |          orient, relief, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          handlepad, handlesize, opaqueresize,
     |          sashcursor, sashpad, sashrelief,
     |          sashwidth, showhandle,
     |  
     |  add(self, child, **kw)
     |      Add a child widget to the panedwindow in a new pane.
     |      
     |      The child argument is the name of the child widget
     |      followed by pairs of arguments that specify how to
     |      manage the windows. The possible options and values
     |      are the ones accepted by the paneconfigure method.
     |  
     |  forget = remove(self, child)
     |  
     |  identify(self, x, y)
     |      Identify the panedwindow component at point x, y
     |      
     |      If the point is over a sash or a sash handle, the result
     |      is a two element list containing the index of the sash or
     |      handle, and a word indicating whether it is over a sash
     |      or a handle, such as {0 sash} or {2 handle}. If the point
     |      is over any other part of the panedwindow, the result is
     |      an empty list.
     |  
     |  panecget(self, child, option)
     |      Query a management option for window.
     |      
     |      Option may be any value allowed by the paneconfigure subcommand
     |  
     |  paneconfig = paneconfigure(self, tagOrId, cnf=None, **kw)
     |  
     |  paneconfigure(self, tagOrId, cnf=None, **kw)
     |      Query or modify the management options for window.
     |      
     |      If no option is specified, returns a list describing all
     |      of the available options for pathName.  If option is
     |      specified with no value, then the command returns a list
     |      describing the one named option (this list will be identical
     |      to the corresponding sublist of the value returned if no
     |      option is specified). If one or more option-value pairs are
     |      specified, then the command modifies the given widget
     |      option(s) to have the given value(s); in this case the
     |      command returns an empty string. The following options
     |      are supported:
     |      
     |      after window
     |          Insert the window after the window specified. window
     |          should be the name of a window already managed by pathName.
     |      before window
     |          Insert the window before the window specified. window
     |          should be the name of a window already managed by pathName.
     |      height size
     |          Specify a height for the window. The height will be the
     |          outer dimension of the window including its border, if
     |          any. If size is an empty string, or if -height is not
     |          specified, then the height requested internally by the
     |          window will be used initially; the height may later be
     |          adjusted by the movement of sashes in the panedwindow.
     |          Size may be any value accepted by Tk_GetPixels.
     |      minsize n
     |          Specifies that the size of the window cannot be made
     |          less than n. This constraint only affects the size of
     |          the widget in the paned dimension -- the x dimension
     |          for horizontal panedwindows, the y dimension for
     |          vertical panedwindows. May be any value accepted by
     |          Tk_GetPixels.
     |      padx n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the X-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      pady n
     |          Specifies a non-negative value indicating how much
     |          extra space to leave on each side of the window in
     |          the Y-direction. The value may have any of the forms
     |          accepted by Tk_GetPixels.
     |      sticky style
     |          If a window's pane is larger than the requested
     |          dimensions of the window, this option may be used
     |          to position (or stretch) the window within its pane.
     |          Style is a string that contains zero or more of the
     |          characters n, s, e or w. The string can optionally
     |          contains spaces or commas, but they are ignored. Each
     |          letter refers to a side (north, south, east, or west)
     |          that the window will "stick" to. If both n and s
     |          (or e and w) are specified, the window will be
     |          stretched to fill the entire height (or width) of
     |          its cavity.
     |      width size
     |          Specify a width for the window. The width will be
     |          the outer dimension of the window including its
     |          border, if any. If size is an empty string, or
     |          if -width is not specified, then the width requested
     |          internally by the window will be used initially; the
     |          width may later be adjusted by the movement of sashes
     |          in the panedwindow. Size may be any value accepted by
     |          Tk_GetPixels.
     |  
     |  panes(self)
     |      Returns an ordered list of the child panes.
     |  
     |  proxy(self, *args)
     |      Internal function.
     |  
     |  proxy_coord(self)
     |      Return the x and y pair of the most recent proxy location
     |  
     |  proxy_forget(self)
     |      Remove the proxy from the display.
     |  
     |  proxy_place(self, x, y)
     |      Place the proxy at the given x and y coordinates.
     |  
     |  remove(self, child)
     |      Remove the pane containing child from the panedwindow
     |      
     |      All geometry management options for child will be forgotten.
     |  
     |  sash(self, *args)
     |      Internal function.
     |  
     |  sash_coord(self, index)
     |      Return the current x and y pair for the sash given by index.
     |      
     |      Index must be an integer between 0 and 1 less than the
     |      number of panes in the panedwindow. The coordinates given are
     |      those of the top left corner of the region containing the sash.
     |      pathName sash dragto index x y This command computes the
     |      difference between the given coordinates and the coordinates
     |      given to the last sash coord command for the given sash. It then
     |      moves that sash the computed difference. The return value is the
     |      empty string.
     |  
     |  sash_mark(self, index)
     |      Records x and y for the sash given by index;
     |      
     |      Used in conjunction with later dragto commands to move the sash.
     |  
     |  sash_place(self, index, x, y)
     |      Place the sash given by index at the given coordinates
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class PhotoImage(Image)
     |  Widget which can display colored images in GIF, PPM/PGM format.
     |  ecr: kent vanaf tk 8.6 (Python 3.4) ook PNG, maar nog geen JPG
     |  
     |  Method resolution order:
     |      PhotoImage
     |      Image
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(self, key)
     |      # XXX config
     |  
     |  __init__(self, name=None, cnf={}, master=None, **kw)
     |      Create an image with NAME.
     |      
     |      Valid resource names: data, format, file, gamma, height, palette,
     |      width.
     |  
     |  blank(self)
     |      Display a transparent image.
     |  
     |  cget(self, option)
     |      Return the value of OPTION.
     |  
     |  copy(self)
     |      Return a new PhotoImage with the same image as this widget.
     |  
     |  get(self, x, y)
     |      Return the color (red, green, blue) of the pixel at X,Y.
     |  
     |  put(self, data, to=None)
     |      Put row formatted colors to image starting from
     |      position TO, e.g. image.put("{red green} {blue yellow}", to=(4,6))
     |  
     |  subsample(self, x, y='')
     |      Return a new PhotoImage based on the same image as this widget
     |      but use only every Xth or Yth pixel.
     |  
     |  write(self, filename, format=None, from_coords=None)
     |      Write image to file FILENAME in FORMAT starting from
     |      position FROM_COORDS.
     |  
     |  zoom(self, x, y='')
     |      Return a new PhotoImage with the same image as this widget
     |      but zoom it with X and Y.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Image:
     |  
     |  __del__(self)
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |  
     |  config = configure(self, **kw)
     |      Configure the image.
     |  
     |  configure(self, **kw)
     |      Configure the image.
     |  
     |  height(self)
     |      Return the height of the image.
     |  
     |  type(self)
     |      Return the type of the imgage, e.g. "photo" or "bitmap".
     |  
     |  width(self)
     |      Return the width of the image.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Image:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     

    class Place(builtins.object)
     |  Geometry manager Place.
     |  
     |  Base class to use the methods place_* in every widget.
     |  
     |  Methods defined here:
     |  
     |  config = place_configure(self, cnf={}, **kw)
     |  
     |  configure = place_configure(self, cnf={}, **kw)
     |  
     |  forget = place_forget(self)
     |  
     |  info = place_info(self)
     |  
     |  place = place_configure(self, cnf={}, **kw)
     |  
     |  place_configure(self, cnf={}, **kw)
     |      Place a widget in the parent widget. Use as options:
     |      in_=master - master relative to which the widget is placed
     |      x=amount - locate anchor of this widget at position x of master
     |      y=amount - locate anchor of this widget at position y of master
     |      relx=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to width of master (1.0 is right edge)
     |      rely=amount - locate anchor of this widget between 0.0 and 1.0
     |                    relative to height of master (1.0 is bottom edge)
     |      anchor=NSEW,CENTER (dflt NW) - position anchor according to given direction
     |      width=amount - width of this widget in pixel
     |      height=amount - height of this widget in pixel
     |      relwidth=amount - width of this widget between 0.0 and 1.0
     |                        relative to width of master (1.0 is the same width
     |                        as the master)
     |      relheight=amount - height of this widget between 0.0 and 1.0
     |                         relative to height of master (1.0 is the same
     |                         height as the master)
     |      bordermode="inside" (dflt) or "outside" - whether to take border width of
     |                                         master widget into account
     |  
     |  place_forget(self)
     |      Unmap this widget.
     |  
     |  place_info(self)
     |      Return information about the placing options
     |      for this widget.
     |  
     |  place_slaves(self)
     |      Return a list of all slaves of this widget
     |      in its packing order.
     |  
     |  slaves = place_slaves(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class Radiobutton(Widget)
     |  Radiobutton widget which shows only one of several buttons in on-state.
     |  
     |  Method resolution order:
     |      Radiobutton
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a radiobutton widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, activeforeground, anchor,
     |      background, bd, bg, bitmap, borderwidth, command, cursor,
     |      disabledforeground, fg, font, foreground, height,
     |      highlightbackground, highlightcolor, highlightthickness, image,
     |      indicatoron, justify, padx, pady, relief, selectcolor, selectimage,
     |      state, takefocus, text, textvariable, underline, value, variable,
     |      width, wraplength.
     |  
     |  deselect(self)
     |      Put the button in off-state.
     |  
     |  flash(self)
     |      Flash the button.
     |  
     |  invoke(self)
     |      Toggle the button and invoke a command if given as resource.
     |  
     |  select(self)
     |      Put the button in on-state.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Scale(Widget)
     |  Scale widget which can display a numerical scale.
     |  
     |  Method resolution order:
     |      Scale
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a scale widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, background, bigincrement, bd,
     |      bg, borderwidth, command, cursor, digits, fg, font, foreground, from,
     |      highlightbackground, highlightcolor, highlightthickness, label,
     |      length, orient, relief, repeatdelay, repeatinterval, resolution,
     |      showvalue, sliderlength, sliderrelief, state, takefocus,
     |      tickinterval, to, troughcolor, variable, width.
     |  
     |  coords(self, value=None)
     |      Return a tuple (X,Y) of the point along the centerline of the
     |      trough that corresponds to VALUE or the current value if None is
     |      given.
     |  
     |  get(self)
     |      Get the current value as integer or float.
     |  
     |  identify(self, x, y)
     |      Return where the point X,Y lies. Valid return values are "slider",
     |      "though1" and "though2".
     |  
     |  set(self, value)
     |      Set the value to VALUE.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Scrollbar(Widget)
     |  Scrollbar widget which displays a slider at a certain position.
     |  
     |  Method resolution order:
     |      Scrollbar
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a scrollbar widget with the parent MASTER.
     |      
     |      Valid resource names: activebackground, activerelief,
     |      background, bd, bg, borderwidth, command, cursor,
     |      elementborderwidth, highlightbackground,
     |      highlightcolor, highlightthickness, jump, orient,
     |      relief, repeatdelay, repeatinterval, takefocus,
     |      troughcolor, width.
     |  
     |  activate(self, index)
     |      Display the element at INDEX with activebackground and activerelief.
     |      INDEX can be "arrow1","slider" or "arrow2".
     |  
     |  delta(self, deltax, deltay)
     |      Return the fractional change of the scrollbar setting if it
     |      would be moved by DELTAX or DELTAY pixels.
     |  
     |  fraction(self, x, y)
     |      Return the fractional value which corresponds to a slider
     |      position of X,Y.
     |  
     |  get(self)
     |      Return the current fractional values (upper and lower end)
     |      of the slider position.
     |  
     |  identify(self, x, y)
     |      Return the element under position X,Y as one of
     |      "arrow1","slider","arrow2" or "".
     |  
     |  set(self, *args)
     |      Set the fractional values of the slider position (upper and
     |      lower ends as value between 0 and 1).
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Spinbox(Widget, XView)
     |  spinbox widget.
     |  
     |  Method resolution order:
     |      Spinbox
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a spinbox widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          activebackground, background, borderwidth,
     |          cursor, exportselection, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, insertbackground,
     |          insertborderwidth, insertofftime,
     |          insertontime, insertwidth, justify, relief,
     |          repeatdelay, repeatinterval,
     |          selectbackground, selectborderwidth
     |          selectforeground, takefocus, textvariable
     |          xscrollcommand.
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          buttonbackground, buttoncursor,
     |          buttondownrelief, buttonuprelief,
     |          command, disabledbackground,
     |          disabledforeground, format, from,
     |          invalidcommand, increment,
     |          readonlybackground, state, to,
     |          validate, validatecommand values,
     |          width, wrap,
     |  
     |  bbox(self, index)
     |      Return a tuple of X1,Y1,X2,Y2 coordinates for a
     |      rectangle which encloses the character given by index.
     |      
     |      The first two elements of the list give the x and y
     |      coordinates of the upper-left corner of the screen
     |      area covered by the character (in pixels relative
     |      to the widget) and the last two elements give the
     |      width and height of the character, in pixels. The
     |      bounding box may refer to a region outside the
     |      visible area of the window.
     |  
     |  delete(self, first, last=None)
     |      Delete one or more elements of the spinbox.
     |      
     |      First is the index of the first character to delete,
     |      and last is the index of the character just after
     |      the last one to delete. If last isn't specified it
     |      defaults to first+1, i.e. a single character is
     |      deleted.  This command returns an empty string.
     |  
     |  get(self)
     |      Returns the spinbox's string
     |  
     |  icursor(self, index)
     |      Alter the position of the insertion cursor.
     |      
     |      The insertion cursor will be displayed just before
     |      the character given by index. Returns an empty string
     |  
     |  identify(self, x, y)
     |      Returns the name of the widget at position x, y
     |      
     |      Return value is one of: none, buttondown, buttonup, entry
     |  
     |  index(self, index)
     |      Returns the numerical index corresponding to index
     |  
     |  insert(self, index, s)
     |      Insert string s at index
     |      
     |      Returns an empty string.
     |  
     |  invoke(self, element)
     |      Causes the specified element to be invoked
     |      
     |      The element could be buttondown or buttonup
     |      triggering the action associated with it.
     |  
     |  scan(self, *args)
     |      Internal function.
     |  
     |  scan_dragto(self, x)
     |      Compute the difference between the given x argument
     |      and the x argument to the last scan mark command
     |      
     |      It then adjusts the view left or right by 10 times the
     |      difference in x-coordinates. This command is typically
     |      associated with mouse motion events in the widget, to
     |      produce the effect of dragging the spinbox at high speed
     |      through the window. The return value is an empty string.
     |  
     |  scan_mark(self, x)
     |      Records x and the current view in the spinbox window;
     |      
     |      used in conjunction with later scan dragto commands.
     |      Typically this command is associated with a mouse button
     |      press in the widget. It returns an empty string.
     |  
     |  selection(self, *args)
     |      Internal function.
     |  
     |  selection_adjust(self, index)
     |      Locate the end of the selection nearest to the character
     |      given by index,
     |      
     |      Then adjust that end of the selection to be at index
     |      (i.e including but not going beyond index). The other
     |      end of the selection is made the anchor point for future
     |      select to commands. If the selection isn't currently in
     |      the spinbox, then a new selection is created to include
     |      the characters between index and the most recent selection
     |      anchor point, inclusive. Returns an empty string.
     |  
     |  selection_clear(self)
     |      Clear the selection
     |      
     |      If the selection isn't in this widget then the
     |      command has no effect. Returns an empty string.
     |  
     |  selection_element(self, element=None)
     |      Sets or gets the currently selected element.
     |      
     |      If a spinbutton element is specified, it will be
     |      displayed depressed
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  


    class StringVar(Variable)
     |  Value holder for strings variables.
     |  
     |  Method resolution order:
     |      StringVar
     |      Variable
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a string variable.
     |      
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to "")
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |      
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |  
     |  get(self)
     |      Return value of variable as string.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Variable:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Variable:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Variable:
     |  


    class Studbutton(Button)
     |  Method resolution order:
     |      Studbutton
     |      Button
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Button:
     |  
     |  flash(self)
     |      Flash the button.
     |      
     |      This is accomplished by redisplaying
     |      the button several times, alternating between active and
     |      normal colors. At the end of the flash the button is left
     |      in the same normal/active state as when the command was
     |      invoked. This command is ignored if the button's state is
     |      disabled.
     |  
     |  invoke(self)
     |      Invoke the command associated with the button.
     |      
     |      The return value is the return value from the command,
     |      or an empty string if there is no command associated with
     |      the button. This command is ignored if the button's state
     |      is disabled.
     |  
     |  tkButtonDown(self, *dummy)
     |  
     |  tkButtonEnter(self, *dummy)
     |  
     |  tkButtonInvoke(self, *dummy)
     |  
     |  tkButtonLeave(self, *dummy)
     |  
     |  tkButtonUp(self, *dummy)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Text(Widget, XView, YView)
     |  Text widget which can display text in various forms. Meerregelig,
     |  
     |  ecr: width, height in kars
     |  Let op: geen StringVar koppeling
     |	ingebouwde ctrl-keys:
     |
     |  Ctrl+X|C|V
     |  Ctrl+D = Del
     |  Ctrl+H = Backspace
     |  Ctrl+I = Tab
     |  Ctrl+K = wis re kant regel vanaf cursor
     |  Ctrl+O = insert \n achter cursor; cursor verplaatst niet
     |  Ctrl+T = verwissel 2 letters li en re v cursor; bij einde rg 2 lett li v cursor
     |
     |  Method resolution order:
     |      Text
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      XView
     |      YView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a text widget with the parent MASTER.
     |      
     |      STANDARD OPTIONS
     |      
     |          background, borderwidth, cursor,
     |          exportselection, font, foreground,
     |          highlightbackground, highlightcolor,
     |          highlightthickness, insertbackground,
     |          insertborderwidth, insertofftime,
     |          insertontime, insertwidth, padx, pady,
     |          relief, selectbackground,
     |          selectborderwidth, selectforeground,
     |          setgrid, takefocus,
     |          xscrollcommand, yscrollcommand,
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          autoseparators, height, maxundo,
     |          spacing1, spacing2, spacing3,
     |          state, tabs, undo, width, wrap,
     |
     |      ecr: wrap=CHAR (dflt),WORD,NONE
     |  
     |  bbox(self, index)
     |      Return a tuple of (x,y,width,height) which gives the bounding
     |      box of the visible part of the character at the given index.
     |  
     |  compare(self, index1, op, index2)
     |      Return whether between index INDEX1 and index INDEX2 the
     |      relation OP is satisfied. OP is one of <, <=, ==, >=, >, or !=.
     |  
     |  count(self, index1, index2, *args)
     |      Counts the number of relevant things between the two indices.
     |      If index1 is after index2, the result will be a negative number
     |      (and this holds for each of the possible options).
     |      
     |      The actual items which are counted depends on the options given by
     |      args. The result is a list of integers, one for the result of each
     |      counting option given. Valid counting options are "chars",
     |      "displaychars", "displayindices", "displaylines", "indices",
     |      "lines", "xpixels" and "ypixels". There is an additional possible
     |      option "update", which if given then all subsequent options ensure
     |      that any possible out of date information is recalculated.
     |  
     |  debug(self, boolean=None)
     |      Turn on the internal consistency checks of the B-Tree inside the text
     |      widget according to BOOLEAN.
     |  
     |  delete(self, index1, index2=None)
     |      Delete the characters between INDEX1 and INDEX2 (not included).
     |  
     |  dlineinfo(self, index)
     |      Return tuple (x,y,width,height,baseline) giving the bounding box
     |      and baseline position of the visible part of the line containing
     |      the character at INDEX.
     |  
     |  dump(self, index1, index2=None, command=None, **kw)
     |      Return the contents of the widget between index1 and index2.
     |      
     |      The type of contents returned is filtered based on the keyword
     |      parameters; if 'all', 'image', 'mark', 'tag', 'text', or 'window' are
     |      given and true, then the corresponding items are returned. The result
     |      is a list of triples of the form (key, value, index). If none of the
     |      keywords are true then 'all' is used by default.
     |      
     |      If the 'command' argument is given, it is called once for each element
     |      of the list of triples, with the values of each triple serving as the
     |      arguments to the function. In this case the list is not returned.
     |  
     |  edit(self, *args)
     |      Internal method
     |      
     |      This method controls the undo mechanism and
     |      the modified flag. The exact behavior of the
     |      command depends on the option argument that
     |      follows the edit argument. The following forms
     |      of the command are currently supported:
     |      
     |      edit_modified, edit_redo, edit_reset, edit_separator
     |      and edit_undo
     |  
     |  edit_modified(self, arg=None)
     |      Get or Set the modified flag; ecr: ret 1|0, set True|False
     |      
     |      If arg is not specified, returns the modified
     |      flag of the widget. The insert, delete, edit undo and
     |      edit redo commands or the user can set or clear the
     |      modified flag. If boolean is specified, sets the
     |      modified flag of the widget to arg.
     |  
     |  edit_redo(self)
     |      Redo the last undone edit
     |      
     |      When the undo option is true, reapplies the last
     |      undone edits provided no other edits were done since
     |      then. Generates an error when the redo stack is empty.
     |      Does nothing when the undo option is false.
     |  
     |  edit_reset(self)
     |      Clears the undo and redo stacks
     |  
     |  edit_separator(self)
     |      Inserts a separator (boundary) on the undo stack.
     |      
     |      Does nothing when the undo option is false
     |  
     |  edit_undo(self)
     |      Undoes the last edit action
     |      
     |      If the undo option is true. An edit action is defined
     |      as all the insert and delete commands that are recorded
     |      on the undo stack in between two separators. Generates
     |      an error when the undo stack is empty. Does nothing
     |      when the undo option is false
     |  
     |  get(self, index1, index2=None)
     |      Return the text from INDEX1 to INDEX2 (not included).
     |  
     |  image_cget(self, index, option)
     |      Return the value of OPTION of an embedded image at INDEX.
     |  
     |  image_configure(self, index, cnf=None, **kw)
     |      Configure an embedded image at INDEX.
     |  
     |  image_create(self, index, cnf={}, **kw)
     |      Create an embedded image at INDEX.
     |  
     |  image_names(self)
     |      Return all names of embedded images in this widget.
     |  
     |  index(self, index)
     |      Return the index in the form 'line.char' for INDEX.
     |      ecr: bv tbox.index(INSERT|END) ->'3.4' = rg 3 (vanaf 1), char 4 (vanaf 0)
     |  
     |  insert(self, index, chars, *args)
     |      Insert CHARS before the characters at INDEX. An additional
     |      tag can be given in ARGS. Additional CHARS and tags can follow in ARGS.
     |  
     |  mark_gravity(self, markName, direction=None)
     |      Change the gravity of a mark MARKNAME to DIRECTION (LEFT or RIGHT).
     |      Return the current value if None is given for DIRECTION.
     |  
     |  mark_names(self)
     |      Return all mark names.
     |  
     |  mark_next(self, index)
     |      Return the name of the next mark after INDEX.
     |  
     |  mark_previous(self, index)
     |      Return the name of the previous mark before INDEX.
     |  
     |  mark_set(self, markName, index)
     |      Set mark MARKNAME before the character at INDEX.
     |      ecr: voorgedef: INSERT
     |  
     |  mark_unset(self, *markNames)
     |      Delete all marks in MARKNAMES.
     |  
     |  peer_create(self, newPathName, cnf={}, **kw)
     |      Creates a peer text widget with the given newPathName, and any
     |      optional standard configuration options. By default the peer will
     |      have the same start and end line as the parent widget, but
     |      these can be overriden with the standard configuration options.
     |  
     |  peer_names(self)
     |      Returns a list of peers of this widget (this does not include
     |      the widget itself).
     |  
     |  replace(self, index1, index2, chars, *args)
     |      Replaces the range of characters between index1 and index2 with
     |      the given characters and tags specified by args.
     |      
     |      See the method insert for some more information about args, and the
     |      method delete for information about the indices.
     |  
     |  scan_dragto(self, x, y)
     |      Adjust the view of the text to 10 times the
     |      difference between X and Y and the coordinates given in
     |      scan_mark.
     |  
     |  scan_mark(self, x, y)
     |      Remember the current X, Y coordinates.
     |  
     |  search(self, pattern, index, stopindex=None, forwards=None, backwards=None, exact=None, regexp=None, nocase=None, count=None, elide=None)
     |      Search PATTERN beginning from INDEX until STOPINDEX.
     |      Return the index of the first character of a match or an
     |      empty string.
     |  
     |  see(self, index)
     |      Scroll such that the character at INDEX is visible.
     |      ecr: txt.see(END) ->toon laatste regel
     |  
     |  tag_add(self, tagName, index1, *args)
     |      Add tag TAGNAME to all characters between INDEX1 and index2 in ARGS.
     |      Additional pairs of indices may follow in ARGS.
     |  
     |  tag_bind(self, tagName, sequence, func, add=None)
     |      Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC.
     |      
     |      An additional boolean parameter ADD specifies whether FUNC will be
     |      called additionally to the other bound function or whether it will
     |      replace the previous function. See bind for the return value.
     |  
     |  tag_cget(self, tagName, option)
     |      Return the value of OPTION for tag TAGNAME.
     |  
     |  tag_config = tag_configure(self, tagName, cnf=None, **kw)
     |  
     |  tag_configure(self, tagName, cnf=None, **kw)
     |      Configure a tag TAGNAME. Niet bij Canvas.
     |		ecr: bv txt.tag_config('answer', foreground='white')
     |  
     |  tag_delete(self, *tagNames)
     |      Delete all tags in TAGNAMES.
     |  
     |  tag_lower(self, tagName, belowThis=None)
     |      Change the priority of tag TAGNAME such that it is lower
     |      than the priority of BELOWTHIS.
     |  
     |  tag_names(self, index=None)
     |      Return a list of all tag names. Niet bij Canvas.
     |  
     |  tag_nextrange(self, tagName, index1, index2=None)
     |      Return a list of start and end index for the first sequence of
     |      characters between INDEX1 and INDEX2 which all have tag TAGNAME.
     |      The text is searched forward from INDEX1.
     |  
     |  tag_prevrange(self, tagName, index1, index2=None)
     |      Return a list of start and end index for the first sequence of
     |      characters between INDEX1 and INDEX2 which all have tag TAGNAME.
     |      The text is searched backwards from INDEX1.
     |  
     |  tag_raise(self, tagName, aboveThis=None)
     |      Change the priority of tag TAGNAME such that it is higher
     |      than the priority of ABOVETHIS.
     |  
     |  tag_ranges(self, tagName)
     |      Return a list of ranges of text which have tag TAGNAME.
     |  
     |  tag_remove(self, tagName, index1, index2=None)
     |      Remove tag TAGNAME from all characters between INDEX1 and INDEX2.
     |  
     |  tag_unbind(self, tagName, sequence, funcid=None)
     |      Unbind for all characters with TAGNAME for event SEQUENCE  the
     |      function identified with FUNCID.
     |  
     |  tk_textBackspace(self)
     |  
     |  tk_textIndexCloser(self, a, b, c)
     |  
     |  tk_textResetAnchor(self, index)
     |  
     |  tk_textSelectTo(self, index)
     |  
     |  window_cget(self, index, option)
     |      Return the value of OPTION of an embedded window at INDEX.
     |  
     |  window_config = window_configure(self, index, cnf=None, **kw)
     |  
     |  window_configure(self, index, cnf=None, **kw)
     |      Configure an embedded window at INDEX.
     |  
     |  window_create(self, index, cnf={}, **kw)
     |      Create a window at INDEX.
     |  
     |  window_names(self)
     |      Return all names of embedded windows in this widget.
     |  
     |  yview_pickplace(self, *what)
     |      Obsolete function, use see.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from XView:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from YView:
     |  


    class Tk(Misc, Wm)
     |  Toplevel widget of Tk which represents mostly the main window
     |  of an application. It has an associated Tcl interpreter.
     |  
     |  Method resolution order:
     |      Tk
     |      Misc
     |      Wm
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getattr__(self, attr)
     |      Delegate attribute access to the interpreter object
     |  
     |  __init__(self, screenName=None, baseName=None, className='Tk', useTk=1, sync=0, use=None)
     |      Return a new Toplevel widget on screen SCREENNAME. A new Tcl interpreter will
     |      be created. BASENAME will be used for the identification of the profile file (see
     |      readprofile). Constructed from sys.argv[0] without extensions if None is given.
     |      CLASSNAME is the name of the widget class ->wordt ook wnd titel; vgl: root.title('...')
     |
     |      ecr: Valid resource names: background, bd, bg, borderwidth, class, colormap,
     |      container, cursor, height, highlightbackground, highlightcolor, highlightthickness,
     |      padx, pady, relief, takefocus, use, visual, width. 
     |
     |  destroy(self)
     |      Destroy this and all descendants widgets. This will
     |      end the application of this Tcl interpreter.
     |  
     |  loadtk(self)
     |  
     |  readprofile(self, baseName, className)
     |      Internal function. It reads BASENAME.tcl and CLASSNAME.tcl into
     |      the Tcl Interpreter and calls exec on the contents of BASENAME.py and
     |      CLASSNAME.py if such a file exists in the home directory.
     |  
     |  report_callback_exception(self, exc, val, tb)
     |      Report callback exception on sys.stderr.
     |      
     |      Applications may want to override this internal function, and
     |      should when sys.stderr is None.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Wm:
     |  


    class Toplevel(BaseWidget, Wm)
     |  Toplevel widget, e.g. for dialogs.
     |  
     |  Method resolution order:
     |      Toplevel
     |      BaseWidget
     |      Misc
     |      Wm
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |      Construct a toplevel widget with the parent MASTER.
     |      
     |      Valid resource names: background, bd, bg, borderwidth, class,
     |      colormap, container, cursor, height, highlightbackground,
     |      highlightcolor, highlightthickness, menu, relief, screen, takefocus,
     |      use, visual, width.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Wm:
     |  


    class Tributton(Button)
     |  Method resolution order:
     |      Tributton
     |      Button
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Button:
     |  
     |  flash(self)
     |      Flash the button.
     |      
     |      This is accomplished by redisplaying
     |      the button several times, alternating between active and
     |      normal colors. At the end of the flash the button is left
     |      in the same normal/active state as when the command was
     |      invoked. This command is ignored if the button's state is
     |      disabled.
     |  
     |  invoke(self)
     |      Invoke the command associated with the button.
     |      
     |      The return value is the return value from the command,
     |      or an empty string if there is no command associated with
     |      the button. This command is ignored if the button's state
     |      is disabled.
     |  
     |  tkButtonDown(self, *dummy)
     |  
     |  tkButtonEnter(self, *dummy)
     |  
     |  tkButtonInvoke(self, *dummy)
     |  
     |  tkButtonLeave(self, *dummy)
     |  
     |  tkButtonUp(self, *dummy)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:


    class Variable(builtins.object)
     |  Class to define value holders for e.g. buttons.
     |  
     |  Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations
     |  that constrain the type of the value returned from get().
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |      Unset the variable in Tcl.
     |  
     |  __eq__(self, other)
     |      Comparison for equality (==).
     |      
     |      Note: if the Variable's master matters to behavior
     |      also compare self._master == other._master
     |  
     |  __init__(self, master=None, value=None, name=None)
     |      Construct a variable
     |      
     |      MASTER can be given as master widget.
     |      VALUE is an optional value (defaults to "")
     |      NAME is an optional Tcl name (defaults to PY_VARnum).
     |      
     |      If NAME matches an existing variable and VALUE is omitted
     |      then the existing value is retained.
     |  
     |  __str__(self)
     |      Return the name of the variable in Tcl.
     |  
     |  get(self)
     |      Return value of variable.
     |  
     |  initialize = set(self, value)
     |  
     |  set(self, value)
     |      Set the variable to VALUE.
     |  
     |  trace = trace_variable(self, mode, callback)
     |  
     |  trace_variable(self, mode, callback)
     |      Define a trace callback for the variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CALLBACK must be a function which is called when
     |      the variable is read, written or undefined.
     |      
     |      Return the name of the callback.
     |  
     |  trace_vdelete(self, mode, cbname)
     |      Delete the trace callback for a variable.
     |      
     |      MODE is one of "r", "w", "u" for read, write, undefine.
     |      CBNAME is the name of the callback returned from trace_variable or trace.
     |  
     |  trace_vinfo(self)
     |      Return all trace callback information.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
     |


    class Widget(BaseWidget, Pack, Place, Grid)
     |  Internal class.
     |  
     |  Base class for a widget which can be positioned with the geometry managers
     |  Pack, Place or Grid.
     |  
     |  Method resolution order:
     |      Widget
     |      BaseWidget
     |      Misc
     |      Pack
     |      Place
     |      Grid
     |      builtins.object
     |  
     |  Methods inherited from BaseWidget:
     |  
     |  __init__(self, master, widgetName, cnf={}, kw={}, extra=())
     |      Construct a widget with the parent widget MASTER, a name WIDGETNAME
     |      and appropriate options.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Grid:
     |


    class Wm(builtins.object)
     |  Provides functions for the communication with the window manager.
     |  
     |  Methods defined here:
     |  
     |  aspect = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |  
     |  attributes = wm_attributes(self, *args)
     |  
     |  client = wm_client(self, name=None)
     |  
     |  colormapwindows = wm_colormapwindows(self, *wlist)
     |  
     |  command = wm_command(self, value=None)
     |  
     |  deiconify = wm_deiconify(self)
     |  
     |  focusmodel = wm_focusmodel(self, model=None)
     |  
     |  forget = wm_forget(self, window)
     |  
     |  frame = wm_frame(self)
     |  
     |  geometry = wm_geometry(self, newGeometry=None)
     |  
     |  grid = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |  
     |  group = wm_group(self, pathName=None)
     |  
     |  iconbitmap = wm_iconbitmap(self, bitmap=None, default=None)
     |  
     |  iconify = wm_iconify(self)
     |  
     |  iconmask = wm_iconmask(self, bitmap=None)
     |  
     |  iconname = wm_iconname(self, newName=None)
     |  
     |  iconphoto = wm_iconphoto(self, default=False, *args)
     |  
     |  iconposition = wm_iconposition(self, x=None, y=None)
     |  
     |  iconwindow = wm_iconwindow(self, pathName=None)
     |  
     |  manage = wm_manage(self, widget)
     |  
     |  maxsize = wm_maxsize(self, width=None, height=None)
     |  
     |  minsize = wm_minsize(self, width=None, height=None)
     |  
     |  overrideredirect = wm_overrideredirect(self, boolean=None)
     |  
     |  positionfrom = wm_positionfrom(self, who=None)
     |  
     |  protocol = wm_protocol(self, name=None, func=None)
     |  
     |  resizable = wm_resizable(self, width=None, height=None)
     |  
     |  sizefrom = wm_sizefrom(self, who=None)
     |  
     |  state = wm_state(self, newstate=None)
     |  
     |  title = wm_title(self, string=None)
     |  
     |  transient = wm_transient(self, master=None)
     |  
     |  withdraw = wm_withdraw(self)
     |  
     |  wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)
     |      Instruct the window manager to set the aspect ratio (width/height)
     |      of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple
     |      of the actual values if no argument is given.
     |  
     |  wm_attributes(self, *args)
     |      This subcommand returns or sets platform specific attributes
     |      
     |      The first form returns a list of the platform specific flags and
     |      their values. The second form returns the value for the specific
     |      option. The third form sets one or more of the values. The values
     |      are as follows:
     |      
     |      On Windows, -disabled gets or sets whether the window is in a
     |      disabled state. -toolwindow gets or sets the style of the window
     |      to toolwindow (as defined in the MSDN). -topmost gets or sets
     |      whether this is a topmost window (displays above all other
     |      windows).
     |
     |      ecr: staat los van root.overrideredirect(True)
     |      root.attributes('-alpha',0.5) [1.0=opaque]; ('-disabled', True)
     |      ('-toolwindow',True); ('-topmost', True); ('-transparentcolor','black')
     |      ('-fullscreen',True) [metro-look, geen titel/randen, geen startmenu]
     |      
     |      On Macintosh, XXXXX
     |      
     |      On Unix, there are currently no special attribute values.
     |  
     |  wm_client(self, name=None)
     |      Store NAME in WM_CLIENT_MACHINE property of this widget. Return
     |      current value.
     |  
     |  wm_colormapwindows(self, *wlist)
     |      Store list of window names (WLIST) into WM_COLORMAPWINDOWS property
     |      of this widget. This list contains windows whose colormaps differ from their
     |      parents. Return current list of widgets if WLIST is empty.
     |  
     |  wm_command(self, value=None)
     |      Store VALUE in WM_COMMAND property. It is the command
     |      which shall be used to invoke the application. Return current
     |      command if VALUE is None.
     |  
     |  wm_deiconify(self)
     |      Deiconify this widget. If it was never mapped it will not be mapped.
     |      On Windows it will raise this widget and give it the focus.
     |  
     |  wm_focusmodel(self, model=None)
     |      Set focus model to MODEL. "active" means that this widget will claim
     |      the focus itself, "passive" means that the window manager shall give
     |      the focus. Return current focus model if MODEL is None.
     |  
     |  wm_forget(self, window)
     |      The window will be unmappend from the screen and will no longer
     |      be managed by wm. toplevel windows will be treated like frame
     |      windows once they are no longer managed by wm, however, the menu
     |      option configuration will be remembered and the menus will return
     |      once the widget is managed again.
     |  
     |  wm_frame(self)
     |      Return identifier for decorative frame of this widget if present.
     |  
     |  wm_geometry(self, newGeometry=None)
     |      Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return
     |      current value if None is given.
     |  
     |  wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)
     |      Instruct the window manager that this widget shall only be
     |      resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and
     |      height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the
     |      number of grid units requested in Tk_GeometryRequest.
     |  
     |  wm_group(self, pathName=None)
     |      Set the group leader widgets for related widgets to PATHNAME. Return
     |      the group leader of this widget if None is given.
     |  
     |  wm_iconbitmap(self, bitmap=None, default=None)
     |      Set bitmap for the iconified widget to BITMAP. Return
     |      the bitmap if None is given.
     |      
     |      Under Windows, the DEFAULT parameter can be used to set the icon
     |      for the widget and any descendents that don't have an icon set
     |      explicitly.  DEFAULT can be the relative path to a .ico file
     |      (example: root.iconbitmap(default='myicon.ico') ).  See Tk
     |      documentation for more information.
     |  
     |  wm_iconify(self)
     |      Display widget as icon.
     |  
     |  wm_iconmask(self, bitmap=None)
     |      Set mask for the icon bitmap of this widget. Return the
     |      mask if None is given.
     |  
     |  wm_iconname(self, newName=None)
     |      Set the name of the icon for this widget, dwz bij minimize. Niet in Windows.
     |      Return the name if None is given.
     |  
     |  wm_iconphoto(self, default=False, *args)
     |      Sets the titlebar icon for this window based on the named photo
     |      images passed through args. If default is True, this is applied to
     |      all future created toplevels as well.
     |      
     |      The data in the images is taken as a snapshot at the time of
     |      invocation. If the images are later changed, this is not reflected
     |      to the titlebar icons. Multiple images are accepted to allow
     |      different images sizes to be provided. The window manager may scale
     |      provided icons to an appropriate size.
     |      
     |      On Windows, the images are packed into a Windows icon structure.
     |      This will override an icon specified to wm_iconbitmap, and vice
     |      versa.
     |      
     |      On X, the images are arranged into the _NET_WM_ICON X property,
     |      which most modern window managers support. An icon specified by
     |      wm_iconbitmap may exist simultaneously.
     |      
     |      On Macintosh, this currently does nothing.
     |  
     |  wm_iconposition(self, x=None, y=None)
     |      Set the position of the icon of this widget to X and Y. Return
     |      a tuple of the current values of X and X if None is given.
     |  
     |  wm_iconwindow(self, pathName=None)
     |      Set widget PATHNAME to be displayed instead of icon. Return the current
     |      value if None is given.
     |  
     |  wm_manage(self, widget)
     |      The widget specified will become a stand alone top-level window.
     |      The window will be decorated with the window managers title bar,
     |      etc.
     |  
     |  wm_maxsize(self, width=None, height=None)
     |      Set max WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  wm_minsize(self, width=None, height=None)
     |      Set min WIDTH and HEIGHT for this widget. If the window is gridded
     |      the values are given in grid units. Return the current values if None
     |      is given.
     |  
     |  wm_overrideredirect(self, boolean=None)
     |      Instruct the window manager to ignore this widget if BOOLEAN is given with 1.
     |      Return the current value if None is given. Wartaal.
     |      ecr: alleen client area over; titelbalk, titelknoppen en randen weg; Alt+F4 werkt wel.
     |  
     |  wm_positionfrom(self, who=None)
     |      Instruct the window manager that the position of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  wm_protocol(self, name=None, func=None)
     |      Bind function FUNC to command NAME for this widget.
     |      Return the function bound to NAME if None is given. NAME could be
     |      "WM_SAVE_YOURSELF" (win: niet gedef) or "WM_DELETE_WINDOW" (wel).
     |      ecr: is window_closing event ->annuleren door niet root.destroy()
     |      jouw eigen fn komt in de plaats vd org handler.
     |      vlg effbot.org ook: WM_TAKE_FOCUS (alleen goed in X Windows).
     |  
     |  wm_resizable(self, width=None, height=None)
     |      Instruct the window manager whether this width can be resized
     |      in WIDTH or HEIGHT. Both values are boolean values.
     |  
     |  wm_sizefrom(self, who=None)
     |      Instruct the window manager that the size of this widget shall
     |      be defined by the user if WHO is "user", and by its own policy if WHO is
     |      "program".
     |  
     |  wm_state(self, newstate=None)
     |      Query or set the state of this widget as one of normal, icon,
     |      iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).
     |  
     |  wm_title(self, string=None)
     |      Set the title of this widget. ecr: met None ->retval title
     |  
     |  wm_transient(self, master=None)
     |      Instruct the window manager that this widget is transient
     |      with regard to widget MASTER.
     |  
     |  wm_withdraw(self)
     |      Withdraw this widget from the screen such that it is unmapped
     |      and forgotten by the window manager. Re-draw it with wm_deiconify.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class XView(builtins.object)
     |  Mix-in class for querying and changing the horizontal position
     |  of a widget's window.
     |  
     |  Methods defined here:
     |  
     |  xview(self, *args)
     |      Query and change the horizontal position of the view.
     |  
     |  xview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total width of the canvas is off-screen to the left.
     |  
     |  xview_scroll(self, number, what)
     |      Shift the x-view according to NUMBER which is measured in "units"
     |      or "pages" (WHAT).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class YView(builtins.object)
     |  Mix-in class for querying and changing the vertical position
     |  of a widget's window.
     |  
     |  Methods defined here:
     |  
     |  yview(self, *args)
     |      Query and change the vertical position of the view.
     |  
     |  yview_moveto(self, fraction)
     |      Adjusts the view in the window so that FRACTION of the
     |      total height of the canvas is off-screen to the top.
     |  
     |  yview_scroll(self, number, what)
     |      Shift the y-view according to NUMBER which is measured in
     |      "units" or "pages" (WHAT).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


FUNCTIONS
    NoDefaultRoot()
        Inhibit setting of default root window.
        
        Call this function to inhibit that the first instance of
        Tk is used for windows without an explicit parent window.
    
    Tcl(screenName=None, baseName=None, className='Tk', useTk=0)
    
    getboolean(s)
        Convert true and false to integer values 1 and 0.
    
    image_names()
    
    image_types()
    
    mainloop(n=0)
        Run the main loop of Tcl.


ecr: vlg constanten komen uit constants.py

DATA
    ACTIVE = 'active'
    ALL = 'all'
    ANCHOR = 'anchor'
    ARC = 'arc'
    BASELINE = 'baseline'
    BEVEL = 'bevel'
    BOTH = 'both'
    BOTTOM = 'bottom'
    BROWSE = 'browse'
    BUTT = 'butt'
    CASCADE = 'cascade'
    CENTER = 'center'
    CHAR = 'char'
    CHECKBUTTON = 'checkbutton'
    CHORD = 'chord'
    COMMAND = 'command'
    CURRENT = 'current'
    DISABLED = 'disabled'
    DOTBOX = 'dotbox'
    E = 'e'
    END = 'end'
    EW = 'ew'
    EXCEPTION = 8
    EXTENDED = 'extended'
    FALSE = 0
    FIRST = 'first'
    FLAT = 'flat'
    GROOVE = 'groove'
    HIDDEN = 'hidden'
    HORIZONTAL = 'horizontal'
    INSERT = 'insert'
    INSIDE = 'inside'
    LAST = 'last'
    LEFT = 'left'
    MITER = 'miter'
    MOVETO = 'moveto'
    MULTIPLE = 'multiple'
    N = 'n'
    NE = 'ne'
    NO = 0
    NONE = 'none'
    NORMAL = 'normal'
    NS = 'ns'
    NSEW = 'nsew'
    NUMERIC = 'numeric'
    NW = 'nw'
    OFF = 0
    ON = 1
    OUTSIDE = 'outside'
    PAGES = 'pages'
    PIESLICE = 'pieslice'
    PROJECTING = 'projecting'
    RADIOBUTTON = 'radiobutton'
    RAISED = 'raised'
    READABLE = 2
    RIDGE = 'ridge'
    RIGHT = 'right'
    ROUND = 'round'
    S = 's'
    SCROLL = 'scroll'
    SE = 'se'
    SEL = 'sel'
    SEL_FIRST = 'sel.first'
    SEL_LAST = 'sel.last'
    SEPARATOR = 'separator'
    SINGLE = 'single'
    SOLID = 'solid'
    SUNKEN = 'sunken'
    SW = 'sw'
    TOP = 'top'
    TRUE = 1
    TclVersion = 8.6
    TkVersion = 8.6
    UNDERLINE = 'underline'
    UNITS = 'units'
    VERTICAL = 'vertical'
    W = 'w'
    WORD = 'word'
    WRITABLE = 4
    X = 'x'
    Y = 'y'
    YES = 1
    wantobjects = 1

FILE
    c:\python34\lib\tkinter\__init__.py

===================

qqq

>>> help(font)
Help on module tkinter.font in tkinter:

NAME
    tkinter.font

DESCRIPTION
    # Tkinter font wrapper
    #
    # written by Fredrik Lundh, February 1998
    #

CLASSES
    builtins.object
        Font
    
    class Font(builtins.object)
     |  Represents a named font.
     |  
     |  Constructor options are:
     |  
     |  font -- font specifier (name, system font, or (family, size, style)-tuple)
     |  name -- name to use for this font configuration (defaults to a unique name)
     |  exists -- does a named font by this name already exist?
     |     Creates a new named font if False, points to the existing font if True.
     |     Raises _tkinter.TclError if the assertion is false.
     |  
     |     the following are ignored if font is specified:
     |  
     |  family -- font 'family', e.g. Courier, Times, Helvetica
     |  size -- font size in points
     |  weight -- font thickness: NORMAL, BOLD
     |  slant -- font slant: ROMAN, ITALIC
     |  underline -- font underlining: false (0), true (1)
     |  overstrike -- font strikeout: false (0), true (1)
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __eq__(self, other)
     |  
     |  __getitem__(self, key)
     |  
     |  __init__(self, root=None, font=None, name=None, exists=False, **options)
     |  
     |  __setitem__(self, key, value)
     |  
     |  __str__(self)
     |  
     |  actual(self, option=None, displayof=None)
     |      Return actual font attributes
     |  
     |  cget(self, option)
     |      Get font attribute
     |  
     |  config(self, **options)
     |      Modify font attributes
     |  
     |  configure = config(self, **options)
     |  
     |  copy(self)
     |      Return a distinct copy of the current font
     |  
     |  measure(self, text, displayof=None)
     |      Return text width
     |  
     |  metrics(self, *options, **kw)
     |      Return font metrics.
     |      
     |      For best performance, create a dummy widget
     |      using this font before calling this method.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
     |  
     |  counter = count(1)

FUNCTIONS
    families(root=None, displayof=None)
        Get font families (as a tuple)
ecr:
('System', 'Terminal', 'Fixedsys', 'Modern', 'Roman', 'Script', 'Courier', 'MS Serif', 'MS Sans Serif', 'Small Fonts', 'Marlett', 'Arial', 'Arabic Transparent', 'Arial Baltic', 'Arial CE', 'Arial CYR', 'Arial Greek', 'Arial TUR', 'Batang', '@Batang', 'BatangChe', '@BatangChe', 'Gungsuh', '@Gungsuh', 'GungsuhChe', '@GungsuhChe', 'Courier New', 'Courier New Baltic', 'Courier New CE', 'Courier New CYR', 'Courier New Greek', 'Courier New TUR', 'DaunPenh', 'DokChampa', 'Estrangelo Edessa', 'Euphemia', 'Gautami', 'Vani', 'Gulim', '@Gulim', 'GulimChe', '@GulimChe', 'Dotum', '@Dotum', 'DotumChe', '@DotumChe', 'Impact', 'Iskoola Pota', 'Kalinga', 'Kartika', 'Khmer UI', 'Lao UI', 'Latha', 'Lucida Console', 'Malgun Gothic', '@Malgun Gothic', 'Mangal', 'Meiryo', '@Meiryo', 'Meiryo UI', '@Meiryo UI', 'Microsoft Himalaya', 'Microsoft JhengHei', '@Microsoft JhengHei', 'Microsoft YaHei', '@Microsoft YaHei', 'MingLiU', '@MingLiU', 'PMingLiU', '@PMingLiU', 'MingLiU_HKSCS', '@MingLiU_HKSCS', 'MingLiU-ExtB', '@MingLiU-ExtB', 'PMingLiU-ExtB', '@PMingLiU-ExtB', 'MingLiU_HKSCS-ExtB', '@MingLiU_HKSCS-ExtB', 'Mongolian Baiti', 'MS Gothic', '@MS Gothic', 'MS PGothic', '@MS PGothic', 'MS UI Gothic', '@MS UI Gothic', 'MS Mincho', '@MS Mincho', 'MS PMincho', '@MS PMincho', 'MV Boli', 'Microsoft New Tai Lue', 'Nyala', 'Microsoft PhagsPa', 'Plantagenet Cherokee', 'Raavi', 'Segoe Script', 'Segoe UI', 'Segoe UI Semibold', 'Segoe UI Light', 'Segoe UI Symbol', 'Shruti', 'SimSun', '@SimSun', 'NSimSun', '@NSimSun', 'SimSun-ExtB', '@SimSun-ExtB', 'Sylfaen', 'Microsoft Tai Le', 'Times New Roman', 'Times New Roman Baltic', 'Times New Roman CE', 'Times New Roman CYR', 'Times New Roman Greek', 'Times New Roman TUR', 'Tunga', 'Vrinda', 'Shonar Bangla', 'Microsoft Yi Baiti', 'Tahoma', 'Microsoft Sans Serif', 'Angsana New', 'Aparajita', 'Cordia New', 'Ebrima', 'Gisha', 'Kokila', 'Leelawadee', 'Microsoft Uighur', 'MoolBoran', 'Symbol', 'Utsaah', 'Vijaya', 'Wingdings', 'Andalus', 'Arabic Typesetting', 'Simplified Arabic', 'Simplified Arabic Fixed', 'Sakkal Majalla', 'Traditional Arabic', 'Aharoni', 'David', 'FrankRuehl', 'Levenim MT', 'Miriam', 'Miriam Fixed', 'Narkisim', 'Rod', 'FangSong', '@FangSong', 'SimHei', '@SimHei', 'KaiTi', '@KaiTi', 'AngsanaUPC', 'Browallia New', 'BrowalliaUPC', 'CordiaUPC', 'DilleniaUPC', 'EucrosiaUPC', 'FreesiaUPC', 'IrisUPC', 'JasmineUPC', 'KodchiangUPC', 'LilyUPC', 'DFKai-SB', '@DFKai-SB', 'Lucida Sans Unicode', 'Arial Black', 'Calibri', 'Cambria', 'Cambria Math', 'Candara', 'Comic Sans MS', 'Consolas', 'Constantia', 'Corbel', 'Franklin Gothic Medium', 'Gabriola', 'Georgia', 'Palatino Linotype', 'Segoe Print', 'Trebuchet MS', 'Verdana', 'Webdings', 'Lucida Sans')

    names(root=None)
        Get names of defined fonts (as a tuple)
ecr:
('fixed', 'oemfixed', 'TkDefaultFont', 'TkMenuFont', 'ansifixed', 'systemfixed', 'TkHeadingFont', 'device', 'TkTooltipFont', 'defaultgui', 'TkTextFont', 'ansi', 'TkCaptionFont', 'system', 'TkSmallCaptionFont', 'TkFixedFont', 'TkIconFont')

ecr: deze fntclass namen hfdlett gevoeling; normale fontnamen hfdlett ongevoelig
font.nametofont('TkDefaultFont').actual():
{'family': 'Tahoma', 'slant': 'roman', 'underline': 0, 'overstrike': 0, 'weight': 'normal', 'size': 8}
Tk[Small]CaptionFont: bold
TkFixedFont:
{'overstrike': 0, 'weight': 'normal', 'slant': 'roman', 'size': 9, 'underline': 0, 'family': 'Courier New'}

    
    nametofont(name)
        Given the name of a tk named font, returns a Font representation.

DATA
    BOLD = 'bold'
    ITALIC = 'italic'
    NORMAL = 'normal'
    ROMAN = 'roman'

VERSION
    0.9

FILE
    c:\python34\lib\tkinter\font.py

=================

>>> help(dialog)
Help on module tkinter.dialog in tkinter:

NAME
    tkinter.dialog - # dialog.py -- Tkinter interface to the tk_dialog script.

CLASSES
    tkinter.Widget(tkinter.BaseWidget, tkinter.Pack, tkinter.Place, tkinter.Grid)
        Dialog
    
    class Dialog(tkinter.Widget)
     |  Method resolution order:
     |      Dialog
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, cnf={}, **kw)
     |  
     |  destroy(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tkinter.Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  

DATA
nieuw:
    DIALOG_ICON = 'questhead'


FILE
    c:\python34\lib\tkinter\dialog.py

=================

>>> help(commondialog)
Help on module tkinter.commondialog in tkinter:

NAME
    tkinter.commondialog

DESCRIPTION
    # base class for tk common dialogues
    #
    # this module provides a base class for accessing the common
    # dialogues available in Tk 4.2 and newer.  use filedialog,
    # colorchooser, and messagebox to access the individual
    # dialogs.
    #
    # written by Fredrik Lundh, May 1997
    #

CLASSES
    builtins.object
        Dialog

    ecr: let op, dit is een ANDERE class Dialog dan in dialog.py
    
    class Dialog(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **options)
     |  
     |  show(self, **options)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  command = None

DATA
zie: constants.py
(ook in tkinter zelf)

FILE
    c:\python34\lib\tkinter\commondialog.py

=================

>>> help(messagebox)
Help on module tkinter.messagebox in tkinter:

NAME
    tkinter.messagebox

DESCRIPTION
    # tk common message boxes
    #
    # this module provides an interface to the native message boxes
    # available in Tk 4.2 and newer.
    #
    # written by Fredrik Lundh, May 1997
    #

CLASSES
    tkinter.commondialog.Dialog(builtins.object)
        Message
    
    class Message(tkinter.commondialog.Dialog)
     |  A message box
     |  
     |  Method resolution order:
     |      Message
     |      tkinter.commondialog.Dialog
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  command = 'tk_messageBox'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.commondialog.Dialog:
     |  
     |  __init__(self, master=None, **options)
     |  
     |  show(self, **options)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.commondialog.Dialog:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    askokcancel(title=None, message=None, **options)
        Ask if operation should proceed; return true if the answer is ok
    
    askquestion(title=None, message=None, **options)
        Ask a question ->'yes'|'no'
    
    askretrycancel(title=None, message=None, **options)
        Ask if operation should be retried; return true if the answer is yes
    
    askyesno(title=None, message=None, **options)
        Ask a question; return true if the answer is yes
    
    askyesnocancel(title=None, message=None, **options)
        Ask a question; return true if the answer is yes, None if cancelled.
    
    showerror(title=None, message=None, **options)
        Show an error message
    
    showinfo(title=None, message=None, **options)
        Show an info message
    
    showwarning(title=None, message=None, **options)
        Show a warning message

DATA
    ABORT = 'abort'
    ABORTRETRYIGNORE = 'abortretryignore'
    CANCEL = 'cancel'
    ERROR = 'error'
    IGNORE = 'ignore'
    INFO = 'info'
    NO = 'no'
    OK = 'ok'
    OKCANCEL = 'okcancel'
    QUESTION = 'question'
    RETRY = 'retry'
    RETRYCANCEL = 'retrycancel'
    WARNING = 'warning'
    YES = 'yes'
    YESNO = 'yesno'
    YESNOCANCEL = 'yesnocancel'

FILE
    c:\python34\lib\tkinter\messagebox.py

==============

>>> help(simpledialog)
Help on module tkinter.simpledialog in tkinter:

NAME
    tkinter.simpledialog - This modules handles dialog boxes.

DESCRIPTION
    It contains the following public symbols:
    
    SimpleDialog -- A simple but flexible modal dialog box
    
    Dialog -- a base class for dialogs
    
    askinteger -- get an integer from the user
    
    askfloat -- get a float from the user
    
    askstring -- get a string from the user

CLASSES
    builtins.object
        SimpleDialog
    tkinter.Toplevel(tkinter.BaseWidget, tkinter.Wm)
        Dialog


    class Dialog(tkinter.Toplevel)
     |  Class to open dialogs.
     |  
     |  This class is intended as a base class for custom dialogs
     |  
     |  Method resolution order:
     |      Dialog
     |      tkinter.Toplevel
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Wm
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, parent, title=None)
     |      Initialize a dialog.
     |      
     |      Arguments:
     |      
     |          parent -- a parent window (the application window)
     |      
     |          title -- the dialog title
     |  
     |  apply(self)
     |      process the data
     |      
     |      This method is called automatically to process the data, *after*
     |      the dialog is destroyed. By default, it does nothing.
     |  
     |  body(self, master)
     |      create dialog body.
     |      
     |      return widget that should have initial focus.
     |      This method should be overridden, and is called
     |      by the __init__ method.
     |  
     |  buttonbox(self)
     |      add standard button box.
     |      
     |      override if you do not want the standard buttons
     |  
     |  cancel(self, event=None)
     |  
     |  destroy(self)
     |      Destroy the window
     |  
     |  ok(self, event=None)
     |  
     |  validate(self)
     |      validate the data
     |      
     |      This method is called automatically to validate the data before the
     |      dialog is destroyed. By default, it always validates OK.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tkinter.Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Wm:
     |  


    class SimpleDialog(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, master, text='', buttons=[], default=None, cancel=None, title=None, class_=None)
     |  
     |  done(self, num)
     |  
     |  go(self)
     |  
     |  return_event(self, event)
     |  
     |  wm_delete_window(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


FUNCTIONS
    askfloat(title, prompt, **kw)
        get a float from the user
        
        Arguments:
        
            title -- the dialog title
            prompt -- the label text
            **kw -- see SimpleDialog class
        
        Return value is a float
    
    askinteger(title, prompt, **kw)
        get an integer from the user
        
        Arguments:
        
            title -- the dialog title
            prompt -- the label text
            **kw -- see SimpleDialog class
        
        Return value is an integer
    
    askstring(title, prompt, **kw)
        get a string from the user
        
        Arguments:
        
            title -- the dialog title
            prompt -- the label text
            **kw -- see SimpleDialog class
        
        Return value is a string

DATA

FILE
    c:\python34\lib\tkinter\simpledialog.py

===============

>>> help(filedialog)
Help on module tkinter.filedialog in tkinter:

NAME
    tkinter.filedialog - File selection dialog classes.

DESCRIPTION
    Classes:
    
    - FileDialog
    - LoadFileDialog
    - SaveFileDialog
    
    This module also presents tk common file dialogues, it provides interfaces
    to the native file dialogues available in Tk 4.2 and newer, and the
    directory dialogue available in Tk 8.3 and newer.
    These interfaces were written by Fredrik Lundh, May 1997.

CLASSES
    builtins.object
        FileDialog
            LoadFileDialog
            SaveFileDialog
    tkinter.commondialog.Dialog(builtins.object)
        Directory
    _Dialog(tkinter.commondialog.Dialog)
        Open
        SaveAs


    class Directory(tkinter.commondialog.Dialog)
     |  Ask for a directory
     |  
     |  Method resolution order:
     |      Directory
     |      tkinter.commondialog.Dialog
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  command = 'tk_chooseDirectory'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.commondialog.Dialog:
     |  
     |  __init__(self, master=None, **options)
     |  
     |  show(self, **options)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.commondialog.Dialog:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class FileDialog(builtins.object)
     |  Standard file selection dialog -- no checks on selected file.
     |  
     |  Usage:
     |  
     |      d = FileDialog(master)
     |      fname = d.go(dir_or_file, pattern, default, key)
     |      if fname is None: ...canceled...
     |      else: ...open file...
     |  
     |  All arguments to go() are optional.
     |  
     |  The 'key' argument specifies a key in the global dictionary
     |  'dialogstates', which keeps track of the values for the directory
     |  and pattern arguments, overriding the values passed in (it does
     |  not keep track of the default argument!).  If no key is specified,
     |  the dialog keeps no memory of previous state.  Note that memory is
     |  kept even when the dialog is canceled.  (All this emulates the
     |  behavior of the Macintosh file selection dialogs.)
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master, title=None)
     |  
     |  cancel_command(self, event=None)
     |  
     |  dirs_double_event(self, event)
     |  
     |  dirs_select_event(self, event)
     |  
     |  files_double_event(self, event)
     |  
     |  files_select_event(self, event)
     |  
     |  filter_command(self, event=None)
     |  
     |  get_filter(self)
     |  
     |  get_selection(self)
     |  
     |  go(self, dir_or_file='.', pattern='*', default='', key=None)
     |  
     |  ok_command(self)
     |  
     |  ok_event(self, event)
     |  
     |  quit(self, how=None)
     |  
     |  set_filter(self, dir, pat)
     |  
     |  set_selection(self, file)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  title = 'File Selection Dialog'
     |


    class LoadFileDialog(FileDialog)
     |  File selection dialog which checks that the file exists.
     |  
     |  Method resolution order:
     |      LoadFileDialog
     |      FileDialog
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ok_command(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  title = 'Load File Selection Dialog'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from FileDialog:
     |  
     |  __init__(self, master, title=None)
     |  
     |  cancel_command(self, event=None)
     |  
     |  dirs_double_event(self, event)
     |  
     |  dirs_select_event(self, event)
     |  
     |  files_double_event(self, event)
     |  
     |  files_select_event(self, event)
     |  
     |  filter_command(self, event=None)
     |  
     |  get_filter(self)
     |  
     |  get_selection(self)
     |  
     |  go(self, dir_or_file='.', pattern='*', default='', key=None)
     |  
     |  ok_event(self, event)
     |  
     |  quit(self, how=None)
     |  
     |  set_filter(self, dir, pat)
     |  
     |  set_selection(self, file)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from FileDialog:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |


    class Open(_Dialog)
     |  Ask for a filename to open
     |  
     |  Method resolution order:
     |      Open
     |      _Dialog
     |      tkinter.commondialog.Dialog
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  command = 'tk_getOpenFile'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.commondialog.Dialog:
     |  
     |  __init__(self, master=None, **options)
     |  
     |  show(self, **options)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.commondialog.Dialog:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class SaveAs(_Dialog)
     |  Ask for a filename to save as
     |  
     |  Method resolution order:
     |      SaveAs
     |      _Dialog
     |      tkinter.commondialog.Dialog
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  command = 'tk_getSaveFile'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.commondialog.Dialog:
     |  
     |  __init__(self, master=None, **options)
     |  
     |  show(self, **options)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.commondialog.Dialog:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class SaveFileDialog(FileDialog)
     |  File selection dialog which checks that the file may be created.
     |  
     |  Method resolution order:
     |      SaveFileDialog
     |      FileDialog
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  ok_command(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  title = 'Save File Selection Dialog'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from FileDialog:
     |  
     |  __init__(self, master, title=None)
     |  
     |  cancel_command(self, event=None)
     |  
     |  dirs_double_event(self, event)
     |  
     |  dirs_select_event(self, event)
     |  
     |  files_double_event(self, event)
     |  
     |  files_select_event(self, event)
     |  
     |  filter_command(self, event=None)
     |  
     |  get_filter(self)
     |  
     |  get_selection(self)
     |  
     |  go(self, dir_or_file='.', pattern='*', default='', key=None)
     |  
     |  ok_event(self, event)
     |  
     |  quit(self, how=None)
     |  
     |  set_filter(self, dir, pat)
     |  
     |  set_selection(self, file)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from FileDialog:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


FUNCTIONS
    askdirectory(**options)
        Ask for a directory, and return the file name
    
    askopenfile(mode='r', **options)
        Ask for a filename to open, and returned the opened file
    
    askopenfilename(**options)
        Ask for a filename to open
    
    askopenfilenames(**options)
        Ask for multiple filenames to open
        
        Returns a list of filenames or empty list if
        cancel button selected
    
    askopenfiles(mode='r', **options)
        Ask for multiple filenames and return the open file
        objects
        
        returns a list of open file objects or an empty list if
        cancel selected
    
    asksaveasfile(mode='w', **options)
        Ask for a filename to save as, and returned the opened file
    
    asksaveasfilename(**options)
        Ask for a filename to save as
    
    test()
        Simple test program.

DATA
nieuw:
    dialogstates = {}

FILE
    c:\python34\lib\tkinter\filedialog.py

=============

>>> help(colorchooser)
Help on module tkinter.colorchooser in tkinter:

NAME
    tkinter.colorchooser

DESCRIPTION
    # tk common color chooser dialogue
    #
    # this module provides an interface to the native color dialogue
    # available in Tk 4.2 and newer.
    #
    # written by Fredrik Lundh, May 1997
    #
    # fixed initialcolor handling in August 1998
    #

CLASSES
    tkinter.commondialog.Dialog(builtins.object)
        Chooser


    class Chooser(tkinter.commondialog.Dialog)
     |  Ask for a color
     |  
     |  Method resolution order:
     |      Chooser
     |      tkinter.commondialog.Dialog
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  command = 'tk_chooseColor'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.commondialog.Dialog:
     |  
     |  __init__(self, master=None, **options)
     |  
     |  show(self, **options)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.commondialog.Dialog:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


FUNCTIONS
    askcolor(color=None, **options)
        Ask for a color. Bv blauw geeft tuple: ((0.0, 0.0, 255.99609375), '#0000ff')
        ecr: de 1e tuple is zinloos, want je moet in tk kleuren ALTIJD als str opgeven.
        Converteren tuple->str: "#%02x%02x%02x" % (33.102,147.887, 255.998) ->'#2193ff'

FILE
    c:\python34\lib\tkinter\colorchooser.py

==============

>>> import tkinter.dnd
>>> dir(tkinter.dnd)
['DndHandler', 'Icon', 'Tester', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'dnd_start', 'test', 'tkinter']

>>> help(tkinter.dnd)
Help on module tkinter.dnd in tkinter:

NAME
    tkinter.dnd - Drag-and-drop support for Tkinter.

DESCRIPTION
    This is very preliminary.  I currently only support dnd *within* one
    application, between different windows (or within the same window).
    
    I an trying to make this as generic as possible -- not dependent on
    the use of a particular widget or icon type, etc.  I also hope that
    this will work with Pmw.
    
    To enable an object to be dragged, you must create an event binding
    for it that starts the drag-and-drop process. Typically, you should
    bind <ButtonPress> to a callback function that you write. The function
    should call Tkdnd.dnd_start(source, event), where 'source' is the
    object to be dragged, and 'event' is the event that invoked the call
    (the argument to your callback function).  Even though this is a class
    instantiation, the returned instance should not be stored -- it will
    be kept alive automatically for the duration of the drag-and-drop.
    
    When a drag-and-drop is already in process for the Tk interpreter, the
    call is *ignored*; this normally averts starting multiple simultaneous
    dnd processes, e.g. because different button callbacks all
    dnd_start().
    
    The object is *not* necessarily a widget -- it can be any
    application-specific object that is meaningful to potential
    drag-and-drop targets.
    
    Potential drag-and-drop targets are discovered as follows.  Whenever
    the mouse moves, and at the start and end of a drag-and-drop move, the
    Tk widget directly under the mouse is inspected.  This is the target
    widget (not to be confused with the target object, yet to be
    determined).  If there is no target widget, there is no dnd target
    object.  If there is a target widget, and it has an attribute
    dnd_accept, this should be a function (or any callable object).  The
    function is called as dnd_accept(source, event), where 'source' is the
    object being dragged (the object passed to dnd_start() above), and
    'event' is the most recent event object (generally a <Motion> event;
    it can also be <ButtonPress> or <ButtonRelease>).  If the dnd_accept()
    function returns something other than None, this is the new dnd target
    object.  If dnd_accept() returns None, or if the target widget has no
    dnd_accept attribute, the target widget's parent is considered as the
    target widget, and the search for a target object is repeated from
    there.  If necessary, the search is repeated all the way up to the
    root widget.  If none of the target widgets can produce a target
    object, there is no target object (the target object is None).
    
    The target object thus produced, if any, is called the new target
    object.  It is compared with the old target object (or None, if there
    was no old target widget).  There are several cases ('source' is the
    source object, and 'event' is the most recent event object):
    
    - Both the old and new target objects are None.  Nothing happens.
    
    - The old and new target objects are the same object.  Its method
    dnd_motion(source, event) is called.
    
    - The old target object was None, and the new target object is not
    None.  The new target object's method dnd_enter(source, event) is
    called.
    
    - The new target object is None, and the old target object is not
    None.  The old target object's method dnd_leave(source, event) is
    called.
    
    - The old and new target objects differ and neither is None.  The old
    target object's method dnd_leave(source, event), and then the new
    target object's method dnd_enter(source, event) is called.
    
    Once this is done, the new target object replaces the old one, and the
    Tk mainloop proceeds.  The return value of the methods mentioned above
    is ignored; if they raise an exception, the normal exception handling
    mechanisms take over.
    
    The drag-and-drop processes can end in two ways: a final target object
    is selected, or no final target object is selected.  When a final
    target object is selected, it will always have been notified of the
    potential drop by a call to its dnd_enter() method, as described
    above, and possibly one or more calls to its dnd_motion() method; its
    dnd_leave() method has not been called since the last call to
    dnd_enter().  The target is notified of the drop by a call to its
    method dnd_commit(source, event).
    
    If no final target object is selected, and there was an old target
    object, its dnd_leave(source, event) method is called to complete the
    dnd sequence.
    
    Finally, the source object is notified that the drag-and-drop process
    is over, by a call to source.dnd_end(target, event), specifying either
    the selected target object, or None if no target object was selected.
    The source object can use this to implement the commit action; this is
    sometimes simpler than to do it in the target's dnd_commit().  The
    target's dnd_commit() method could then simply be aliased to
    dnd_leave().
    
    At any time during a dnd sequence, the application can cancel the
    sequence by calling the cancel() method on the object returned by
    dnd_start().  This will call dnd_leave() if a target is currently
    active; it will never call dnd_commit().

CLASSES
    builtins.object
        DndHandler
        Icon
        Tester
    
    class DndHandler(builtins.object)
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __init__(self, source, event)
     |  
     |  cancel(self, event=None)
     |  
     |  finish(self, event, commit=0)
     |  
     |  on_motion(self, event)
     |  
     |  on_release(self, event)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  root = None
     |

    
    class Icon(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, name)
     |  
     |  attach(self, canvas, x=10, y=10)
     |  
     |  detach(self)
     |  
     |  dnd_end(self, target, event)
     |  
     |  move(self, event)
     |  
     |  press(self, event)
     |  
     |  putback(self)
     |  
     |  where(self, canvas, event)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


    class Tester(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, root)
     |  
     |  dnd_accept(self, source, event)
     |  
     |  dnd_commit(self, source, event)
     |  
     |  dnd_enter(self, source, event)
     |  
     |  dnd_leave(self, source, event)
     |  
     |  dnd_motion(self, source, event)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |


FUNCTIONS
    dnd_start(source, event)
    
    test()

FILE
    c:\python34\lib\tkinter\dnd.py

==============

>>> import tkinter.scrolledtext
>>> dir(tkinter.scrolledtext)
['BOTH', 'Frame', 'Grid', 'LEFT', 'Pack', 'Place', 'RIGHT', 'Scrollbar', 'ScrolledText', 'Text', 'Y', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'example']
>>> help(tkinter.scrolledtext)
Help on module tkinter.scrolledtext in tkinter:

NAME
    tkinter.scrolledtext

DESCRIPTION
    A ScrolledText widget feels like a text widget but also has a
    vertical scroll bar on its right.  (Later, options may be added to
    add a horizontal bar as well, to make the bars disappear
    automatically when not needed, to move them to the other side of the
    window, etc.)
    
    Configuration options are passed to the Text widget.
    A Frame widget is inserted between the master and the text, to hold
    the Scrollbar widget.
    Most methods calls are inherited from the Text widget; Pack, Grid and
    Place methods are redirected to the Frame widget however.

CLASSES
    tkinter.Text(tkinter.Widget, tkinter.XView, tkinter.YView)
        ScrolledText
    
    class ScrolledText(tkinter.Text)
     |  Method resolution order:
     |      ScrolledText
     |      tkinter.Text
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      tkinter.XView
     |      tkinter.YView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |  
     |  __str__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Text:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.BaseWidget:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from tkinter.Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from tkinter.Misc:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Pack:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Place:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.Grid:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.XView:
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from tkinter.YView:
     |  


DATA
    __all__ = ['ScrolledText']

FILE
    c:\python34\lib\tkinter\scrolledtext.py

==============

qqq

>>> import tkinter.ttk
>>> dir(tkinter.ttk)
['Button', 'Checkbutton', 'Combobox', 'Entry', 'Frame', 'Label', 'LabelFrame', 'Labelframe',
 'LabeledScale', 'Menubutton', 'Notebook', 'OptionMenu', 'PanedWindow', 'Panedwindow',
 'Progressbar', 'Radiobutton', 'Scale', 'Scrollbar', 'Separator', 'Sizegrip', 'Style',
 'Treeview', 'Widget', ..., 'tclobjs_to_py', 'tkinter']

nieuw:
Combobox
LabeledScale
Notebook
Progressbar
Separator
Sizegrip
Style
Treeview


>>> help(tkinter.ttk)
Help on module tkinter.ttk in tkinter:

NAME
    tkinter.ttk - Ttk wrapper.

DESCRIPTION
    This module provides classes to allow using Tk themed widget set.
    
    Ttk is based on a revised and enhanced version of
    TIP #48 (http://tip.tcl.tk/48) specified style engine.
    
    Its basic idea is to separate, to the extent possible, the code
    implementing a widget's behavior from the code implementing its
    appearance. Widget class bindings are primarily responsible for
    maintaining the widget state and invoking callbacks, all aspects
    of the widgets appearance lies at Themes.

CLASSES
    builtins.object
        Style
    tkinter.Entry(tkinter.Widget, tkinter.XView)
        Entry(Widget, tkinter.Entry)
            Combobox
    tkinter.PanedWindow(tkinter.Widget)
        Panedwindow(Widget, tkinter.PanedWindow)
    tkinter.Scale(tkinter.Widget)
        Scale(Widget, tkinter.Scale)
    tkinter.Scrollbar(tkinter.Widget)
        Scrollbar(Widget, tkinter.Scrollbar)
    tkinter.XView(builtins.object)
        Treeview(Widget, tkinter.XView, tkinter.YView)
    tkinter.YView(builtins.object)
        Treeview(Widget, tkinter.XView, tkinter.YView)
    Widget(tkinter.Widget)
        Button
        Checkbutton
        Entry(Widget, tkinter.Entry)
            Combobox
        Frame
            LabeledScale
        Label
        Labelframe
        Menubutton
            OptionMenu
        Notebook
        Panedwindow(Widget, tkinter.PanedWindow)
        Progressbar
        Radiobutton
        Scale(Widget, tkinter.Scale)
        Scrollbar(Widget, tkinter.Scrollbar)
        Separator
        Sizegrip
        Treeview(Widget, tkinter.XView, tkinter.YView)

    
    class Button(Widget)
     |  Ttk Button widget, displays a textual label and/or image, and
     |  evaluates a command when pressed.
     |  
     |  Method resolution order:
     |      Button
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Button widget with the parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, state, style, takefocus,
     |          text, textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, default, width
     |  
     |  invoke(self)
     |      Invokes the command associated with the button.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Checkbutton(Widget)
     |  Ttk Checkbutton widget which is either in on- or off-state.
     |  
     |  Method resolution order:
     |      Checkbutton
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Checkbutton widget with the parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, state, style, takefocus,
     |          text, textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, offvalue, onvalue, variable
     |  
     |  invoke(self)
     |      Toggles between the selected and deselected states and
     |      invokes the associated command. If the widget is currently
     |      selected, sets the option variable to the offvalue option
     |      and deselects the widget; otherwise, sets the option variable
     |      to the option onvalue.
     |      
     |      Returns the result of the associated command.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Combobox(Entry)
     |  Ttk Combobox widget combines a text field with a pop-down list of
     |  values.
     |  
     |  Method resolution order:
     |      Combobox
     |      Entry
     |      Widget
     |      tkinter.Entry
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      tkinter.XView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Combobox widget with the parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          exportselection, justify, height, postcommand, state,
     |          textvariable, values, width
     |
     |      VIRTUAL EVENTS
     |
     |          <<ComboboxSelected>>      bij klik op item
     |  
     |  current(self, newindex=None)
     |      If newindex is supplied, sets the combobox value to the
     |      element at position newindex in the list of values. Otherwise,
     |      returns the index of the current value in the list of values
     |      or -1 if the current value does not appear in the list.
     |  
     |  set(self, value)
     |      Sets the value of the combobox to value.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Entry:
     |  

    
    class Entry(Widget, tkinter.Entry)
     |  Ttk Entry widget displays a one-line text string and allows that
     |  string to be edited by the user.
     |  
     |  Method resolution order:
     |      Entry
     |      Widget
     |      tkinter.Entry
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      tkinter.XView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, widget=None, **kw)
     |      Constructs a Ttk Entry widget with the parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus, xscrollcommand
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          exportselection, invalidcommand, justify, show, state,
     |          textvariable, validate, validatecommand, width
     |      
     |      VALIDATION MODES
     |      
     |          none, key, focus, focusin, focusout, all
     |  
     |  bbox(self, index)
     |      Return a tuple of (x, y, width, height) which describes the
     |      bounding box of the character given by index.
     |  
     |  identify(self, x, y)
     |      Returns the name of the element at position x, y, or the
     |      empty string if the coordinates are outside the window.
     |  
     |  validate(self)
     |      Force revalidation, independent of the conditions specified
     |      by the validate option. Returns False if validation fails, True
     |      if it succeeds. Sets or clears the invalid state accordingly.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Frame(Widget)
     |  Ttk Frame widget is a container, used to group other widgets
     |  together.
     |  
     |  Method resolution order:
     |      Frame
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Frame with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          borderwidth, relief, padding, width, height
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Label(Widget)
     |  Ttk Label widget displays a textual label and/or image.
     |  
     |  Method resolution order:
     |      Label
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Label with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, style, takefocus, text,
     |          textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          anchor, background, font, foreground, justify, padding,
     |          relief, text, wraplength
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    LabelFrame = class Labelframe(Widget)
     |  Ttk Labelframe widget is a container used to group other widgets
     |  together. It has an optional label, which may be a plain text string
     |  or another widget.
     |  
     |  Method resolution order:
     |      Labelframe
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Labelframe with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |          labelanchor, text, underline, padding, labelwidget, width,
     |          height
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class LabeledScale(Frame)
     |  A Ttk Scale widget with a Ttk Label widget indicating its
     |  current value.
     |  
     |  The Ttk Scale can be accessed through instance.scale, and Ttk Label
     |  can be accessed through instance.label
     |  
     |  Method resolution order:
     |      LabeledScale
     |      Frame
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, variable=None, from_=0, to=10, **kw)
     |      Construct an horizontal LabeledScale with parent master, a
     |      variable to be associated with the Ttk Scale widget and its range.
     |      If variable is not specified, a tkinter.IntVar is created.
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          compound: 'top' or 'bottom'
     |              Specifies how to display the label relative to the scale.
     |              Defaults to 'top'.
     |  
     |  destroy(self)
     |      Destroy this widget and possibly its associated variable.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  value
     |      Return current scale value.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Menubutton(Widget)
     |  Ttk Menubutton widget displays a textual label and/or image, and
     |  displays a menu when pressed.
     |  
     |  Method resolution order:
     |      Menubutton
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Menubutton with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, state, style, takefocus,
     |          text, textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          direction, menu
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Notebook(Widget)
     |  Ttk Notebook widget manages a collection of windows and displays
     |  a single one at a time. Each child window is associated with a tab,
     |  which the user may select to change the currently-displayed window.
     |  
     |  Method resolution order:
     |      Notebook
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Notebook with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          height, padding, width
     |      
     |      TAB OPTIONS
     |      
     |          state, sticky, padding, text, image, compound, underline
     |      
     |      TAB IDENTIFIERS (tab_id)
     |      
     |          The tab_id argument found in several methods may take any of
     |          the following forms:
     |      
     |              * An integer between zero and the number of tabs
     |              * The name of a child window
     |              * A positional specification of the form "@x,y", which
     |                defines the tab
     |              * The string "current", which identifies the
     |                currently-selected tab
     |              * The string "end", which returns the number of tabs (only
     |                valid for method index)
     |
     |      VIRTUAL EVENTS
     |
     |          <<NotebookTabChanged>>     na selectie andere tab
     |
     |  add(self, child, **kw)
     |      Adds a new tab to the notebook.
     |      
     |      If window is currently managed by the notebook but hidden, it is
     |      restored to its previous position.
     |  
     |  enable_traversal(self)
     |      Enable keyboard traversal for a toplevel window containing
     |      this notebook.
     |      
     |      This will extend the bindings for the toplevel window containing
     |      this notebook as follows:
     |      
     |          Control-Tab: selects the tab following the currently selected
     |                       one
     |      
     |          Shift-Control-Tab: selects the tab preceding the currently
     |                             selected one
     |      
     |          Alt-K: where K is the mnemonic (underlined) character of any
     |                 tab, will select that tab.
     |      
     |      Multiple notebooks in a single toplevel may be enabled for
     |      traversal, including nested notebooks. However, notebook traversal
     |      only works properly if all panes are direct children of the
     |      notebook.
     |  
     |  forget(self, tab_id)
     |      Removes the tab specified by tab_id, unmaps and unmanages the
     |      associated window.
     |  
     |  hide(self, tab_id)
     |      Hides the tab specified by tab_id.
     |      
     |      The tab will not be displayed, but the associated window remains
     |      managed by the notebook and its configuration remembered. Hidden
     |      tabs may be restored with the add command.
     |  
     |  identify(self, x, y)
     |      Returns the name of the tab element at position x, y, or the
     |      empty string if none.
     |  
     |  index(self, tab_id)
     |      Returns the numeric index of the tab specified by tab_id, or
     |      the total number of tabs if tab_id is the string "end".
     |  
     |  insert(self, pos, child, **kw)
     |      Inserts a pane at the specified position.
     |      
     |      pos is either the string end, an integer index, or the name of
     |      a managed child. If child is already managed by the notebook,
     |      moves it to the specified position.
     |  
     |  select(self, tab_id=None)
     |      Selects the specified tab.
     |      
     |      The associated child window will be displayed, and the
     |      previously-selected window (if different) is unmapped. If tab_id
     |      is omitted, returns the widget name of the currently selected
     |      pane.
     |  
     |  tab(self, tab_id, option=None, **kw)
     |      Query or modify the options of the specific tab_id.
     |      
     |      If kw is not given, returns a dict of the tab option values. If option
     |      is specified, returns the value of that option. Otherwise, sets the
     |      options to the corresponding values.
     |  
     |  tabs(self)
     |      Returns a list of windows managed by the notebook.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class OptionMenu(Menubutton)
     |  Themed OptionMenu, based after tkinter's OptionMenu, which allows
     |  the user to select a value from a menu.
     |  
     |  Method resolution order:
     |      OptionMenu
     |      Menubutton
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getitem__(self, item)
     |  
     |  __init__(self, master, variable, default=None, *values, **kwargs)
     |      Construct a themed OptionMenu widget with master as the parent,
     |      the resource textvariable set to variable, the initially selected
     |      value specified by the default parameter, the menu values given by
     |      *values and additional keywords.
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          style: stylename
     |              Menubutton style.
     |          direction: 'above', 'below', 'left', 'right', or 'flush'
     |              Menubutton direction.
     |          command: callback
     |              A callback that will be invoked after selecting an item.
     |  
     |  destroy(self)
     |      Destroy this widget and its associated variable.
     |  
     |  set_menu(self, default=None, *values)
     |      Build a new menu of radiobuttons with *values and optionally
     |      a default value.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    PanedWindow = class Panedwindow(Widget, tkinter.PanedWindow)
     |  Ttk Panedwindow widget displays a number of subwindows, stacked
     |  either vertically or horizontally.
     |  
     |  Method resolution order:
     |      Panedwindow
     |      Widget
     |      tkinter.PanedWindow
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Panedwindow with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          orient, width, height
     |      
     |      PANE OPTIONS
     |      
     |          weight
     |  
     |  forget = remove(self, child)
     |      Remove the pane containing child from the panedwindow
     |      
     |      All geometry management options for child will be forgotten.
     |  
     |  insert(self, pos, child, **kw)
     |      Inserts a pane at the specified positions.
     |      
     |      pos is either the string end, and integer index, or the name
     |      of a child. If child is already managed by the paned window,
     |      moves it to the specified position.
     |  
     |  pane(self, pane, option=None, **kw)
     |      Query or modify the options of the specified pane.
     |      
     |      pane is either an integer index or the name of a managed subwindow.
     |      If kw is not given, returns a dict of the pane option values. If
     |      option is specified then the value for that option is returned.
     |      Otherwise, sets the options to the corresponding values.
     |  
     |  sashpos(self, index, newpos=None)
     |      If newpos is specified, sets the position of sash number index.
     |      
     |      May adjust the positions of adjacent sashes to ensure that
     |      positions are monotonically increasing. Sash positions are further
     |      constrained to be between 0 and the total size of the widget.
     |      
     |      Returns the new position of sash number index.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Progressbar(Widget)
     |  Ttk Progressbar widget shows the status of a long-running
     |  operation. They can operate in two modes: determinate mode shows the
     |  amount completed relative to the total amount of work to be done, and
     |  indeterminate mode provides an animated display to let the user know
     |  that something is happening.
     |  
     |  Method resolution order:
     |      Progressbar
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Progressbar with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          orient, length, mode, maximum, value, variable, phase
     |  
     |  start(self, interval=None)
     |      Begin autoincrement mode: schedules a recurring timer event
     |      that calls method step every interval milliseconds.
     |      
     |      interval defaults to 50 milliseconds (20 steps/second) if ommited.
     |  
     |  step(self, amount=None)
     |      Increments the value option by amount.
     |      
     |      amount defaults to 1.0 if omitted.
     |  
     |  stop(self)
     |      Stop autoincrement mode: cancels any recurring timer event
     |      initiated by start.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Radiobutton(Widget)
     |  Ttk Radiobutton widgets are used in groups to show or change a
     |  set of mutually-exclusive options.
     |  
     |  Method resolution order:
     |      Radiobutton
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Radiobutton with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, compound, cursor, image, state, style, takefocus,
     |          text, textvariable, underline, width
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, value, variable
     |  
     |  invoke(self)
     |      Sets the option variable to the option value, selects the
     |      widget, and invokes the associated command.
     |      
     |      Returns the result of the command, or an empty string if
     |      no command is specified.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Scale(Widget, tkinter.Scale)
     |  Ttk Scale widget is typically used to control the numeric value of
     |  a linked variable that varies uniformly over some range.
     |  
     |  Method resolution order:
     |      Scale
     |      Widget
     |      tkinter.Scale
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Scale with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, from, length, orient, to, value, variable
     |  
     |  configure(self, cnf=None, **kw)
     |      Modify or query scale options.
     |      
     |      Setting a value for any of the "from", "from_" or "to" options
     |      generates a <<RangeChanged>> event.
     |  
     |  get(self, x=None, y=None)
     |      Get the current value of the value option, or the value
     |      corresponding to the coordinates x, y if they are specified.
     |      
     |      x and y are pixel coordinates relative to the scale widget
     |      origin.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Scrollbar(Widget, tkinter.Scrollbar)
     |  Ttk Scrollbar controls the viewport of a scrollable widget.
     |  
     |  Method resolution order:
     |      Scrollbar
     |      Widget
     |      tkinter.Scrollbar
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Scrollbar with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          command, orient
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Separator(Widget)
     |  Ttk Separator widget displays a horizontal or vertical separator
     |  bar.
     |  
     |  Method resolution order:
     |      Separator
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Separator with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          orient
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Sizegrip(Widget)
     |  Ttk Sizegrip allows the user to resize the containing toplevel
     |  window by pressing and dragging the grip.
     |  
     |  Method resolution order:
     |      Sizegrip
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Sizegrip with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, state, style, takefocus
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  

    
    class Style(builtins.object)
     |  Manipulate style database.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None)
     |  
     |  configure(self, style, query_opt=None, **kw)
     |      Query or sets the default value of the specified option(s) in
     |      style.
     |      
     |      Each key in kw is an option and each value is either a string or
     |      a sequence identifying the value for that option.
     |  
     |  element_create(self, elementname, etype, *args, **kw)
     |      Create a new element in the current theme of given etype.
     |  
     |  element_names(self)
     |      Returns the list of elements defined in the current theme.
     |  
     |  element_options(self, elementname)
     |      Return the list of elementname's options.
     |  
     |  layout(self, style, layoutspec=None)
     |      Define the widget layout for given style. If layoutspec is
     |      omitted, return the layout specification for given style.
     |      
     |      layoutspec is expected to be a list or an object different than
     |      None that evaluates to False if you want to "turn off" that style.
     |      If it is a list (or tuple, or something else), each item should be
     |      a tuple where the first item is the layout name and the second item
     |      should have the format described below:
     |      
     |      LAYOUTS
     |      
     |          A layout can contain the value None, if takes no options, or
     |          a dict of options specifying how to arrange the element.
     |          The layout mechanism uses a simplified version of the pack
     |          geometry manager: given an initial cavity, each element is
     |          allocated a parcel. Valid options/values are:
     |      
     |              side: whichside
     |                  Specifies which side of the cavity to place the
     |                  element; one of top, right, bottom or left. If
     |                  omitted, the element occupies the entire cavity.
     |      
     |              sticky: nswe
     |                  Specifies where the element is placed inside its
     |                  allocated parcel.
     |      
     |              children: [sublayout... ]
     |                  Specifies a list of elements to place inside the
     |                  element. Each element is a tuple (or other sequence)
     |                  where the first item is the layout name, and the other
     |                  is a LAYOUT.
     |  
     |  lookup(self, style, option, state=None, default=None)
     |      Returns the value specified for option in style.
     |      
     |      If state is specified it is expected to be a sequence of one
     |      or more states. If the default argument is set, it is used as
     |      a fallback value in case no specification for option is found.
     |  
     |  map(self, style, query_opt=None, **kw)
     |      Query or sets dynamic values of the specified option(s) in
     |      style.
     |      
     |      Each key in kw is an option and each value should be a list or a
     |      tuple (usually) containing statespecs grouped in tuples, or list,
     |      or something else of your preference. A statespec is compound of
     |      one or more states and then a value.
     |  
     |  theme_create(self, themename, parent=None, settings=None)
     |      Creates a new theme.
     |      
     |      It is an error if themename already exists. If parent is
     |      specified, the new theme will inherit styles, elements and
     |      layouts from the specified parent theme. If settings are present,
     |      they are expected to have the same syntax used for theme_settings.
     |  
     |  theme_names(self)
     |      Returns a list of all known themes.
     |  
     |  theme_settings(self, themename, settings)
     |      Temporarily sets the current theme to themename, apply specified
     |      settings and then restore the previous theme.
     |      
     |      Each key in settings is a style and each value may contain the
     |      keys 'configure', 'map', 'layout' and 'element create' and they
     |      are expected to have the same format as specified by the methods
     |      configure, map, layout and element_create respectively.
     |  
     |  theme_use(self, themename=None)
     |      If themename is None, returns the theme in use, otherwise, set
     |      the current theme to themename, refreshes all widgets and emits
     |      a <<ThemeChanged>> event.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

    
    class Treeview(Widget, tkinter.XView, tkinter.YView)
     |  Ttk Treeview widget displays a hierarchical collection of items.
     |  
     |  Each item has a textual label, an optional image, and an optional list
     |  of data values. The data values are displayed in successive columns
     |  after the tree label.
     |  ecr: ipv 'item' kun je beter rowid zeggen, want dat is het: I001, I002, enz.
     |  
     |  Method resolution order:
     |      Treeview
     |      Widget
     |      tkinter.Widget
     |      tkinter.BaseWidget
     |      tkinter.Misc
     |      tkinter.Pack
     |      tkinter.Place
     |      tkinter.Grid
     |      tkinter.XView
     |      tkinter.YView
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, master=None, **kw)
     |      Construct a Ttk Treeview with parent master.
     |      
     |      STANDARD OPTIONS
     |      
     |          class, cursor, style, takefocus, xscrollcommand,
     |          yscrollcommand
     |      
     |      WIDGET-SPECIFIC OPTIONS
     |      
     |          columns, displaycolumns, height, padding, selectmode, show
     |          columns = tuple v colnames/id's
     |          displaycolumns = tuple v zichtbare colnames/id's + volgorde; default: ('#all',)
     |          height = aantal regels
     |          selectmode = dflt 'extended'|'browse'|'none'; browse ->1 item sel
     |          show = dflt 'tree headings'|'tree' (tree-deel)|'headings' (list-deel)
     |      
     |      ITEM OPTIONS
     |      
     |          text, image, values, open, tags, ecr: tag
     |          open = dflt False|True ->toon meteen children
     |      
     |      TAG OPTIONS
     |      
     |          foreground, background, font, image
     |
     |      VIRTUAL EVENTS
     |
     |          <<TreeviewSelect>>      als je op een node/rij klikt, komt na open/close
     |          <<TreeviewOpen>>        bij klik op [+]
     |          <<TreeviewClose>>       bij klik op [-]
     |          als node/rij geen children heeft ->bij 1e klik open, bij 2e klik close
     |
     |  bbox(self, item, column=None)
     |      Returns the bounding box (relative to the treeview widget's
     |      window) of the specified item (=rowid) in the form x y width height.
     |      
     |      If column is specified, returns the bounding box of that cell.
     |      If the item is not visible (i.e., if it is a descendant of a
     |      closed item or is scrolled offscreen), returns an empty string.
     |  
     |  column(self, column, option=None, **kw)
     |      Query or modify the options for the specified column (ecr: is kolnaam).
     |      
     |      If kw is not given, returns a dict of the column option values. If
     |      option is specified then the value for that option is returned.
     |      Otherwise, sets the options to the corresponding values.
     |      anchor, minwidth, width, stretch [dflt True = groei mee met resize]
     |  
     |  delete(self, *items)
     |      Delete all specified items and all their descendants. The root
     |      item may not be deleted.
     |  
     |  detach(self, *items)
     |      Unlinks all of the specified items from the tree.
     |      
     |      The items and all of their descendants are still present, and may
     |      be reinserted at another point in the tree, but will not be
     |      displayed. The root item may not be detached.
     |  
     |  exists(self, item)
     |      Returns True if the specified item is present in the tree,
     |      False otherwise.
     |  
     |  focus(self, item=None)
     |      If item is specified, sets the focus item to item. Otherwise,
     |      returns the current focus item, or '' if there is none.
     |  
     |  get_children(self, item=None)
     |      Returns a tuple of children belonging to item.
     |      
     |      If item is not specified, returns root children.
     |  
     |  heading(self, column, option=None, **kw)
     |      Query or modify the heading options for the specified column.
     |      
     |      If kw is not given, returns a dict of the heading option values. If
     |      option is specified then the value for that option is returned.
     |      Otherwise, sets the options to the corresponding values.
     |      
     |      Valid options/values are:
     |          text: text
     |              The text to display in the column heading
     |          image: image_name
     |              Specifies an image to display to the right of the column
     |              heading
     |          anchor: anchor
     |              Specifies how the heading text should be aligned. One of
     |              the standard Tk anchor values
     |          command: callback
     |              A callback to be invoked when the heading label is
     |              pressed.
     |          ecr: state (default '')
     |      
     |      To configure the tree column heading, call this with column = "#0"
     |  
     |  identify(self, component, x, y)
     |      Returns a description of the specified component under the
     |      point given by x and y, or the empty string if no such component
     |      is present at that position.
     |      component: region, element, column, row, item (=row ->rowid)
     |  
     |  identify_column(self, x)
     |      Returns the data column identifier of the cell at position x.
     |      
     |      The tree column has ID #0.
     |  
     |  identify_element(self, x, y)
     |      Returns str: element type at position x, y.
     |      ecr: text (bij kol1,kol2), padding (bij tree), Treeitem.indicator (bij [+])
     |      * Availability: Tk 8.6
     |  
     |  identify_region(self, x, y)
     |      Returns str, one of:
     |      
     |      heading: Tree heading area.
     |      separator: Space between two columns headings;
     |      tree: The tree area, dwz [+] en kol #0
     |      cell: A data cell.
     |      nothing: bij leeg gedeelte vd tree
     |      
     |      * Availability: Tk 8.6
     |  
     |  identify_row(self, y)
     |      Returns the item ID of the item at position y.
     |  
     |  index(self, item)
     |      Returns the integer index of item within its parent's list
     |      of children.
     |  
     |  insert(self, parent, index, iid=None, **kw)
     |      Creates a new item and return the item identifier of the newly
     |      created item.
     |      
     |      parent is the item ID of the parent item, or the empty string
     |      to create a new top-level item. index is an integer, or the value
     |      'end', specifying where in the list of parent's children to insert
     |      the new item. If index is less than or equal to zero, the new node
     |      is inserted at the beginning, if index is greater than or equal to
     |      the current number of children, it is inserted at the end. If iid
     |      is specified, it is used as the item identifier, iid must not
     |      already exist in the tree. Otherwise, a new unique identifier
     |      is generated.
     |  
     |  item(self, item, option=None, **kw)
     |      Query or modify the options for the specified item.
     |      
     |      If no options are given, a dict with options/values for the item
     |      is returned. If option is specified then the value for that option
     |      is returned. Otherwise, sets the options to the corresponding
     |      values as given by kw.
     |  
     |  move(self, item, parent, index)
     |      Moves item to position index in parent's list of children.
     |      
     |      It is illegal to move an item under one of its descendants. If
     |      index is less than or equal to zero, item is moved to the
     |      beginning, if greater than or equal to the number of children,
     |      it is moved to the end. If item was detached it is reattached.
     |  
     |  next(self, item)
     |      Returns the identifier of item's next sibling, or '' if item
     |      is the last child of its parent.
     |  
     |  parent(self, item)
     |      Returns the ID of the parent of item, or '' if item is at the
     |      top level of the hierarchy.
     |  
     |  prev(self, item)
     |      Returns the identifier of item's previous sibling, or '' if
     |      item is the first child of its parent.
     |  
     |  reattach = move(self, item, parent, index)
     |  
     |  see(self, item)
     |      Ensure that item is visible.
     |      
     |      Sets all of item's ancestors open option to True, and scrolls
     |      the widget if necessary so that item is within the visible
     |      portion of the tree.
     |  
     |  selection(self, selop=None, items=None)
     |      If selop is not specified, returns selected items.
     |      ecr: selop='add'|'remove'|'set'|'toggle'
     |  
     |  selection_add(self, items)
     |      Add items to the selection.
     |  
     |  selection_remove(self, items)
     |      Remove items from the selection.
     |  
     |  selection_set(self, items)
     |      items becomes the new selection.
     |      ecr: Tupel v gegenereerde id's, bv ('I001','I004')
     |  
     |  selection_toggle(self, items)
     |      Toggle the selection state of each item in items.
     |  
     |  set(self, item, column=None, value=None)
     |      Query or set the value of given item.
     |      
     |      With one argument, return a dictionary of column/value pairs
     |      for the specified item. With two arguments, return the current
     |      value of the specified column. With three arguments, set the
     |      value of given column in given item to the specified value.
     |  
     |  set_children(self, item, *newchildren)
     |      Replaces item's child with newchildren.
     |      
     |      Children present in item that are not present in newchildren
     |      are detached from tree. No items in newchildren may be an
     |      ancestor of item.
     |  
     |  tag_bind(self, tagname, sequence=None, callback=None)
     |      Bind a callback for the given event sequence to the tag tagname.
     |      When an event is delivered to an item, the callbacks for each
     |      of the item's tags option are called.
     |  
     |  tag_configure(self, tagname, option=None, **kw)
     |      Query or modify the options for the specified tagname.
     |      
     |      If kw is not given, returns a dict of the option settings for tagname.
     |      If option is specified, returns the value for that option for the
     |      specified tagname. Otherwise, sets the options to the corresponding
     |      values for the given tagname.
     |      ecr: mag instellen: background, foreground, font, image
     |  
     |  tag_has(self, tagname, item=None)
     |      If item is specified, returns 1 or 0 depending on whether the
     |      specified item has the given tagname. Otherwise, returns a list of
     |      all items which have the specified tag.
     |      
     |      * Availability: Tk 8.6
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Widget:
     |  


FUNCTIONS
    setup_master(master=None)
        If master is not None, itself is returned. If master is None,
        the default master is returned if there is one, otherwise a new
        master is created and returned.
        
        If it is not allowed to use the default root and master is None,
        RuntimeError is raised.
    
    tclobjs_to_py(adict)
        Returns adict with its values converted from Tcl objects to Python
        objects.

DATA
    __all__ = ['Button', 'Checkbutton', 'Combobox', 'Entry', 'Frame', 'Label', 'Labelframe',
    	'LabelFrame', 'Menubutton', 'Notebook', 'Panedwindow', 'PanedWindow', 'Progressbar',
    	'Radiobutton', 'Scale', 'Scrollbar', 'Separator', 'Sizegrip', 'Style', 'Treeview',
    	'LabeledScale', 'OptionMenu', 'tclobjs_to_py', 'setup_master']

VERSION
    0.3.1

AUTHOR
    Guilherme Polo <ggpolo@gmail.com>

FILE
    c:\python34\lib\tkinter\ttk.py

==============
==============

qqq

ecr: pillow
ecr: PIL

>>> dir(PIL)
['BmpImagePlugin', 'GifImagePlugin', 'GimpGradientFile', 'GimpPaletteFile', 'Image', 'ImageChops', 'ImageColor', 'ImageFile', 'ImageMode', 'ImagePalette', 'ImageSequence', 'ImageTk', 'JpegImagePlugin', 'JpegPresets', 'PILLOW_VERSION', 'PaletteFile', 'PngImagePlugin', 'PpmImagePlugin', 'TiffImagePlugin', 'TiffTags', 'VERSION', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_binary', '_imaging', '_imagingtk', '_plugins', '_util']

>>> help(PIL)
Help on package PIL:

NAME
    PIL

DESCRIPTION
    # The Python Imaging Library.
    # $Id$
    #
    # package placeholder
    #
    # Copyright (c) 1999 by Secret Labs AB.
    #
    # See the README file for information on usage and redistribution.
    #

PACKAGE CONTENTS
    BdfFontFile
    BmpImagePlugin
    BufrStubImagePlugin
    ContainerIO
    CurImagePlugin
    DcxImagePlugin
    DdsImagePlugin
    EpsImagePlugin
    ExifTags
    FitsStubImagePlugin
    FliImagePlugin
    FontFile
    FpxImagePlugin
    FtexImagePlugin
    GbrImagePlugin
    GdImageFile
    GifImagePlugin
    GimpGradientFile
    GimpPaletteFile
    GribStubImagePlugin
    Hdf5StubImagePlugin
    IcnsImagePlugin
    IcoImagePlugin
    ImImagePlugin
    Image
    ImageChops
    ImageCms
    ImageColor
    ImageDraw
    ImageDraw2
    ImageEnhance
    ImageFile
    ImageFilter
    ImageFont
    ImageGrab
    ImageMath
    ImageMode
    ImageMorph
    ImageOps
    ImagePalette
    ImagePath
    ImageQt
    ImageSequence
    ImageShow
    ImageStat
    ImageTk
    ImageTransform
    ImageWin
    ImtImagePlugin
    IptcImagePlugin
    Jpeg2KImagePlugin
    JpegImagePlugin
    JpegPresets
    McIdasImagePlugin
    MicImagePlugin
    MpegImagePlugin
    MpoImagePlugin
    MspImagePlugin
    OleFileIO
    PSDraw
    PaletteFile
    PalmImagePlugin
    PcdImagePlugin
    PcfFontFile
    PcxImagePlugin
    PdfImagePlugin
    PixarImagePlugin
    PngImagePlugin
    PpmImagePlugin
    PsdImagePlugin
    PyAccess
    SgiImagePlugin
    SpiderImagePlugin
    SunImagePlugin
    TarIO
    TgaImagePlugin
    TiffImagePlugin
    TiffTags
    WalImageFile
    WebPImagePlugin
    WmfImagePlugin
    XVThumbImagePlugin
    XbmImagePlugin
    XpmImagePlugin
    _binary
    _imaging
    _imagingcms
    _imagingft
    _imagingmath
    _imagingmorph
    _imagingtk
    _tkinter_finder
    _util
    _webp
    features

DATA
    PILLOW_VERSION = '4.1.1'
    VERSION = '1.1.7'

VERSION
    4.1.1

FILE
    c:\python34\lib\site-packages\pil\__init__.py

==============

>>> dir(PIL.ImageTk)
['BitmapImage', 'BytesIO', 'Image', 'PhotoImage', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_get_image_from_kw', '_pilbitmap_check', '_pilbitmap_ok', '_show', 'getimage', 'sys', 'tkinter']

>>> help(PIL.ImageTk)
Help on module PIL.ImageTk in PIL:

NAME
    PIL.ImageTk

DESCRIPTION
    # The Python Imaging Library.
    # $Id$
    #
    # a Tk display interface
    #
    # History:
    # 96-04-08 fl   Created
    # 96-09-06 fl   Added getimage method
    # 96-11-01 fl   Rewritten, removed image attribute and crop method
    # 97-05-09 fl   Use PyImagingPaste method instead of image type
    # 97-05-12 fl   Minor tweaks to match the IFUNC95 interface
    # 97-05-17 fl   Support the "pilbitmap" booster patch
    # 97-06-05 fl   Added file= and data= argument to image constructors
    # 98-03-09 fl   Added width and height methods to Image classes
    # 98-07-02 fl   Use default mode for "P" images without palette attribute
    # 98-07-02 fl   Explicitly destroy Tkinter image objects
    # 99-07-24 fl   Support multiple Tk interpreters (from Greg Couch)
    # 99-07-26 fl   Automatically hook into Tkinter (if possible)
    # 99-08-15 fl   Hook uses _imagingtk instead of _imaging
    #
    # Copyright (c) 1997-1999 by Secret Labs AB
    # Copyright (c) 1996-1997 by Fredrik Lundh
    #
    # See the README file for information on usage and redistribution.
    #

CLASSES
    builtins.object
        BitmapImage
        PhotoImage


    class BitmapImage(builtins.object)
     |  A Tkinter-compatible bitmap image.  This can be used everywhere Tkinter
     |  expects an image object.
     |  
     |  The given image must have mode "1".  Pixels having value 0 are treated as
     |  transparent.  Options, if any, are passed on to Tkinter.  The most commonly
     |  used option is **foreground**, which is used to specify the color for the
     |  non-transparent parts.  See the Tkinter documentation for information on
     |  how to specify colours.
     |  
     |  :param image: A PIL image.
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __init__(self, image=None, **kw)
     |  
     |  __str__(self)
     |      Get the Tkinter bitmap image identifier.  This method is automatically
     |      called by Tkinter whenever a BitmapImage object is passed to a Tkinter
     |      method.
     |      
     |      :return: A Tkinter bitmap image identifier (a string).
     |  
     |  height(self)
     |      Get the height of the image.
     |      
     |      :return: The height, in pixels.
     |  
     |  width(self)
     |      Get the width of the image.
     |      
     |      :return: The width, in pixels.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)


    class PhotoImage(builtins.object)
     |  A Tkinter-compatible photo image.  This can be used
     |  everywhere Tkinter expects an image object.  If the image is an RGBA
     |  image, pixels having alpha 0 are treated as transparent.
     |  
     |  The constructor takes either a PIL image, or a mode and a size.
     |  Alternatively, you can use the **file** or **data** options to initialize
     |  the photo image object.
     |  
     |  :param image: Either a PIL image, or a mode string.  If a mode string is
     |                used, a size must also be given.
     |  :param size: If the first argument is a mode string, this defines the size
     |               of the image.
     |  :keyword file: A filename to load the image from (using
     |                 ``Image.open(file)``).
     |  :keyword data: An 8-bit string containing image data (as loaded from an
     |                 image file).
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __init__(self, image=None, size=None, **kw)
     |  
     |  __str__(self)
     |      Get the Tkinter photo image identifier.  This method is automatically
     |      called by Tkinter whenever a PhotoImage object is passed to a Tkinter
     |      method.
     |      
     |      :return: A Tkinter photo image identifier (a string).
     |  
     |  height(self)
     |      Get the height of the image.
     |      
     |      :return: The height, in pixels.
     |  
     |  paste(self, im, box=None)
     |      Paste a PIL image into the photo image.  Note that this can
     |      be very slow if the photo image is displayed.
     |      
     |      :param im: A PIL image. The size must match the target region.  If the
     |                 mode does not match, the image is converted to the mode of
     |                 the bitmap image.
     |      :param box: A 4-tuple defining the left, upper, right, and lower pixel
     |                  coordinate.  If None is given instead of a tuple, all of
     |                  the image is assumed.
     |  
     |  width(self)
     |      Get the width of the image.
     |      
     |      :return: The width, in pixels.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    getimage(photo)
        This function is unimplemented

FILE
    c:\python34\lib\site-packages\pil\imagetk.py

================

>>> help(PIL.Image)
Help on module PIL.Image in PIL:

NAME
    PIL.Image

DESCRIPTION
    # The Python Imaging Library.
    # $Id$
    #
    # the Image class wrapper
    #
    # partial release history:
    # 1995-09-09 fl   Created
    # 1996-03-11 fl   PIL release 0.0 (proof of concept)
    # 1996-04-30 fl   PIL release 0.1b1
    # 1999-07-28 fl   PIL release 1.0 final
    # 2000-06-07 fl   PIL release 1.1
    # 2000-10-20 fl   PIL release 1.1.1
    # 2001-05-07 fl   PIL release 1.1.2
    # 2002-03-15 fl   PIL release 1.1.3
    # 2003-05-10 fl   PIL release 1.1.4
    # 2005-03-28 fl   PIL release 1.1.5
    # 2006-12-02 fl   PIL release 1.1.6
    # 2009-11-15 fl   PIL release 1.1.7
    #
    # Copyright (c) 1997-2009 by Secret Labs AB.  All rights reserved.
    # Copyright (c) 1995-2009 by Fredrik Lundh.
    #
    # See the README file for information on usage and redistribution.
    #

CLASSES
    builtins.RuntimeWarning(builtins.Warning)
        DecompressionBombWarning
    builtins.object
        Image
        ImagePointHandler
        ImageTransformHandler


    class DecompressionBombWarning(builtins.RuntimeWarning)
     |  Method resolution order:
     |      DecompressionBombWarning
     |      builtins.RuntimeWarning
     |      builtins.Warning
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.RuntimeWarning:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args


    class Image(builtins.object)
     |  This class represents an image object.  To create
     |  :py:class:`~PIL.Image.Image` objects, use the appropriate factory
     |  functions.  There's hardly ever any reason to call the Image constructor
     |  directly.
     |  
     |  * :py:func:`~PIL.Image.open`
     |  * :py:func:`~PIL.Image.new`
     |  * :py:func:`~PIL.Image.frombytes`
     |  
     |  Methods defined here:
     |  
     |  __copy__ = copy(self)
     |  
     |  __del__(self)
     |  
     |  __enter__(self)
     |      # Context Manager Support
     |  
     |  __eq__(self, other)
     |  
     |  __exit__(self, *args)
     |  
     |  __getstate__(self)
     |  
     |  __init__(self)
     |  
     |  __ne__(self, other)
     |  
     |  __repr__(self)
     |  
     |  __setstate__(self, state)
     |  
     |  close(self)
     |      Closes the file pointer, if possible.
     |      
     |      This operation will destroy the image core and release its memory.
     |      The image data will be unusable afterward.
     |      
     |      This function is only required to close images that have not
     |      had their file read and closed by the
     |      :py:meth:`~PIL.Image.Image.load` method.
     |  
     |  convert(self, mode=None, matrix=None, dither=None, palette=0, colors=256)
     |      Returns a converted copy of this image. For the "P" mode, this
     |      method translates pixels through the palette.  If mode is
     |      omitted, a mode is chosen so that all information in the image
     |      and the palette can be represented without a palette.
     |      
     |      The current version supports all possible conversions between
     |      "L", "RGB" and "CMYK." The **matrix** argument only supports "L"
     |      and "RGB".
     |      
     |      When translating a color image to black and white (mode "L"),
     |      the library uses the ITU-R 601-2 luma transform::
     |      
     |          L = R * 299/1000 + G * 587/1000 + B * 114/1000
     |      
     |      The default method of converting a greyscale ("L") or "RGB"
     |      image into a bilevel (mode "1") image uses Floyd-Steinberg
     |      dither to approximate the original image luminosity levels. If
     |      dither is NONE, all non-zero values are set to 255 (white). To
     |      use other thresholds, use the :py:meth:`~PIL.Image.Image.point`
     |      method.
     |      
     |      :param mode: The requested mode. See: :ref:`concept-modes`.
     |      :param matrix: An optional conversion matrix.  If given, this
     |         should be 4- or 12-tuple containing floating point values.
     |      :param dither: Dithering method, used when converting from
     |         mode "RGB" to "P" or from "RGB" or "L" to "1".
     |         Available methods are NONE or FLOYDSTEINBERG (default).
     |      :param palette: Palette to use when converting from mode "RGB"
     |         to "P".  Available palettes are WEB or ADAPTIVE.
     |      :param colors: Number of colors to use for the ADAPTIVE palette.
     |         Defaults to 256.
     |      :rtype: :py:class:`~PIL.Image.Image`
     |      :returns: An :py:class:`~PIL.Image.Image` object.
     |  
     |  copy(self)
     |      Copies this image. Use this method if you wish to paste things
     |      into an image, but still retain the original.
     |      
     |      :rtype: :py:class:`~PIL.Image.Image`
     |      :returns: An :py:class:`~PIL.Image.Image` object.
     |  
     |  crop(self, box=None)
     |      Returns a rectangular region from this image. The box is a
     |      4-tuple defining the left, upper, right, and lower pixel
     |      coordinate.
     |      
     |      Note: Prior to Pillow 3.4.0, this was a lazy operation.
     |      
     |      :param box: The crop rectangle, as a (left, upper, right, lower)-tuple.
     |      :rtype: :py:class:`~PIL.Image.Image`
     |      :returns: An :py:class:`~PIL.Image.Image` object.
     |  
     |  draft(self, mode, size)
     |      Configures the image file loader so it returns a version of the
     |      image that as closely as possible matches the given mode and
     |      size.  For example, you can use this method to convert a color
     |      JPEG to greyscale while loading it, or to extract a 128x192
     |      version from a PCD file.
     |      
     |      Note that this method modifies the :py:class:`~PIL.Image.Image` object
     |      in place.  If the image has already been loaded, this method has no
     |      effect.
     |      
     |      :param mode: The requested mode.
     |      :param size: The requested size.
     |  
     |  effect_spread(self, distance)
     |      Randomly spread pixels in an image.
     |      
     |      :param distance: Distance to spread pixels.
     |  
     |  filter(self, filter)
     |      Filters this image using the given filter.  For a list of
     |      available filters, see the :py:mod:`~PIL.ImageFilter` module.
     |      
     |      :param filter: Filter kernel.
     |      :returns: An :py:class:`~PIL.Image.Image` object.
     |  
     |  frombytes(self, data, decoder_name='raw', *args)
     |      Loads this image with pixel data from a bytes object.
     |      
     |      This method is similar to the :py:func:`~PIL.Image.frombytes` function,
     |      but loads data into this image instead of creating a new image object.
     |  
     |  fromstring(self, *args, **kw)
     |  
     |  getbands(self)
     |      Returns a tuple containing the name of each band in this image.
     |      For example, **getbands** on an RGB image returns ("R", "G", "B").
     |      
     |      :returns: A tuple containing band names.
     |      :rtype: tuple
     |  
     |  getbbox(self)
     |      Calculates the bounding box of the non-zero regions in the
     |      image.
     |      
     |      :returns: The bounding box is returned as a 4-tuple defining the
     |         left, upper, right, and lower pixel coordinate. If the image
     |         is completely empty, this method returns None.
     |  
     |  getcolors(self, maxcolors=256)
     |      Returns a list of colors used in this image.
     |      
     |      :param maxcolors: Maximum number of colors.  If this number is
     |         exceeded, this method returns None.  The default limit is
     |         256 colors.
     |      :returns: An unsorted list of (count, pixel) values.
     |  
     |  getdata(self, band=None)
     |      Returns the contents of this image as a sequence object
     |      containing pixel values.  The sequence object is flattened, so
     |      that values for line one follow directly after the values of
     |      line zero, and so on.
     |      
     |      Note that the sequence object returned by this method is an
     |      internal PIL data type, which only supports certain sequence
     |      operations.  To convert it to an ordinary sequence (e.g. for
     |      printing), use **list(im.getdata())**.
     |      
     |      :param band: What band to return.  The default is to return
     |         all bands.  To return a single band, pass in the index
     |         value (e.g. 0 to get the "R" band from an "RGB" image).
     |      :returns: A sequence-like object.
     |  
     |  getextrema(self)
     |      Gets the the minimum and maximum pixel values for each band in
     |      the image.
     |      
     |      :returns: For a single-band image, a 2-tuple containing the
     |         minimum and maximum pixel value.  For a multi-band image,
     |         a tuple containing one 2-tuple for each band.
     |  
     |  getim(self)
     |      Returns a capsule that points to the internal image memory.
     |      
     |      :returns: A capsule object.
     |  
     |  getpalette(self)
     |      Returns the image palette as a list.
     |      
     |      :returns: A list of color values [r, g, b, ...], or None if the
     |         image has no palette.
     |  
     |  getpixel(self, xy)
     |      Returns the pixel value at a given position.
     |      
     |      :param xy: The coordinate, given as (x, y).
     |      :returns: The pixel value.  If the image is a multi-layer image,
     |         this method returns a tuple.
     |  
     |  getprojection(self)
     |      Get projection to x and y axes
     |      
     |      :returns: Two sequences, indicating where there are non-zero
     |          pixels along the X-axis and the Y-axis, respectively.
     |  
     |  histogram(self, mask=None, extrema=None)
     |      Returns a histogram for the image. The histogram is returned as
     |      a list of pixel counts, one for each pixel value in the source
     |      image. If the image has more than one band, the histograms for
     |      all bands are concatenated (for example, the histogram for an
     |      "RGB" image contains 768 values).
     |      
     |      A bilevel image (mode "1") is treated as a greyscale ("L") image
     |      by this method.
     |      
     |      If a mask is provided, the method returns a histogram for those
     |      parts of the image where the mask image is non-zero. The mask
     |      image must have the same size as the image, and be either a
     |      bi-level image (mode "1") or a greyscale image ("L").
     |      
     |      :param mask: An optional mask.
     |      :returns: A list containing pixel counts.
     |  
     |  load(self)
     |      Allocates storage for the image and loads the pixel data.  In
     |      normal cases, you don't need to call this method, since the
     |      Image class automatically loads an opened image when it is
     |      accessed for the first time. This method will close the file
     |      associated with the image.
     |      
     |      :returns: An image access object.
     |      :rtype: :ref:`PixelAccess` or :py:class:`PIL.PyAccess`
     |  
     |  offset(self, xoffset, yoffset=None)
     |  
     |  paste(self, im, box=None, mask=None)
     |      Pastes another image into this image. The box argument is either
     |      a 2-tuple giving the upper left corner, a 4-tuple defining the
     |      left, upper, right, and lower pixel coordinate, or None (same as
     |      (0, 0)).  If a 4-tuple is given, the size of the pasted image
     |      must match the size of the region.
     |      
     |      If the modes don't match, the pasted image is converted to the mode of
     |      this image (see the :py:meth:`~PIL.Image.Image.convert` method for
     |      details).
     |      
     |      Instead of an image, the source can be a integer or tuple
     |      containing pixel values.  The method then fills the region
     |      with the given color.  When creating RGB images, you can
     |      also use color strings as supported by the ImageColor module.
     |      
     |      If a mask is given, this method updates only the regions
     |      indicated by the mask.  You can use either "1", "L" or "RGBA"
     |      images (in the latter case, the alpha band is used as mask).
     |      Where the mask is 255, the given image is copied as is.  Where
     |      the mask is 0, the current value is preserved.  Intermediate
     |      values will mix the two images together, including their alpha
     |      channels if they have them.
     |      
     |      See :py:meth:`~PIL.Image.Image.alpha_composite` if you want to
     |      combine images with respect to their alpha channels.
     |      
     |      :param im: Source image or pixel value (integer or tuple).
     |      :param box: An optional 4-tuple giving the region to paste into.
     |         If a 2-tuple is used instead, it's treated as the upper left
     |         corner.  If omitted or None, the source is pasted into the
     |         upper left corner.
     |      
     |         If an image is given as the second argument and there is no
     |         third, the box defaults to (0, 0), and the second argument
     |         is interpreted as a mask image.
     |      :param mask: An optional mask image.
     |  
     |  point(self, lut, mode=None)
     |      Maps this image through a lookup table or function.
     |      
     |      :param lut: A lookup table, containing 256 (or 65336 if
     |         self.mode=="I" and mode == "L") values per band in the
     |         image.  A function can be used instead, it should take a
     |         single argument. The function is called once for each
     |         possible pixel value, and the resulting table is applied to
     |         all bands of the image.
     |      :param mode: Output mode (default is same as input).  In the
     |         current version, this can only be used if the source image
     |         has mode "L" or "P", and the output has mode "1" or the
     |         source image mode is "I" and the output mode is "L".
     |      :returns: An :py:class:`~PIL.Image.Image` object.
     |  
     |  putalpha(self, alpha)
     |      Adds or replaces the alpha layer in this image.  If the image
     |      does not have an alpha layer, it's converted to "LA" or "RGBA".
     |      The new layer must be either "L" or "1".
     |      
     |      :param alpha: The new alpha layer.  This can either be an "L" or "1"
     |         image having the same size as this image, or an integer or
     |         other color value.
     |  
     |  putdata(self, data, scale=1.0, offset=0.0)
     |      Copies pixel data to this image.  This method copies data from a
     |      sequence object into the image, starting at the upper left
     |      corner (0, 0), and continuing until either the image or the
     |      sequence ends.  The scale and offset values are used to adjust
     |      the sequence values: **pixel = value*scale + offset**.
     |      
     |      :param data: A sequence object.
     |      :param scale: An optional scale value.  The default is 1.0.
     |      :param offset: An optional offset value.  The default is 0.0.
     |  
     |  putpalette(self, data, rawmode='RGB')
     |      Attaches a palette to this image.  The image must be a "P" or
     |      "L" image, and the palette sequence must contain 768 integer
     |      values, where each group of three values represent the red,
     |      green, and blue values for the corresponding pixel
     |      index. Instead of an integer sequence, you can use an 8-bit
     |      string.
     |      
     |      :param data: A palette sequence (either a list or a string).
     |  
     |  putpixel(self, xy, value)
     |      Modifies the pixel at the given position. The color is given as
     |      a single numerical value for single-band images, and a tuple for
     |      multi-band images.
     |      
     |      Note that this method is relatively slow.  For more extensive changes,
     |      use :py:meth:`~PIL.Image.Image.paste` or the :py:mod:`~PIL.ImageDraw`
     |      module instead.
     |      
     |      See:
     |      
     |      * :py:meth:`~PIL.Image.Image.paste`
     |      * :py:meth:`~PIL.Image.Image.putdata`
     |      * :py:mod:`~PIL.ImageDraw`
     |      
     |      :param xy: The pixel coordinate, given as (x, y).
     |      :param value: The pixel value.
     |  
     |  quantize(self, colors=256, method=None, kmeans=0, palette=None)
     |      Convert the image to 'P' mode with the specified number
     |      of colors.
     |      
     |      :param colors: The desired number of colors, <= 256
     |      :param method: 0 = median cut
     |                     1 = maximum coverage
     |                     2 = fast octree
     |                     3 = libimagequant
     |      :param kmeans: Integer
     |      :param palette: Quantize to the :py:class:`PIL.ImagingPalette` palette.
     |      :returns: A new image
     |  
     |  remap_palette(self, dest_map, source_palette=None)
     |      Rewrites the image to reorder the palette.
     |      
     |      :param dest_map: A list of indexes into the original palette.
     |         e.g. [1,0] would swap a two item palette, and list(range(255))
     |         is the identity transform.
     |      :param source_palette: Bytes or None.
     |      :returns:  An :py:class:`~PIL.Image.Image` object.
     |  
     |  resize(self, size, resample=0)
     |      Returns a resized copy of this image.
     |      
     |      :param size: The requested size in pixels, as a 2-tuple:
     |         (width, height).
     |      :param resample: An optional resampling filter.  This can be
     |         one of :py:attr:`PIL.Image.NEAREST`, :py:attr:`PIL.Image.BOX`,
     |         :py:attr:`PIL.Image.BILINEAR`, :py:attr:`PIL.Image.HAMMING`,
     |         :py:attr:`PIL.Image.BICUBIC` or :py:attr:`PIL.Image.LANCZOS`.
     |         If omitted, or if the image has mode "1" or "P", it is
     |         set :py:attr:`PIL.Image.NEAREST`.
     |         See: :ref:`concept-filters`.
     |      :returns: An :py:class:`~PIL.Image.Image` object.
     |  
     |  rotate(self, angle, resample=0, expand=0, center=None, translate=None)
     |      Returns a rotated copy of this image.  This method returns a
     |      copy of this image, rotated the given number of degrees counter
     |      clockwise around its centre.
     |      
     |      :param angle: In degrees counter clockwise.
     |      :param resample: An optional resampling filter.  This can be
     |         one of :py:attr:`PIL.Image.NEAREST` (use nearest neighbour),
     |         :py:attr:`PIL.Image.BILINEAR` (linear interpolation in a 2x2
     |         environment), or :py:attr:`PIL.Image.BICUBIC`
     |         (cubic spline interpolation in a 4x4 environment).
     |         If omitted, or if the image has mode "1" or "P", it is
     |         set :py:attr:`PIL.Image.NEAREST`. See :ref:`concept-filters`.
     |      :param expand: Optional expansion flag.  If true, expands the output
     |         image to make it large enough to hold the entire rotated image.
     |         If false or omitted, make the output image the same size as the
     |         input image.  Note that the expand flag assumes rotation around
     |         the center and no translation.
     |      :param center: Optional center of rotation (a 2-tuple).  Origin is
     |         the upper left corner.  Default is the center of the image.
     |      :param translate: An optional post-rotate translation (a 2-tuple).
     |      :returns: An :py:class:`~PIL.Image.Image` object.
     |  
     |  save(self, fp, format=None, **params)
     |      Saves this image under the given filename.  If no format is
     |      specified, the format to use is determined from the filename
     |      extension, if possible.
     |      
     |      Keyword options can be used to provide additional instructions
     |      to the writer. If a writer doesn't recognise an option, it is
     |      silently ignored. The available options are described in the
     |      :doc:`image format documentation
     |      <../handbook/image-file-formats>` for each writer.
     |      
     |      You can use a file object instead of a filename. In this case,
     |      you must always specify the format. The file object must
     |      implement the ``seek``, ``tell``, and ``write``
     |      methods, and be opened in binary mode.
     |      
     |      :param fp: A filename (string), pathlib.Path object or file object.
     |      :param format: Optional format override.  If omitted, the
     |         format to use is determined from the filename extension.
     |         If a file object was used instead of a filename, this
     |         parameter should always be used.
     |      :param options: Extra parameters to the image writer.
     |      :returns: None
     |      :exception KeyError: If the output format could not be determined
     |         from the file name.  Use the format option to solve this.
     |      :exception IOError: If the file could not be written.  The file
     |         may have been created, and may contain partial data.
     |  
     |  seek(self, frame)
     |      Seeks to the given frame in this sequence file. If you seek
     |      beyond the end of the sequence, the method raises an
     |      **EOFError** exception. When a sequence file is opened, the
     |      library automatically seeks to frame 0.
     |      
     |      Note that in the current version of the library, most sequence
     |      formats only allows you to seek to the next frame.
     |      
     |      See :py:meth:`~PIL.Image.Image.tell`.
     |      
     |      :param frame: Frame number, starting at 0.
     |      :exception EOFError: If the call attempts to seek beyond the end
     |          of the sequence.
     |  
     |  show(self, title=None, command=None)
     |      Displays this image. This method is mainly intended for
     |      debugging purposes.
     |      
     |      On Unix platforms, this method saves the image to a temporary
     |      PPM file, and calls either the **xv** utility or the **display**
     |      utility, depending on which one can be found.
     |      
     |      On macOS, this method saves the image to a temporary BMP file, and
     |      opens it with the native Preview application.
     |      
     |      On Windows, it saves the image to a temporary BMP file, and uses
     |      the standard BMP display utility to show it (usually Paint).
     |      
     |      :param title: Optional title to use for the image window,
     |         where possible.
     |      :param command: command used to show the image
     |  
     |  split(self)
     |      Split this image into individual bands. This method returns a
     |      tuple of individual image bands from an image. For example,
     |      splitting an "RGB" image creates three new images each
     |      containing a copy of one of the original bands (red, green,
     |      blue).
     |      
     |      :returns: A tuple containing bands.
     |  
     |  tell(self)
     |      Returns the current frame number. See :py:meth:`~PIL.Image.Image.seek`.
     |      
     |      :returns: Frame number, starting with 0.
     |  
     |  thumbnail(self, size, resample=3)
     |      Make this image into a thumbnail.  This method modifies the
     |      image to contain a thumbnail version of itself, no larger than
     |      the given size.  This method calculates an appropriate thumbnail
     |      size to preserve the aspect of the image, calls the
     |      :py:meth:`~PIL.Image.Image.draft` method to configure the file reader
     |      (where applicable), and finally resizes the image.
     |      
     |      Note that this function modifies the :py:class:`~PIL.Image.Image`
     |      object in place.  If you need to use the full resolution image as well,
     |      apply this method to a :py:meth:`~PIL.Image.Image.copy` of the original
     |      image.
     |      
     |      :param size: Requested size.
     |      :param resample: Optional resampling filter.  This can be one
     |         of :py:attr:`PIL.Image.NEAREST`, :py:attr:`PIL.Image.BILINEAR`,
     |         :py:attr:`PIL.Image.BICUBIC`, or :py:attr:`PIL.Image.LANCZOS`.
     |         If omitted, it defaults to :py:attr:`PIL.Image.BICUBIC`.
     |         (was :py:attr:`PIL.Image.NEAREST` prior to version 2.5.0)
     |      :returns: None
     |  
     |  tobitmap(self, name='image')
     |      Returns the image converted to an X11 bitmap.
     |      
     |      .. note:: This method only works for mode "1" images.
     |      
     |      :param name: The name prefix to use for the bitmap variables.
     |      :returns: A string containing an X11 bitmap.
     |      :raises ValueError: If the mode is not "1"
     |  
     |  tobytes(self, encoder_name='raw', *args)
     |      Return image as a bytes object.
     |      
     |      .. warning::
     |      
     |          This method returns the raw image data from the internal
     |          storage.  For compressed image data (e.g. PNG, JPEG) use
     |          :meth:`~.save`, with a BytesIO parameter for in-memory
     |          data.
     |      
     |      :param encoder_name: What encoder to use.  The default is to
     |                           use the standard "raw" encoder.
     |      :param args: Extra arguments to the encoder.
     |      :rtype: A bytes object.
     |  
     |  toqimage(self)
     |      Returns a QImage copy of this image
     |  
     |  toqpixmap(self)
     |      Returns a QPixmap copy of this image
     |  
     |  tostring(self, *args, **kw)
     |  
     |  transform(self, size, method, data=None, resample=0, fill=1)
     |      Transforms this image.  This method creates a new image with the
     |      given size, and the same mode as the original, and copies data
     |      to the new image using the given transform.
     |      
     |      :param size: The output size.
     |      :param method: The transformation method.  This is one of
     |        :py:attr:`PIL.Image.EXTENT` (cut out a rectangular subregion),
     |        :py:attr:`PIL.Image.AFFINE` (affine transform),
     |        :py:attr:`PIL.Image.PERSPECTIVE` (perspective transform),
     |        :py:attr:`PIL.Image.QUAD` (map a quadrilateral to a rectangle), or
     |        :py:attr:`PIL.Image.MESH` (map a number of source quadrilaterals
     |        in one operation).
     |      :param data: Extra data to the transformation method.
     |      :param resample: Optional resampling filter.  It can be one of
     |         :py:attr:`PIL.Image.NEAREST` (use nearest neighbour),
     |         :py:attr:`PIL.Image.BILINEAR` (linear interpolation in a 2x2
     |         environment), or :py:attr:`PIL.Image.BICUBIC` (cubic spline
     |         interpolation in a 4x4 environment). If omitted, or if the image
     |         has mode "1" or "P", it is set to :py:attr:`PIL.Image.NEAREST`.
     |      :returns: An :py:class:`~PIL.Image.Image` object.
     |  
     |  transpose(self, method)
     |      Transpose image (flip or rotate in 90 degree steps)
     |      
     |      :param method: One of :py:attr:`PIL.Image.FLIP_LEFT_RIGHT`,
     |        :py:attr:`PIL.Image.FLIP_TOP_BOTTOM`, :py:attr:`PIL.Image.ROTATE_90`,
     |        :py:attr:`PIL.Image.ROTATE_180`, :py:attr:`PIL.Image.ROTATE_270` or
     |        :py:attr:`PIL.Image.TRANSPOSE`.
     |      :returns: Returns a flipped or rotated copy of this image.
     |  
     |  verify(self)
     |      Verifies the contents of a file. For data read from a file, this
     |      method attempts to determine if the file is broken, without
     |      actually decoding the image data.  If this method finds any
     |      problems, it raises suitable exceptions.  If you need to load
     |      the image after using this method, you must reopen the image
     |      file.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __array_interface__
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  height
     |  
     |  width
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None
     |  
     |  format = None
     |  
     |  format_description = None


    class ImagePointHandler(builtins.object)
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)


    class ImageTransformHandler(builtins.object)
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    alpha_composite(im1, im2)
        Alpha composite im2 over im1.
        
        :param im1: The first image. Must have mode RGBA.
        :param im2: The second image.  Must have mode RGBA, and the same size as
           the first image.
        :returns: An :py:class:`~PIL.Image.Image` object.
    
    blend(im1, im2, alpha)
        Creates a new image by interpolating between two input images, using
        a constant alpha.::
        
            out = image1 * (1.0 - alpha) + image2 * alpha
        
        :param im1: The first image.
        :param im2: The second image.  Must have the same mode and size as
           the first image.
        :param alpha: The interpolation alpha factor.  If alpha is 0.0, a
           copy of the first image is returned. If alpha is 1.0, a copy of
           the second image is returned. There are no restrictions on the
           alpha value. If necessary, the result is clipped to fit into
           the allowed output range.
        :returns: An :py:class:`~PIL.Image.Image` object.
    
    coerce_e(value)
    
    composite(image1, image2, mask)
        Create composite image by blending images using a transparency mask.
        
        :param image1: The first image.
        :param image2: The second image.  Must have the same mode and
           size as the first image.
        :param mask: A mask image.  This image can have mode
           "1", "L", or "RGBA", and must have the same size as the
           other two images.
    
    effect_mandelbrot(size, extent, quality)
        Generate a Mandelbrot set covering the given extent.
        
        :param size: The requested size in pixels, as a 2-tuple:
           (width, height).
        :param extent: The extent to cover, as a 4-tuple:
           (x0, y0, x1, y2).
        :param quality: Quality.
    
    effect_noise(size, sigma)
        Generate Gaussian noise centered around 128.
        
        :param size: The requested size in pixels, as a 2-tuple:
           (width, height).
        :param sigma: Standard deviation of noise.
    
    eval(image, *args)
        Applies the function (which should take one argument) to each pixel
        in the given image. If the image has more than one band, the same
        function is applied to each band. Note that the function is
        evaluated once for each possible pixel value, so you cannot use
        random components or other generators.
        
        :param image: The input image.
        :param function: A function object, taking one integer argument.
        :returns: An :py:class:`~PIL.Image.Image` object.
    
    fromarray(obj, mode=None)
        Creates an image memory from an object exporting the array interface
        (using the buffer protocol).
        
        If obj is not contiguous, then the tobytes method is called
        and :py:func:`~PIL.Image.frombuffer` is used.
        
        :param obj: Object with array interface
        :param mode: Mode to use (will be determined from type if None)
          See: :ref:`concept-modes`.
        :returns: An image object.
        
        .. versionadded:: 1.1.6
    
    frombuffer(mode, size, data, decoder_name='raw', *args)
        Creates an image memory referencing pixel data in a byte buffer.
        
        This function is similar to :py:func:`~PIL.Image.frombytes`, but uses data
        in the byte buffer, where possible.  This means that changes to the
        original buffer object are reflected in this image).  Not all modes can
        share memory; supported modes include "L", "RGBX", "RGBA", and "CMYK".
        
        Note that this function decodes pixel data only, not entire images.
        If you have an entire image file in a string, wrap it in a
        **BytesIO** object, and use :py:func:`~PIL.Image.open` to load it.
        
        In the current version, the default parameters used for the "raw" decoder
        differs from that used for :py:func:`~PIL.Image.frombytes`.  This is a
        bug, and will probably be fixed in a future release.  The current release
        issues a warning if you do this; to disable the warning, you should provide
        the full set of parameters.  See below for details.
        
        :param mode: The image mode. See: :ref:`concept-modes`.
        :param size: The image size.
        :param data: A bytes or other buffer object containing raw
            data for the given mode.
        :param decoder_name: What decoder to use.
        :param args: Additional parameters for the given decoder.  For the
            default encoder ("raw"), it's recommended that you provide the
            full set of parameters::
        
                frombuffer(mode, size, data, "raw", mode, 0, 1)
        
        :returns: An :py:class:`~PIL.Image.Image` object.
        
        .. versionadded:: 1.1.4
    
    frombytes(mode, size, data, decoder_name='raw', *args)
        Creates a copy of an image memory from pixel data in a buffer.
        
        In its simplest form, this function takes three arguments
        (mode, size, and unpacked pixel data).
        
        You can also use any pixel decoder supported by PIL.  For more
        information on available decoders, see the section
        :ref:`Writing Your Own File Decoder <file-decoders>`.
        
        Note that this function decodes pixel data only, not entire images.
        If you have an entire image in a string, wrap it in a
        :py:class:`~io.BytesIO` object, and use :py:func:`~PIL.Image.open` to load
        it.
        
        :param mode: The image mode. See: :ref:`concept-modes`.
        :param size: The image size.
        :param data: A byte buffer containing raw data for the given mode.
        :param decoder_name: What decoder to use.
        :param args: Additional parameters for the given decoder.
        :returns: An :py:class:`~PIL.Image.Image` object.
    
    fromqimage(im)
        Creates an image instance from a QImage image
    
    fromqpixmap(im)
        Creates an image instance from a QPixmap image
    
    fromstring(*args, **kw)
    
    getmodebandnames(mode)
        Gets a list of individual band names.  Given a mode, this function returns
        a tuple containing the names of individual bands (use
        :py:method:`~PIL.Image.getmodetype` to get the mode used to store each
        individual band.
        
        :param mode: Input mode.
        :returns: A tuple containing band names.  The length of the tuple
            gives the number of bands in an image of the given mode.
        :exception KeyError: If the input mode was not a standard mode.
    
    getmodebands(mode)
        Gets the number of individual bands for this mode.
        
        :param mode: Input mode.
        :returns: The number of bands in this mode.
        :exception KeyError: If the input mode was not a standard mode.
    
    getmodebase(mode)
        Gets the "base" mode for given mode.  This function returns "L" for
        images that contain grayscale data, and "RGB" for images that
        contain color data.
        
        :param mode: Input mode.
        :returns: "L" or "RGB".
        :exception KeyError: If the input mode was not a standard mode.
    
    getmodetype(mode)
        Gets the storage type mode.  Given a mode, this function returns a
        single-layer mode suitable for storing individual bands.
        
        :param mode: Input mode.
        :returns: "L", "I", or "F".
        :exception KeyError: If the input mode was not a standard mode.
    
    init()
        Explicitly initializes the Python Imaging Library. This function
        loads all available file format drivers.
    
    isImageType(t)
        Checks if an object is an image object.
        
        .. warning::
        
           This function is for internal use only.
        
        :param t: object to check if it's an image
        :returns: True if the object is an image
    
    linear_gradient(mode)
        Generate 256x256 linear gradient from black to white, top to bottom.
        
        :param mode: Input mode.
    
    merge(mode, bands)
        Merge a set of single band images into a new multiband image.
        
        :param mode: The mode to use for the output image. See:
            :ref:`concept-modes`.
        :param bands: A sequence containing one single-band image for
            each band in the output image.  All bands must have the
            same size.
        :returns: An :py:class:`~PIL.Image.Image` object.
    
    new(mode, size, color=0)
        Creates a new image with the given mode and size.
        
        :param mode: The mode to use for the new image. See:
           :ref:`concept-modes`.
        :param size: A 2-tuple, containing (width, height) in pixels.
        :param color: What color to use for the image.  Default is black.
           If given, this should be a single integer or floating point value
           for single-band modes, and a tuple for multi-band modes (one value
           per band).  When creating RGB images, you can also use color
           strings as supported by the ImageColor module.  If the color is
           None, the image is not initialised.
        :returns: An :py:class:`~PIL.Image.Image` object.
    
    open(fp, mode='r')
        Opens and identifies the given image file.
        
        This is a lazy operation; this function identifies the file, but
        the file remains open and the actual image data is not read from
        the file until you try to process the data (or call the
        :py:meth:`~PIL.Image.Image.load` method).  See
        :py:func:`~PIL.Image.new`.
        
        :param fp: A filename (string), pathlib.Path object or a file object.
           The file object must implement :py:meth:`~file.read`,
           :py:meth:`~file.seek`, and :py:meth:`~file.tell` methods,
           and be opened in binary mode.
        :param mode: The mode.  If given, this argument must be "r".
        :returns: An :py:class:`~PIL.Image.Image` object.
        :exception IOError: If the file cannot be found, or the image cannot be
           opened and identified.
    
    preinit()
        Explicitly load standard file format drivers.
    
    radial_gradient(mode)
        Generate 256x256 radial gradient from black to white, centre to edge.
        
        :param mode: Input mode.
    
    register_decoder(name, decoder)
        Registers an image decoder.  This function should not be
        used in application code.
        
        :param name: The name of the decoder
        :param decoder: A callable(mode, args) that returns an
                        ImageFile.PyDecoder object
        
        .. versionadded:: 4.1.0
    
    register_encoder(name, encoder)
        Registers an image encoder.  This function should not be
        used in application code.
        
        :param name: The name of the encoder
        :param encoder: A callable(mode, args) that returns an
                        ImageFile.PyEncoder object
        
        .. versionadded:: 4.1.0
    
    register_extension(id, extension)
        Registers an image extension.  This function should not be
        used in application code.
        
        :param id: An image format identifier.
        :param extension: An extension used for this format.
    
    register_mime(id, mimetype)
        Registers an image MIME type.  This function should not be used
        in application code.
        
        :param id: An image format identifier.
        :param mimetype: The image MIME type for this format.
    
    register_open(id, factory, accept=None)
        Register an image file plugin.  This function should not be used
        in application code.
        
        :param id: An image format identifier.
        :param factory: An image file factory method.
        :param accept: An optional function that can be used to quickly
           reject images having another format.
    
    register_save(id, driver)
        Registers an image save function.  This function should not be
        used in application code.
        
        :param id: An image format identifier.
        :param driver: A function to save images in this format.
    
    register_save_all(id, driver)
        Registers an image function to save all the frames
        of a multiframe format.  This function should not be
        used in application code.
        
        :param id: An image format identifier.
        :param driver: A function to save images in this format.
    
    registered_extensions()
        Returns a dictionary containing all file extensions belonging
        to registered plugins

DATA
    ADAPTIVE = 1
    AFFINE = 0
    ANTIALIAS = 1
    BICUBIC = 3
    BILINEAR = 2
    BOX = 4
    CONTAINER = 2
    CUBIC = 3
    DECODERS = {}
    DEFAULT_STRATEGY = 0
    ENCODERS = {}
    EXTENSION = {'.pbm': 'PPM', '.jpg': 'JPEG', '.png': 'PNG', '.tif': 'TIFF', '.tiff': 'TIFF', '.bmp': 'BMP', '.jpeg': 'JPEG', '.ppm': 'PPM', '.pgm': 'PPM', '.jpe': 'JPEG', '.jfif': 'JPEG', '.gif': 'GIF'}
    EXTENT = 1
    FASTOCTREE = 2
    FILTERED = 1
    FIXED = 4
    FLIP_LEFT_RIGHT = 0
    FLIP_TOP_BOTTOM = 1
    FLOYDSTEINBERG = 3
    HAMMING = 5
    HAS_CFFI = False
    HUFFMAN_ONLY = 2
    ID = ['BMP', 'GIF', 'TIFF', 'JPEG', 'PPM', 'PNG']
    LANCZOS = 1
    LIBIMAGEQUANT = 3
    LINEAR = 2
    MAXCOVERAGE = 1
    MAX_IMAGE_PIXELS = 89478485
    MEDIANCUT = 0
    MESH = 4
    MIME = {'BMP': 'image/bmp', 'GIF': 'image/gif', 'JPEG': 'image/jpeg', ...
    MODES = ['1', 'CMYK', 'F', 'HSV', 'I', 'L', 'LAB', 'P', 'RGB', 'RGBA',...
    NEAREST = 0
    NONE = 0
    NORMAL = 0
    OPEN = {'BMP': (<class 'PIL.BmpImagePlugin.BmpImageFile'>, <function _...
    ORDERED = 1
    PERSPECTIVE = 2
    PILLOW_VERSION = '4.1.1'
    QUAD = 3
    RASTERIZE = 2
    RLE = 3
    ROTATE_180 = 3
    ROTATE_270 = 4
    ROTATE_90 = 2
    SAVE = {'BMP': <function _save>, 'GIF': <function _save>, 'JPEG': <fun...
    SAVE_ALL = {'GIF': <function _save_all>, 'TIFF': <function _save_all>}
    SEQUENCE = 1
    TRANSPOSE = 5
    USE_CFFI_ACCESS = False
    VERSION = '1.1.7'
    WEB = 0
    logger = <logging.Logger object>

FILE
    c:\python34\lib\site-packages\pil\image.py

=================

qqq

ecr: olefile zat bij pillow 4.2.1 voor Python 3.4; niet meer bij pillow 6.0.0 voor Python 3.7

>>> import olefile
>>> dir(olefile)
['MAGIC', 'MINIMAL_OLEFILE_SIZE', 'OleFileIO', 'OleMetadata', 'STGTY_EMPTY', 'STGTY_LOCKBYTES', 'STGTY_PROPERTY', 'STGTY_ROOT', 'STGTY_STORAGE', 'STGTY_STREAM', '__all__', '__author__', '__builtins__', '__cached__', '__date__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', 'enable_logging', 'isOleFile', 'olefile']

>>> help(olefile)
Help on package olefile:

NAME
    olefile - olefile (formerly OleFileIO_PL)

DESCRIPTION
    Module to read/write Microsoft OLE2 files (also called Structured Storage or
    Microsoft Compound Document File Format), such as Microsoft Office 97-2003
    documents, Image Composer and FlashPix files, Outlook messages, ...
    This version is compatible with Python 2.6+ and 3.x
    
    Project website: https://www.decalage.info/olefile
    
    olefile is copyright (c) 2005-2017 Philippe Lagadec (https://www.decalage.info)
    
    olefile is based on the OleFileIO module from the PIL library v1.1.7
    See: http://www.pythonware.com/products/pil/index.htm
    and http://svn.effbot.org/public/tags/pil-1.1.7/PIL/OleFileIO.py
    
    The Python Imaging Library (PIL) is
        Copyright (c) 1997-2009 by Secret Labs AB
        Copyright (c) 1995-2009 by Fredrik Lundh
    
    See source code and LICENSE.txt for information on usage and redistribution.

PACKAGE CONTENTS
    olefile

CLASSES
    builtins.object
        olefile.olefile.OleFileIO
        olefile.olefile.OleMetadata


    class OleFileIO(builtins.object)
     |  OLE container object
     |  
     |  This class encapsulates the interface to an OLE 2 structured
     |  storage file.  Use the listdir and openstream methods to
     |  access the contents of this file.
     |  
     |  Object names are given as a list of strings, one for each subentry
     |  level.  The root entry should be omitted.  For example, the following
     |  code extracts all image streams from a Microsoft Image Composer file::
     |  
     |      ole = OleFileIO("fan.mic")
     |  
     |      for entry in ole.listdir():
     |          if entry[1:2] == "Image":
     |              fin = ole.openstream(entry)
     |              fout = open(entry[0:1], "wb")
     |              while True:
     |                  s = fin.read(8192)
     |                  if not s:
     |                      break
     |                  fout.write(s)
     |  
     |  You can use the viewer application provided with the Python Imaging
     |  Library to view the resulting files (which happens to be standard
     |  TIFF files).
     |  
     |  Methods defined here:
     |  
     |  __init__(self, filename=None, raise_defects=40, write_mode=False, debug=False, path_encoding=None)
     |      Constructor for the OleFileIO class.
     |      
     |      :param filename: file to open.
     |      
     |          - if filename is a string smaller than 1536 bytes, it is the path
     |            of the file to open. (bytes or unicode string)
     |          - if filename is a string longer than 1535 bytes, it is parsed
     |            as the content of an OLE file in memory. (bytes type only)
     |          - if filename is a file-like object (with read, seek and tell methods),
     |            it is parsed as-is.
     |      
     |      :param raise_defects: minimal level for defects to be raised as exceptions.
     |          (use DEFECT_FATAL for a typical application, DEFECT_INCORRECT for a
     |          security-oriented application, see source code for details)
     |      
     |      :param write_mode: bool, if True the file is opened in read/write mode instead
     |          of read-only by default.
     |      
     |      :param debug: bool, set debug mode (deprecated, not used anymore)
     |      
     |      :param path_encoding: None or str, name of the codec to use for path
     |          names (streams and storages), or None for Unicode.
     |          Unicode by default on Python 3+, UTF-8 on Python 2.x.
     |          (new in olefile 0.42, was hardcoded to Latin-1 until olefile v0.41)
     |  
     |  close(self)
     |      close the OLE file, to release the file object
     |  
     |  dumpdirectory(self)
     |      Dump directory (for debugging only)
     |  
     |  dumpfat(self, fat, firstindex=0)
     |      Display a part of FAT in human-readable form for debugging purposes
     |  
     |  dumpsect(self, sector, firstindex=0)
     |      Display a sector in a human-readable form, for debugging purposes
     |  
     |  exists(self, filename)
     |      Test if given filename exists as a stream or a storage in the OLE
     |      container.
     |      Note: filename is case-insensitive.
     |      
     |      :param filename: path of stream in storage tree. (see openstream for syntax)
     |      :returns: True if object exist, else False.
     |  
     |  get_metadata(self)
     |      Parse standard properties streams, return an OleMetadata object
     |      containing all the available metadata.
     |      (also stored in the metadata attribute of the OleFileIO object)
     |      
     |      new in version 0.25
     |  
     |  get_rootentry_name(self)
     |      Return root entry name. Should usually be 'Root Entry' or 'R' in most
     |      implementations.
     |  
     |  get_size(self, filename)
     |      Return size of a stream in the OLE container, in bytes.
     |      
     |      :param filename: path of stream in storage tree (see openstream for syntax)
     |      :returns: size in bytes (long integer)
     |      :exception IOError: if file not found
     |      :exception TypeError: if this is not a stream.
     |  
     |  get_type(self, filename)
     |      Test if given filename exists as a stream or a storage in the OLE
     |      container, and return its type.
     |      
     |      :param filename: path of stream in storage tree. (see openstream for syntax)
     |      :returns: False if object does not exist, its entry type (>0) otherwise:
     |      
     |          - STGTY_STREAM: a stream
     |          - STGTY_STORAGE: a storage
     |          - STGTY_ROOT: the root entry
     |  
     |  getclsid(self, filename)
     |      Return clsid of a stream/storage.
     |      
     |      :param filename: path of stream/storage in storage tree. (see openstream for
     |          syntax)
     |      :returns: Empty string if clsid is null, a printable representation of the clsid otherwise
     |      
     |      new in version 0.44
     |  
     |  getctime(self, filename)
     |      Return creation time of a stream/storage.
     |      
     |      :param filename: path of stream/storage in storage tree. (see openstream for
     |          syntax)
     |      :returns: None if creation time is null, a python datetime object
     |          otherwise (UTC timezone)
     |      
     |      new in version 0.26
     |  
     |  getmtime(self, filename)
     |      Return modification time of a stream/storage.
     |      
     |      :param filename: path of stream/storage in storage tree. (see openstream for
     |          syntax)
     |      :returns: None if modification time is null, a python datetime object
     |          otherwise (UTC timezone)
     |      
     |      new in version 0.26
     |  
     |  getproperties(self, filename, convert_time=False, no_conversion=None)
     |      Return properties described in substream.
     |      
     |      :param filename: path of stream in storage tree (see openstream for syntax)
     |      :param convert_time: bool, if True timestamps will be converted to Python datetime
     |      :param no_conversion: None or list of int, timestamps not to be converted
     |          (for example total editing time is not a real timestamp)
     |      
     |      :returns: a dictionary of values indexed by id (integer)
     |  
     |  getsect(self, sect)
     |      Read given sector from file on disk.
     |      
     |      :param sect: int, sector index
     |      :returns: a string containing the sector data.
     |  
     |  listdir(self, streams=True, storages=False)
     |      Return a list of streams and/or storages stored in this file
     |      
     |      :param streams: bool, include streams if True (True by default) - new in v0.26
     |      :param storages: bool, include storages if True (False by default) - new in v0.26
     |          (note: the root storage is never included)
     |      :returns: list of stream and/or storage paths
     |  
     |  loaddirectory(self, sect)
     |      Load the directory.
     |      
     |      :param sect: sector index of directory stream.
     |  
     |  loadfat(self, header)
     |      Load the FAT table.
     |  
     |  loadfat_sect(self, sect)
     |      Adds the indexes of the given sector to the FAT
     |      
     |      :param sect: string containing the first FAT sector, or array of long integers
     |      :returns: index of last FAT sector.
     |  
     |  loadminifat(self)
     |      Load the MiniFAT table.
     |  
     |  open(self, filename, write_mode=False)
     |      Open an OLE2 file in read-only or read/write mode.
     |      Read and parse the header, FAT and directory.
     |      
     |      :param filename: string-like or file-like object, OLE file to parse
     |      
     |          - if filename is a string smaller than 1536 bytes, it is the path
     |            of the file to open. (bytes or unicode string)
     |          - if filename is a string longer than 1535 bytes, it is parsed
     |            as the content of an OLE file in memory. (bytes type only)
     |          - if filename is a file-like object (with read, seek and tell methods),
     |            it is parsed as-is.
     |      
     |      :param write_mode: bool, if True the file is opened in read/write mode instead
     |          of read-only by default. (ignored if filename is not a path)
     |  
     |  openstream(self, filename)
     |      Open a stream as a read-only file object (BytesIO).
     |      Note: filename is case-insensitive.
     |      
     |      :param filename: path of stream in storage tree (except root entry), either:
     |      
     |          - a string using Unix path syntax, for example:
     |            'storage_1/storage_1.2/stream'
     |          - or a list of storage filenames, path to the desired stream/storage.
     |            Example: ['storage_1', 'storage_1.2', 'stream']
     |      
     |      :returns: file object (read-only)
     |      :exception IOError: if filename not found, or if this is not a stream.
     |  
     |  sect2array(self, sect)
     |      convert a sector to an array of 32 bits unsigned integers,
     |      swapping bytes on big endian CPUs such as PowerPC (old Macs)
     |  
     |  write_sect(self, sect, data, padding=b'\x00')
     |      Write given sector to file on disk.
     |      
     |      :param sect: int, sector index
     |      :param data: bytes, sector data
     |      :param padding: single byte, padding character if data < sector size
     |  
     |  write_stream(self, stream_name, data)
     |      Write a stream to disk. For now, it is only possible to replace an
     |      existing stream by data of the same size.
     |      
     |      :param stream_name: path of stream in storage tree (except root entry), either:
     |      
     |          - a string using Unix path syntax, for example:
     |            'storage_1/storage_1.2/stream'
     |          - or a list of storage filenames, path to the desired stream/storage.
     |            Example: ['storage_1', 'storage_1.2', 'stream']
     |      
     |      :param data: bytes, data to be written, must be the same size as the original
     |          stream.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)


    class OleMetadata(builtins.object)
     |  class to parse and store metadata from standard properties of OLE files.
     |  
     |  Available attributes:
     |  codepage, title, subject, author, keywords, comments, template,
     |  last_saved_by, revision_number, total_edit_time, last_printed, create_time,
     |  last_saved_time, num_pages, num_words, num_chars, thumbnail,
     |  creating_application, security, codepage_doc, category, presentation_target,
     |  bytes, lines, paragraphs, slides, notes, hidden_slides, mm_clips,
     |  scale_crop, heading_pairs, titles_of_parts, manager, company, links_dirty,
     |  chars_with_spaces, unused, shared_doc, link_base, hlinks, hlinks_changed,
     |  version, dig_sig, content_type, content_status, language, doc_version
     |  
     |  Note: an attribute is set to None when not present in the properties of the
     |  OLE file.
     |  
     |  References for SummaryInformation stream:
     |  
     |  - https://msdn.microsoft.com/en-us/library/dd942545.aspx
     |  - https://msdn.microsoft.com/en-us/library/dd925819%28v=office.12%29.aspx
     |  - https://msdn.microsoft.com/en-us/library/windows/desktop/aa380376%28v=vs.85%29.aspx
     |  - https://msdn.microsoft.com/en-us/library/aa372045.aspx
     |  - http://sedna-soft.de/articles/summary-information-stream/
     |  - https://poi.apache.org/apidocs/org/apache/poi/hpsf/SummaryInformation.html
     |  
     |  References for DocumentSummaryInformation stream:
     |  
     |  - https://msdn.microsoft.com/en-us/library/dd945671%28v=office.12%29.aspx
     |  - https://msdn.microsoft.com/en-us/library/windows/desktop/aa380374%28v=vs.85%29.aspx
     |  - https://poi.apache.org/apidocs/org/apache/poi/hpsf/DocumentSummaryInformation.html
     |  
     |  new in version 0.25
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Constructor for OleMetadata
     |      All attributes are set to None by default
     |  
     |  dump(self)
     |      Dump all metadata, for debugging purposes.
     |  
     |  parse_properties(self, olefile)
     |      Parse standard properties of an OLE file, from the streams
     |      ``\x05SummaryInformation`` and ``\x05DocumentSummaryInformation``,
     |      if present.
     |      Properties are converted to strings, integers or python datetime objects.
     |      If a property is not present, its value is set to None.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  DOCSUM_ATTRIBS = ['codepage_doc', 'category', 'presentation_target', '...
     |  
     |  SUMMARY_ATTRIBS = ['codepage', 'title', 'subject', 'author', 'keywords...

FUNCTIONS
    enable_logging()
        Enable logging for this module (disabled by default).
        This will set the module-specific logger level to NOTSET, which
        means the main application controls the actual logging level.
    
    isOleFile(filename)
        Test if a file is an OLE container (according to the magic bytes in its header).
        
        .. note::
            This function only checks the first 8 bytes of the file, not the
            rest of the OLE structure.
        
        .. versionadded:: 0.16
        
        :param filename: filename, contents or file-like object of the OLE file (string-like or file-like object)
        
            - if filename is a string smaller than 1536 bytes, it is the path
              of the file to open. (bytes or unicode string)
            - if filename is a string longer than 1535 bytes, it is parsed
              as the content of an OLE file in memory. (bytes type only)
            - if filename is a file-like object (with read and seek methods),
              it is parsed as-is.
        
        :type filename: bytes or str or unicode or file
        :returns: True if OLE, False otherwise.
        :rtype: bool

DATA
    MAGIC = b'\xd0\xcf\x11\xe0\xa1\xb1\x1a\xe1'
    MINIMAL_OLEFILE_SIZE = 1536
    STGTY_EMPTY = 0
    STGTY_LOCKBYTES = 3
    STGTY_PROPERTY = 4
    STGTY_ROOT = 5
    STGTY_STORAGE = 1
    STGTY_STREAM = 2
    __all__ = ['isOleFile', 'OleFileIO', 'OleMetadata', 'enable_logging', ...

VERSION
    0.44

DATE
    2017-01-06

AUTHOR
    Philippe Lagadec

FILE
    c:\python34\lib\site-packages\olefile\__init__.py

==============

http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/cursors.html

ecr: alle cursors hebben str namen.

arrow, based_arrow_down, based_arrow_up, boat, bogosity, bottom_left_corner, bottom_right_corner,
bottom_side, bottom_tee, box_spiral, center_ptr, circle, clock, coffee_mug, cross, cross_reverse,
crosshair, diamond_cross,, dot, dotbox, double_arrow, draft_large, draft_small, draped_box,
exchange, fleur, gobbler, gumby, hand1, hand2, heart, icon, iron_cross, left_ptr, left_side,
left_tee, leftbutton, ll_angle, lr_angle, man, middlebutton, mouse, pencil, pirate, plus,
question_arrow, right_ptr, right_side, right_tee, rightbutton, rtl_logo, sailboat, sb_down_arrow,
sb_h_double_arrow, sb_left_arrow, sb_right_arrow, sb_up_arrow, sb_v_double_arrow, shuttle, sizing,
spider, spraycan, star, target, tcross, top_left_arrow, top_left_corner, top_right_corner,
top_side, top_tee, trek, ul_angle, umbrella, ur_angle, watch, xterm, X_cursor.


#!/bin/bash
###############################################################################
# USB-sticks maken. 
#
# Geschreven door Karel Zimmer <info@karelzimmer.nl>.
###############################################################################

PROGRAM_NAME=mkusb

###############################################################################
# Global constants
###############################################################################

OPTIONS_SHORT=
OPTIONS_LONG=
USAGELINE="Gebruik: $PROGRAM_NAME"

DEVICE=/dev/sdb
SOURCE=/home/${SUDO_USER:-$USER}/Downloads

###############################################################################
# Global variables
###############################################################################

NO_FILES_FOUND=true

# Terminalattributen, zie 'man termecho'.  Gebruik ${<variabele-naam>}.
REWRITE_LINE=$(tput cuu1;tput el)

###############################################################################
# Functions
###############################################################################

function check_input {
    local -i    getopt_rc=0
    local       parsed=''

    parsed=$(
        getopt  --alternative                       \
                --options       "$OPTIONS_SHORT"    \
                --longoptions   "$OPTIONS_LONG"     \
                --name          "$PROGRAM_NAME"     \
                --              "$@"
        )       || getopt_rc=$?
    if [[ $getopt_rc -ne 0 ]]; then
        printf '%s\n' "$USAGELINE" >&2
        exit 1
    fi
    eval set -- "$parsed"

    while true; do
        case $1 in
            --)
                shift
                break
                ;;
            *)
                shift
                ;;
        esac
    done

    if [[ "$*" ]]; then
        printf '%s\n' 'Te veel argumenten.'
        printf '%s\n' "$USAGELINE" >&2
        exit 1
    fi

    if ! [[ -d $SOURCE ]]; then
        printf '%s\n' "Map '$SOURCE' bestaat niet."
        printf '%s\n' "$USAGELINE" >&2
        exit 1
    fi

    check_user
    request_input
}


function check_user {
    sudo true
}


function request_input {
    printf '%s\n' 'De volgende /dev/sd schijven en partities zijn aanwezig:'
    if findmnt --list --output=SOURCE,TARGET | grep --regexp='/dev/sd'; then
        printf '%s\n' "
$DEVICE wordt gebruikt als doel en OVERSCHREVEN!"
        while true; do
            read -rp 'Is dit OK? [j/N]: '
            case $REPLY in
                j*|J*)
                    break
                    ;;
                n*|N*|'')
                    exit 0
                    ;;
                *)
                    printf '%s' "${REWRITE_LINE}"
                    continue
                    ;;
            esac
        done
    else
        printf '%s\n' "
Geen $DEVICE gevonden om te gebruiken als doel!

Gebruik optie --target om een ander device op te geven."
        exit 1
    fi
}


function process_input {
    local -i    isosize=0
    local       usbname=''
    local       file=''

    NO_FILES_FOUND=true

    for file in "$SOURCE"/*.iso; do

        if ! [[ -f "$file" ]]; then
            continue
        fi

        NO_FILES_FOUND=false
        usbname=$(basename "$file" .iso | tr '-' ' ')

    printf '%s\n' "$(tput bold)
$usbname$(tput sgr0)"

        while true; do
            read -rp 'maken/Overslaan/stoppen? [m/O/s]: '
            case $REPLY in
                m*|M*)
                    isosize=$(
                        du  --apparent-size \
                            --block-size=1  \
                            "$file"         |
                        cut --fields=1
                        )
                    create_usb_stick "$file"
                    while true; do
                        read -rp "Nog een USB-stick '$usbname' maken? [j/N]: "
                        case $REPLY in
                            j*|J*)
                                create_usb_stick "$file"
                                continue
                                ;;
                            n*|N*|'')
                                printf '%s\n' 'Klaar.'
                                break
                                ;;
                            *)
                                printf '%s' "${REWRITE_LINE}"
                                continue
                                ;;
                        esac
                    done
                    break
                    ;;
                o*|O*|'')
                    printf '%s\n' 'Overgeslagen.'
                    break
                    ;;
                s*|S*)
                    printf '%s\n' 'Gestopt.'
                    exit 0
                    ;;
                *)
                    printf '%s' "${REWRITE_LINE}"
                    continue
                    ;;
            esac
        done
    done

    if $NO_FILES_FOUND; then
        printf '%s\n' "Geen beeldbestanden (.iso) gevonden in map '$SOURCE'."
        exit 1
    fi
}


function create_usb_stick {
    local dd_from=${1:-dd_from?}

    read -rp "Plaats USB-stick '$usbname', gevolgd door Enter [Enter]: "
    if [[ -e $DEVICE ]]; then
        printf '%s\n' "USB-stick $usbname wordt gemaakt..."

        dd  if="$dd_from"       \
            status=none         |
        pv  --size="$isosize"   |
        dd  of=$DEVICE          \
            bs=4M               \
            status=none

        printf '%s\n' "Gegevens schrijven naar $usbname (kan even duren)..."
        sync

        printf '%s\n' "USB-stick '$usbname' is gemaakt."

        printf '%s\n' "Ter controle is er een Kernel-based Virtuele Machine (KVM) \
gestart."
        if ! qemu-system-x86_64 -enable-kvm     \
                                -m 2048         \
                                -hda $DEVICE; then
            true
        fi

        if ! umount "$DEVICE" 2> /dev/null; then
            read -rp "Ontkoppel de USB-stick '$usbname', gevolgd door Enter \
[Enter]: "
        fi
        read -rp "Verwijder de USB-stick '$usbname', gevolgd door Enter \
[Enter]: "
    else
        printf '%s\n' "USB-stick '$usbname' is niet aanwezig op $DEVICE."
        exit 1
    fi
}


function term_script {
    exit 0
}

###############################################################################
# Script
###############################################################################

function main {
    check_input "$@"
    process_input
    term_script
}

main "$@"
